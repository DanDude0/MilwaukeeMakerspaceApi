//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace WildApricot
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class WildApricotClient
	{
#pragma warning disable 8618
		private string _baseUrl;
#pragma warning restore 8618

		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
		private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public WildApricotClient(System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		{
			BaseUrl = "https://api.wildapricot.org/v2.3";
			_httpClient = httpClient;
			Initialize();
		}

		private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set {
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

		partial void Initialize();

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Base URL for specific API version.
		/// </summary>
		/// <remarks>
		/// base URL for specific API version. It provides a list of resources that can be directly accessible by URL without providing any additional information like account ID etc.
		/// </remarks>
		/// <returns>Array of resources</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Resource>> GetApiResourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: ""

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Resource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// List of available accounts
		/// </summary>
		/// <remarks>
		/// List of accounts available with current oAuth token. Typicaly here would
		/// <br/>be only one record in an array
		/// </remarks>
		/// <returns>An array of accounts</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts"
					urlBuilder_.Append("accounts");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Details for specific account
		/// </summary>
		/// <remarks>
		/// Details for specific account
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Account details</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Account> GetAccountAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Contacts list
		/// </summary>
		/// <remarks>
		/// Contacts search can be executed in synchronous and asynchronous manner. It depends on $async query string parameters.
		/// <br/>  # Synchronous call
		/// <br/>  When API call is processing synchronously, then response is just an array of contacts.
		/// <br/>  To make a synchronous contacts search, client application should make a request with query string parameter **$async=false**.
		/// <br/>
		/// <br/>  `GET https://api.wildapricot.org/v2/accounts/{account_id}/contacts?$async=false&amp;OTHER_QUERY_PARAMS`
		/// <br/>
		/// <br/>  # Asynchronous call
		/// <br/>  Contacts search is processed asynchronously by default. So if client application specifies $async=true, or does not specify this parameter at all, the request is processed as described below. In this case contacts search is a two-step action.
		/// <br/>  - **Search request**. Client specifies search conditions and receives resultId. See $filter and $select parameters for filtering.
		/// <br/>  - **Retrieve result**. Client passes resultId and receives request processing status and contacts list if request is already processed
		/// <br/>
		/// <br/>![async contact search diagramm](http://localhost:8019/Content/swagger/WAFiles/ContactListAsyncCall.png)
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="async">Controls whether the API call is perform asynchronously. Default value if true.</param>
		/// <param name="resultId">This parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.</param>
		/// <param name="filter">Filters the results of the Contacts API call so that only those records that match the filter criteria are included.
		/// <br/>See [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.</param>
		/// <param name="select">Controls which fields are returned in the Contacts API call.  The field names correspond to the fields returned by the [ContactFields API call](#/Contacts.CustomFields/GetContactFieldDefinitions), not the field names that appear in Wild Apricot. Multiple field names are separated by commas, and field names with spaces or special characters are enclosed in single quotation marks.</param>
		/// <param name="sort">Ordering expression. There are 2 sorting options - **Name** and  **MemberSince**. And also 2 direction modifiers - **asc** and **desc**.
		/// <br/>---
		/// <br/>Example of valid expression - MemberSince asc</param>
		/// <param name="simpleQuery">simpleQuery is a parameter which allows you to search for contacts by matching a substring in first name, last name, organization, email or phone. This is simpler than using $filter parameter.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">When idsOnly specified, the API returns only a list of identifiers matching criteria.</param>
		/// <returns>A wrapper object, which contains a list of contacts, contact identifiers, contacts count or information about asynchronous search request.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ContactsResponse> GetContactsListAsync(double accountId, bool? async = null, string? resultId = null, string? filter = null, string? select = null, string? sort = null, string? simpleQuery = null, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contacts"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contacts");
					urlBuilder_.Append('?');
					if (async != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$async")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(async, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (resultId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("resultId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resultId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filter != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (select != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (sort != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (simpleQuery != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("simpleQuery")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(simpleQuery, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Create a new contact or member record
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="body">- Values for read-only or unrecognized fields will be ignored.
		/// <br/>- In order to **assign membership**
		/// <br/>  - set MembershipEnabled=true
		/// <br/>  - set MembershipLevel.Id to id of desired level
		/// <br/>
		/// <br/>- In order to **assign bundle** membership
		/// <br/>  - set MembershipEnabled=true
		/// <br/>  - set MembershipLevel.Id to id of some bundle level
		/// <br/>  - set 'Member role' field value to json '{ "Label": "ROLE" }' where ROLE is "Bundle coordinator" or "Bundle member"
		/// <br/>  - For bundle member set field 'Bundle ID' to value of bundle identifier. The bundle ID is returned by the [Bundles API call](https://gethelp.wildapricot.com/en/articles/504) when using it to retrieve bundle information for a particular membership level.</param>
		/// <returns>Returns created contact record.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ContactExtendedMembershipInfo> CreateContactAsync(double accountId, CreateContactParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contacts"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contacts");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactExtendedMembershipInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about current contact
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>information about current contact</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ContactsMe> GetCurrentContactInfoAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contacts/me"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contacts/me");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactsMe>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific member or contact
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Unique contact identifier</param>
		/// <param name="getExtendedMembershipInfo">When GetExtendedMembershipInfo specified the API returns the information about membership order status, membership invoice and allowed actions for current member status.</param>
		/// <returns>information about specific member or contact</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ContactExtendedMembershipInfo> GetContactDetailsAsync(double accountId, int contactId, bool? getExtendedMembershipInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contacts/{contactId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contacts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('?');
					if (getExtendedMembershipInfo != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("getExtendedMembershipInfo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(getExtendedMembershipInfo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactExtendedMembershipInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update information about existing member or contact
		/// </summary>
		/// <remarks>
		/// In order to update contact details it is recommended to provide only the custom fields you want to modify. See POST .../contacts for more details.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Unique contact identifier</param>
		/// <returns>Updated version of contact information.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ContactExtendedMembershipInfo> UpdateContactDetailsAsync(double accountId, int contactId, UpdateContactParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contacts/{contactId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contacts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactExtendedMembershipInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Delete an archived contact
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Unique contact identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteContactAsync(double accountId, int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contacts/{contactId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contacts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Accepts Terms of Use.
		/// </summary>
		/// <remarks>
		/// Accepts Wild Apricot Terms of Use for currently loged in user. Does nothing if accepted already.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task AcceptTermsOfUseAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/AcceptTermsOfUse"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/AcceptTermsOfUse");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Send 2FA code to current user email.
		/// </summary>
		/// <remarks>
		/// Send 2FA code to current user email..
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="method">Type of invoice.</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task Send2FACodeAsync(double accountId, Method? method = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/Send2FACode"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/Send2FACode");
					urlBuilder_.Append('?');
					if (method != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("method")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Verify 2FA code from user email.
		/// </summary>
		/// <remarks>
		/// Verify 2FA code from user email
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="code">Verification code</param>
		/// <param name="method">Type of invoice.</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<bool> Verify2FACodeAsync(double accountId, string code, Method2? method = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (code == null)
				throw new System.ArgumentNullException("code");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/Verify2FACode"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/Verify2FACode");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					if (method != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("method")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// List of custom fields related to contacts and members.
		/// </summary>
		/// <remarks>
		/// This list contains a list of fields of 2 different types.
		/// <br/> - System fields are defined by Wild Apricot system and cannot be removed.
		/// <br/> - Custom fields can be defined by administrator to store some data specific to your account.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="showSectionDividers">Default value is false. Specifies whether section dividers also should be included in the response.</param>
		/// <returns>An array of contact field descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactFieldDescription>> GetContactFieldDefinitionsAsync(double accountId, bool? showSectionDividers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contactfields"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contactfields");
					urlBuilder_.Append('?');
					if (showSectionDividers != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("showSectionDividers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showSectionDividers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactFieldDescription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new contact / membership field
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created field identifier</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> CreateContactFieldDefinitionAsync(double accountId, CreateContactFieldParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contactfields"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contactfields");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Updates an existing contact / membership field
		/// </summary>
		/// <remarks>
		/// Limitations: field type cannot be changed; contact field cannot be transformed to membership field or vice versa
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactFieldId">contact field identifier</param>
		/// <returns>return true if field was updated successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<bool> UpdateContactFieldDefinitionAsync(double accountId, int contactFieldId, UpdateContactFieldParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactFieldId == null)
				throw new System.ArgumentNullException("contactFieldId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contactfields/{contactFieldId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contactfields/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactFieldId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// removes existing field by id
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactFieldId">contact field identifier</param>
		/// <returns>return true if field was removed successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<bool> DeleteContactFieldDefinitionAsync(double accountId, int contactFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactFieldId == null)
				throw new System.ArgumentNullException("contactFieldId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/contactfields/{contactFieldId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/contactfields/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactFieldId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// List of Saved Searches.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>An array of saved search descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SavedSearchListItem>> GetSavedSearchesListAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/savedsearches"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/savedsearches");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SavedSearchListItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Saved Search and found contacts.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="savedSearchId">Saved Search identifier</param>
		/// <param name="excludeArchived">exclude archived contacts from found ContactIDs.</param>
		/// <param name="filter">Filters the results of the Contacts API call so that only those records that match the filter criteria are included.
		/// <br/>See [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.</param>
		/// <returns>Saved Search description and found contact IDs</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<SavedSearch> GetSavedSearchDetailsAsync(double accountId, int savedSearchId, bool? excludeArchived = null, string? filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (savedSearchId == null)
				throw new System.ArgumentNullException("savedSearchId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/savedsearches/{savedSearchId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/savedsearches/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(savedSearchId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('?');
					if (excludeArchived != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("excludeArchived")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeArchived, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filter != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<SavedSearch>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Download picture
		/// </summary>
		/// <remarks>
		/// Picture available for specific account.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="pictureId">Picture identifier</param>
		/// <param name="fullSize">Full size picture will be returned. If full size picture does not exist, thumbnail will be returned.</param>
		/// <param name="asBase64">Base64 encoded image will be returned.</param>
		/// <returns>Response is common HttpResponseMessage with content set to picture binary data.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<FileResponse> GetPictureContentAsync(double accountId, string pictureId, bool? fullSize = null, bool? asBase64 = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (pictureId == null)
				throw new System.ArgumentNullException("pictureId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/pictures/{pictureId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/pictures/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pictureId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('?');
					if (fullSize != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("fullSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fullSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (asBase64 != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("asBase64")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(asBase64, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206) {
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Upload pictures
		/// </summary>
		/// <remarks>
		/// Picture can be uploaded using multipart/form-data POST request (contains Content-Type header set to 'multipart/form-data'). A multipart/form-data request contains a series of parts, each representing a picture. Each part is expected to contain a "Content-Disposition" header whose value is "form-data". One of its properties (Name, FileName) must be set and have unique value. In case of similar values, only one of those part will be used, others will be dropped. For example, you have uploaded 2 pictures with same Name set to "name". If they have different FileName set, it's ok, but if FileName properties are same as well, only one of those pictures will be saved and available for further processing. Keep this in mind.
		/// <br/>Limitations:
		/// <br/>  - Maximum size for one uploaded picture is 10mb.
		/// <br/>  - Maximum request length is 10mb. It means that you can upload one 10mb picture or 10 pictures 1mb each.
		/// <br/>  - Maximum dimensions for uploaded picture are not set, but each picture will be resized to 110px after uploading.
		/// <br/>  - Supported picture types are: png, jpeg, bmp. Bmp pictures will be converted to png format.
		/// <br/>  - Time period after uploading when picture would be available for use is 30 minutes.
		/// <br/>  - Each uploaded picture can be used only once. After first usage it will be removed permanently.
		/// <br/>  - Mime type must be 'image' and must correlate to picture type. If you upload the 'png' with 'image/bmp' mime type set, this picture will be dropped.
		/// <br/>  - In case of uploading several pictures in one request either 'Name' or 'FileName' property of Content-Disposition header must be set. Otherwise the picture will be dropped.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="picture0">The uploaded picture0 data</param>
		/// <param name="picture1">The uploaded picture1 data</param>
		/// <returns>Response is simple json object which contains picture guids (see example)</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Response> UploadPictureAsync(double accountId, FileParameter picture0 = null, FileParameter picture1 = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var boundary_ = System.Guid.NewGuid().ToString();
					var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
					content_.Headers.Remove("Content-Type");
					content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

					if (picture0 == null)
						throw new System.ArgumentNullException("picture0");
					else {
						var content_picture0_ = new System.Net.Http.StreamContent(picture0.Data);
						if (!string.IsNullOrEmpty(picture0.ContentType))
							content_picture0_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(picture0.ContentType);
						content_.Add(content_picture0_, "picture0", picture0.FileName ?? "picture0");
					}

					if (picture1 == null)
						throw new System.ArgumentNullException("picture1");
					else {
						var content_picture1_ = new System.Net.Http.StreamContent(picture1.Data);
						if (!string.IsNullOrEmpty(picture1.ContentType))
							content_picture1_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(picture1.ContentType);
						content_.Add(content_picture1_, "picture1", picture1.FileName ?? "picture1");
					}
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/pictures"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/pictures");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Download attachment
		/// </summary>
		/// <remarks>
		/// Attachment, available for specific account.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="attachmentId">Attachment identifier</param>
		/// <param name="asBase64">Base64 encoded image will be returned.</param>
		/// <returns>Response is common HttpResponseMessage with content set to attachment binary data.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<FileResponse> GetAttachmentContentAsync(double accountId, string attachmentId, Size? size = null, bool? asBase64 = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (attachmentId == null)
				throw new System.ArgumentNullException("attachmentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/attachments/{attachmentId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/attachments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('?');
					if (size != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (asBase64 != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("asBase64")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(asBase64, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206) {
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get attachments infos
		/// </summary>
		/// <remarks>
		/// Attachment infos, available for specific account.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="attachmentIds">list of comma separated Attachment identifiers</param>
		/// <returns>An array of attachment descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> GetAttachmentInfosAsync(double accountId, string attachmentIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (attachmentIds == null)
				throw new System.ArgumentNullException("attachmentIds");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/attachments/GetInfos"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/attachments/GetInfos");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("attachmentIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(attachmentIds, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FileInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Upload attachments
		/// </summary>
		/// <remarks>
		/// Upload attachments data and get their identifiers to use for contact values.  Attachment not used for any Contact field value will be deleted in 30 minutes.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>An array of attachment descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> UploadAttachmentsAsync(double accountId, System.Collections.Generic.IEnumerable<AttachmentData> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/attachments/Upload"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/attachments/Upload");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FileInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of all membership levels.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">To get only a list of membership level identifiers as a result.</param>
		/// <param name="ids">You can filter by specifying a set of level IDs. E.g. `ids=1,2,3`</param>
		/// <returns>Collection of membership levels.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MembershipLevel>> GetMembershipLevelsListAsync(double accountId, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, string? ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/membershiplevels"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/membershiplevels");
					urlBuilder_.Append('?');
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (ids != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MembershipLevel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific membership level
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="levelId">Unique membership level identifier</param>
		/// <returns>information about specific membership level</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<MembershipLevel> GetMembershipLevelDetailsAsync(double accountId, int levelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (levelId == null)
				throw new System.ArgumentNullException("levelId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/membershiplevels/{levelId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/membershiplevels/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(levelId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<MembershipLevel>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of membership bundles.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="levelId">Provide this parameter to get only bundles related to specific membership level.</param>
		/// <returns>List of bundles matching query parameters.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Bundle>> GetMembershipBundlesListAsync(double accountId, int? levelId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/bundles"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/bundles");
					urlBuilder_.Append('?');
					if (levelId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("levelId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(levelId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Bundle>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get membership bundle details.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="bundleId">Unique bundle identifier</param>
		/// <returns>Bundle description.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Bundle> GetMembershipBundleAsync(double accountId, int bundleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (bundleId == null)
				throw new System.ArgumentNullException("bundleId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/bundles/{bundleId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/bundles/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(bundleId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Bundle>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// List of Ad Hoc member groups.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">To get only a list of member group identifiers as a result.</param>
		/// <param name="ids">You can filter by specifying a set of group IDs. E.g. `ids=1,2,3`</param>
		/// <returns>An array of member group descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MembershipGroupListItem>> GetMembershipGroupsAsync(double accountId, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, string? ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/membergroups"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/membergroups");
					urlBuilder_.Append('?');
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (ids != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MembershipGroupListItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Ad Hoc member group.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="memberGroupId">member group identifier</param>
		/// <param name="includeArchivedMembers">include archived contacts in ContactIds list. Default - true.</param>
		/// <returns>member group description</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<MembershipGroup> GetMembershipGroupDetailsAsync(double accountId, int memberGroupId, bool? includeArchivedMembers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (memberGroupId == null)
				throw new System.ArgumentNullException("memberGroupId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/membergroups/{memberGroupId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/membergroups/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(memberGroupId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append('?');
					if (includeArchivedMembers != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("includeArchivedMembers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeArchivedMembers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<MembershipGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Approve pending membership.
		/// </summary>
		/// <remarks>
		/// Availability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Contact ID to approve membership</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task ApprovePendingMembershipAsync(double accountId, int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/ApprovePendingMembership"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/ApprovePendingMembership");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Reject pending membership.
		/// </summary>
		/// <remarks>
		/// Availability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Contact ID to reject membership</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task RejectPendingMembershipAsync(double accountId, int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/RejectPendingMembership"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/RejectPendingMembership");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Events list
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="async">Controls whether the API call is perform asynchronously. Default value if true.</param>
		/// <param name="resultId">This parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.</param>
		/// <param name="filter">Filters the results of the Events API call so that only those records that match the filter criteria are included.
		/// <br/>The following filter criterias are supported:
		/// <br/>
		/// <br/>  - Id, Supported operations: in.
		/// <br/>  - RegistrationEnabled, Supported operations: eq, ne.
		/// <br/>  - IsUpcoming, Supported operations: eq, ne.
		/// <br/>  - Tags, Supported operations: in.
		/// <br/>  - StartDate, Supported operations: eq, ne, gt, ge, lt, le.
		/// <br/>  - EndDate, Supported operations: eq, ne, gt, ge, lt, le.
		/// <br/>  - Name, Supported operations: eq, ne, substringof.
		/// <br/>  - TextIndex, Supported operations: substringof.</param>
		/// <param name="sort">This parameter can be used to sort list of IDs or list of events. Possible values are
		/// <br/>
		/// <br/>  - ByStartDate asc - sort events by their Start date. Ascending order.
		/// <br/>  - ByStartDate desc - sort events by their Start date. Descending order.
		/// <br/>  - ByStartSession asc - sort events by start of their sessions (if exists). All past events ignored
		/// <br/>
		/// <br/>  Example: $sort=ByStartDate asc</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">When idsOnly specified, the API returns only a list of identifiers matching criteria.</param>
		/// <returns>A wrapper object, which contains a list of events, event identifiers or events count.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EventsResponse> GetEventsListAsync(double accountId, bool? async = null, string? resultId = null, string? filter = null, string? sort = null, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/events"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/events");
					urlBuilder_.Append('?');
					if (async != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$async")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(async, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (resultId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("resultId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resultId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filter != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (sort != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Create a new event record
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="body">Event description</param>
		/// <returns>Returns created event record id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<double> CreateEventAsync(double accountId, EventEditParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/events"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/events");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<double>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific event
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">Unique event identifier</param>
		/// <returns>information about specific event</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Event> GetEventDetailsAsync(double accountId, int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/events/{eventId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/events/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Event>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update information about existing event
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">Unique event identifier</param>
		/// <returns>Updated version of event information.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<bool> UpdateEventAsync(double accountId, int eventId, EventEditParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/events/{eventId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/events/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Completely delete event from system.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">Unique event identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteEventAsync(double accountId, int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/events/{eventId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/events/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Clone existed event.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created event id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> CloneEventAsync(double accountId, CloneEvent body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/CloneEvent"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/CloneEvent");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Event registration types list
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">event identifier</param>
		/// <returns>List of event registration types</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRegistrationType>> GetEventRegistrationTypesListAsync(double accountId, int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EventRegistrationTypes"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EventRegistrationTypes");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("eventId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventRegistrationType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new event registration type.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Created event registration type ID</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> CreateEventRegistrationTypeAsync(double accountId, EventRegistrationTypeEditParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EventRegistrationTypes"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EventRegistrationTypes");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Event registration type details
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="typeId">Unique event registration type identifier</param>
		/// <returns>Information about specific event registration type</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EventRegistrationType> GetEventRegistrationTypeDetailsAsync(double accountId, double typeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (typeId == null)
				throw new System.ArgumentNullException("typeId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EventRegistrationTypes/{typeId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EventRegistrationTypes/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistrationType>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update information about existing event registration type
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="typeId">Unique event registration type identifier</param>
		/// <returns>No information returned on successful update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UpdateEventRegistrationTypeAsync(double accountId, double typeId, EventRegistrationTypeEditParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (typeId == null)
				throw new System.ArgumentNullException("typeId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EventRegistrationTypes/{typeId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EventRegistrationTypes/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Completely delete event registration type from the system.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="typeId">Unique event registration type identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteEventRegistrationTypeAsync(double accountId, int typeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (typeId == null)
				throw new System.ArgumentNullException("typeId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EventRegistrationTypes/{typeId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EventRegistrationTypes/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Event Registrations list
		/// </summary>
		/// <remarks>
		/// ⚠ There are 3 parameters, which can be used simultaneously. Pagination is not applied if $filter or ids set.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">contact identifier</param>
		/// <param name="eventId">event identifier</param>
		/// <param name="filter">Filters the results of the Events API call so that only those records that match the filter criteria are included. The following filter criterias are supported:
		/// <br/>  - Id, Supported operations: in.
		/// <br/>    example: ?$filter=id in [1,2,3,4….]</param>
		/// <param name="includeDetails">If false, registration form data is not retrieved</param>
		/// <param name="includeWaitlist">Defines if waitlist records should be included in result</param>
		/// <param name="count">Specifies that result should contain only a total number of records matching criteria.</param>
		/// <param name="idsOnly">When idsOnly specified, the API returns only a list of identifiers matching criteria.</param>
		/// <returns>List of event registrations</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRegistration>> GetEventRegistrationsListAsync(double accountId, int? contactId = null, int? eventId = null, string? filter = null, bool? includeDetails = null, bool? includeWaitlist = null, bool? count = null, bool? idsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/eventregistrations"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/eventregistrations");
					urlBuilder_.Append('?');
					if (contactId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (eventId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("eventId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filter != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (includeDetails != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("includeDetails")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeDetails, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (includeWaitlist != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("includeWaitlist")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeWaitlist, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventRegistration>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new event registration.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Event registration created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EventRegistration> CreateEventRegistrationAsync(double accountId, EventRegistrationPost body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/eventregistrations"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/eventregistrations");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Event Registration Details
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="event_registration_id">event registration identifier</param>
		/// <returns>List of Event Registrations</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EventRegistration> GetEventRegistrationDetailsAsync(double accountId, double event_registration_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (event_registration_id == null)
				throw new System.ArgumentNullException("event_registration_id");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/eventregistrations/{event_registration_id}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/eventregistrations/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_registration_id, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update event registration.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="event_registration_id">event registration identifier</param>
		/// <returns>Event registration created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EventRegistration> UpdateEventRegistrationAsync(double accountId, double event_registration_id, EventRegistrationPut body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (event_registration_id == null)
				throw new System.ArgumentNullException("event_registration_id");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/eventregistrations/{event_registration_id}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/eventregistrations/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_registration_id, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Event registration
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="event_registration_id">event registration identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteEventRegistrationAsync(double accountId, double event_registration_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (event_registration_id == null)
				throw new System.ArgumentNullException("event_registration_id");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/eventregistrations/{event_registration_id}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/eventregistrations/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_registration_id, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Mark event attendee as checked-in (or remove check-in flag).
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task CheckInEventAttendeeAsync(double accountId, CheckInParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/CheckInEventAttendee"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/CheckInEventAttendee");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Add waitlisted person as event attendee
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Event registration created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EventRegistration> RegisterFromWaitlistAsync(double accountId, RegisterFromWaitlistParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/RegisterFromWaitlist"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/RegisterFromWaitlist");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of invoices by criteria.
		/// </summary>
		/// <remarks>
		/// ⚠ There are 3 parameters, which cannot be used simultaneously. API uses only one parameter of contactId, eventId and eventRegistrationId exactly in this order. For example if request contains both contactId and eventId, then API uses only contactId to filter invoices.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Identifier of contact to whom the invoice is assigned.</param>
		/// <param name="eventId">Identifier of event. When specified API returns collection of invoices associated with event registrations for the event.</param>
		/// <param name="eventRegistrationId">Identifier of event registration. When specified API returns invoice related to the registration. Usually a single invoice.</param>
		/// <param name="unpaidOnly">When set to true, API returns only unpaid invoices.</param>
		/// <param name="paidOnly">When set to true, API returns only paid invoices.</param>
		/// <param name="includeVoided">When set to true, API also returns voided invoices.</param>
		/// <param name="idsOnly">When set to true, API returns only collection of identifiers instead of collection of invoices.</param>
		/// <param name="startDate">Limits result to invoices created since StartDate.</param>
		/// <param name="endDate">Limits result to invoices created before EndDate.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <returns>Collection of invoices that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<InvoicesResponse> GetInvoicesListAsync(double accountId, int? contactId = null, int? eventId = null, int? eventRegistrationId = null, bool? unpaidOnly = null, bool? paidOnly = null, bool? includeVoided = null, bool? idsOnly = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/invoices"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/invoices");
					urlBuilder_.Append('?');
					if (contactId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (eventId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("eventId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (eventRegistrationId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("eventRegistrationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventRegistrationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (unpaidOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("unpaidOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(unpaidOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (paidOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("paidOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paidOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (includeVoided != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("includeVoided")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeVoided, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (startDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("StartDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (endDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("EndDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<InvoicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new invoice.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Created invoice ID</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> CreateInvoiceAsync(double accountId, CreateInvoiceParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/invoices"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/invoices");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific invoice
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="invoiceId">Unique invoice identifier</param>
		/// <returns>information about specific invoice</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Invoice> GetInvoiceDetailsAsync(double accountId, int invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/invoices/{invoiceId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/invoices/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update existing invoice information
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UpdateInvoiceAsync(double accountId, int invoiceId, UpdateInvoiceParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/invoices/{invoiceId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/invoices/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Delete existing invoice
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful invoice deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteInvoiceAsync(double accountId, int invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/invoices/{invoiceId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/invoices/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Generate or update invoice for pending membership.
		/// </summary>
		/// <remarks>
		/// Availability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Contact ID with pending membership</param>
		/// <param name="updateIfExists">update the invoice items if already exists</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task GenerateInvoiceForPendingMembershipAsync(double accountId, int contactId, bool? updateIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/GenerateInvoiceForPendingMembership"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/GenerateInvoiceForPendingMembership");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					if (updateIfExists != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("updateIfExists")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updateIfExists, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Generate or update invoice for existing event registration.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventRegistrationId">Event registration ID with pending membership</param>
		/// <param name="updateIfExists">If set to true and invoice already exists, API will update the invoice items.</param>
		/// <returns>created or updated invoice</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Invoice> GenerateInvoiceForEventRegistrationAsync(double accountId, int eventRegistrationId, bool? updateIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventRegistrationId == null)
				throw new System.ArgumentNullException("eventRegistrationId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/GenerateInvoiceForEventRegistration"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/GenerateInvoiceForEventRegistration");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("eventRegistrationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventRegistrationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					if (updateIfExists != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("updateIfExists")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updateIfExists, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Void active invoice.
		/// </summary>
		/// <remarks>
		/// See https://gethelp.wildapricot.com/en/articles/76#voiding for details on invoice voiding
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="invoiceId">invoiceId ID to void</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task VoidInvoiceAsync(double accountId, int invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/VoidInvoice"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/VoidInvoice");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("invoiceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of payments by criteria.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Identifier of contact who made the payment.</param>
		/// <param name="eventId">Identifier of event. When specified API returns collection of payments settled to invoices associated with event registrations for the event.</param>
		/// <param name="idsOnly">When set to true, API returns only collection of identifiers instead of collection of payments.</param>
		/// <param name="startDate">Limits result to payments created since StartDate.</param>
		/// <param name="endDate">Limits result to payments created before EndDate.</param>
		/// <param name="paimentType">Limits result to payment type.</param>
		/// <param name="unsettledOnly">When set to true, API returns only unsettled payments.</param>
		/// <param name="ids">You can filter the payments by specifying a set of payment IDs.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <returns>Collection of payments that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<PaymentsResponse> GetPaymentsListAsync(double accountId, int? contactId = null, int? eventId = null, bool? idsOnly = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, string? paimentType = null, bool? unsettledOnly = null, string? ids = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments");
					urlBuilder_.Append('?');
					if (contactId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (eventId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("eventId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (startDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("StartDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (endDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("EndDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (paimentType != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("paimentType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paimentType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (unsettledOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("unsettledOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(unsettledOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (ids != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<PaymentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new payment.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Payment created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Payment> CreatePaymentAsync(double accountId, CreatePaymentModel body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Payment>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific payment
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>information about specific payment</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Payment> GetPaymentDetailsAsync(double accountId, int paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{paymentId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Payment>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update existing payment information
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UpdatePaymentAsync(double accountId, int paymentId, UpdatePaymentParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{paymentId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Delete existing payment
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful payment deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeletePaymentAsync(double accountId, int paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{paymentId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Allocate invoice to specific payment
		/// </summary>
		/// <remarks>
		/// After this operation invoice will be marked as paid.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task AllocateInvoiceAsync(double accountId, int paymentId, AllocateInvoiceParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{paymentId}/AllocateInvoice"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/AllocateInvoice");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Allocate refund to specific payment
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task AllocateRefundToPaymentAsync(double accountId, int paymentId, RefundParam body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{paymentId}/AllocateRefundToPayment"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/AllocateRefundToPayment");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Allocate refund to specific donation
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationId">Unique donation identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task AllocateRefundToDonationAsync(double accountId, int donationId, RefundParam body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{donationId}/AllocateRefundToDonation"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/AllocateRefundToDonation");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Unallocate finance document from specific payment
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UnallocateFinanceDocumentFromPaymentAsync(double accountId, int paymentId, DocumentParam body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{paymentId}/UnallocateFromPayment"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/UnallocateFromPayment");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Unallocate finance document from specific donation
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationId">Unique donation identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UnallocateFinanceDocumentFromDonationAsync(double accountId, int donationId, DocumentParam body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/payments/{donationId}/UnallocateFromDonation"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/payments/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/UnallocateFromDonation");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list describing how payments are allocated among invoices.
		/// </summary>
		/// <remarks>
		/// At least one parameter InvoiceId or PaymentId or RefundId should be specified.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="invoiceId">Identifier of invoice.</param>
		/// <param name="paymentId">Identifier of payment.</param>
		/// <param name="refundId">Identifier of refund.</param>
		/// <returns>Collection of allocations.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentAllocation>> GetPaymentAllocationsListAsync(double accountId, int? invoiceId = null, int? paymentId = null, int? refundId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/paymentAllocations"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/paymentAllocations");
					urlBuilder_.Append('?');
					if (invoiceId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("InvoiceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (paymentId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("PaymentId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (refundId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("RefundId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync< System.Collections.Generic.ICollection<PaymentAllocation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of refunds by criteria.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Identifier of contact to whom the refund was made.</param>
		/// <param name="eventId">Identifier of event. When specified API returns collection of refunds settled to invoices associated with event registrations for the event.</param>
		/// <param name="idsOnly">When set to true, API returns only collection of identifiers instead of collection of refunds.</param>
		/// <param name="startDate">Limits result to refunds created since StartDate.</param>
		/// <param name="endDate">Limits result to refunds created before EndDate.</param>
		/// <param name="unsettledOnly">When set to true, API returns only unsettled refunds.</param>
		/// <param name="ids">You can filter the refunds by specifying a set of refund IDs.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <returns>Collection of refunds that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<RefundsResponse> GetRefundsListAsync(double accountId, int? contactId = null, int? eventId = null, bool? idsOnly = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, bool? unsettledOnly = null, string? ids = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/refunds"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/refunds");
					urlBuilder_.Append('?');
					if (contactId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (eventId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("eventId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (startDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("StartDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (endDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("EndDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (unsettledOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("unsettledOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(unsettledOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (ids != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<RefundsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new refund.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Refund created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Refund> CreateRefundAsync(double accountId, CreateRefundParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/refunds"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/refunds");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Refund>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific refund
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="refundId">Unique refund identifier</param>
		/// <returns>information about specific refund</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Refund> GetRefundDetailsAsync(double accountId, int refundId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refundId == null)
				throw new System.ArgumentNullException("refundId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/refunds/{refundId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/refunds/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Refund>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update existing refund information
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UpdateRefundAsync(double accountId, int refundId, UpdateRefundParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refundId == null)
				throw new System.ArgumentNullException("refundId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/refunds/{refundId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/refunds/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Delete existing refund
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful refund deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteRefundAsync(double accountId, int refundId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refundId == null)
				throw new System.ArgumentNullException("refundId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/refunds/{refundId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/refunds/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of tenders.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Collection of tenders.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Tender>> GetTendersListAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/tenders"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/tenders");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Tender>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new tender.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Tenderscreated</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Tender> CreateTenderAsync(double accountId, Tender body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/tenders"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/tenders");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Tender>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific tender
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="tenderId">Unique tender identifier</param>
		/// <returns>information about specific tender</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Tender> GetTenderDetailsAsync(double accountId, int tenderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tenderId == null)
				throw new System.ArgumentNullException("tenderId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/tenders/{tenderId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/tenders/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenderId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Tender>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update existing tender information
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UpdateTenderAsync(double accountId, int tenderId, Tender body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tenderId == null)
				throw new System.ArgumentNullException("tenderId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/tenders/{tenderId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/tenders/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenderId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Delete existing tender
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful tender deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteTenderAsync(double accountId, int tenderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tenderId == null)
				throw new System.ArgumentNullException("tenderId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/tenders/{tenderId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/tenders/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenderId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// List of Audit log items.
		/// </summary>
		/// <remarks>
		/// List filter has limitations.
		/// <br/> - if filterObjectType is set then FilterObjectId must be set too.
		/// <br/> - empty filter not allowed (none of filterObjectType, FilterObjectId, StartDate and EndDate are set).
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="filterObjectType">Kind of object for audit log filter</param>
		/// <param name="filterObjectId">Unique identifyer of type filterObjectType</param>
		/// <param name="startDate">Limits result to log items created since StartDate.</param>
		/// <param name="endDate">Limits result to log items created before EndDate.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <returns>An array of audit log item descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<AuditItemsListResult> GetAuditLogItemsAsync(double accountId, FilterObjectType? filterObjectType = null, int? filterObjectId = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, int? skip = null, int? top = null, bool? count = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/auditLogItems"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/auditLogItems");
					urlBuilder_.Append('?');
					if (filterObjectType != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("filterObjectType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterObjectType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filterObjectId != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("FilterObjectId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterObjectId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (startDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("StartDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (endDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("EndDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<AuditItemsListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Single audit log item.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="itemId">Audit log item identifier</param>
		/// <returns>Audit log item description</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<AuditLogItem> GetAuditLogItemAsync(double accountId, int itemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (itemId == null)
				throw new System.ArgumentNullException("itemId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/auditLogItems/{itemId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/auditLogItems/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<AuditLogItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// List of custom fields related to donations.
		/// </summary>
		/// <remarks>
		/// This list contains a list of fields of 2 different types.
		/// <br/> - System fields are defined by Wild Apricot system and could not be removed.
		/// <br/> - Custom fields could be defined by administrator to store some data specific to your account.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="showSectionDividers">Default value is false. Specifies whether section dividers also should be presented in the response.</param>
		/// <returns>An array of donation field descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntityFieldDescription>> DonationfieldsAllAsync(double accountId, bool? showSectionDividers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donationfields"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donationfields");
					urlBuilder_.Append('?');
					if (showSectionDividers != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("showSectionDividers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showSectionDividers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntityFieldDescription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates a new donation field
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created field identifier</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> DonationfieldsPOSTAsync(double accountId, CreateEntityFieldParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donationfields"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donationfields");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Updates an existing donation field
		/// </summary>
		/// <remarks>
		/// Limitations: field type can not be changed
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationFieldId">donation field identifier</param>
		/// <returns>return true if field was updated successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<bool> DonationfieldsPUTAsync(double accountId, int donationFieldId, EditEntityFieldParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationFieldId == null)
				throw new System.ArgumentNullException("donationFieldId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donationfields/{donationFieldId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donationfields/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(donationFieldId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// removes existing field by id
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationFieldId">donation field identifier</param>
		/// <returns>return true if field was removed successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<bool> DonationfieldsDELETEAsync(double accountId, int donationFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationFieldId == null)
				throw new System.ArgumentNullException("donationFieldId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donationfields/{donationFieldId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donationfields/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(donationFieldId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get list of donations by criteria.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="startDate">Limits result to donations created since StartDate.</param>
		/// <param name="endDate">Limits result to donations created before EndDate.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">Should be set to true in order to get only a list of donation identifiers as a result of search request.</param>
		/// <returns>Collection of donations that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<DonationListResponse> GetDonationsListAsync(double accountId, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donations"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donations");
					urlBuilder_.Append('?');
					if (startDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("StartDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (endDate != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("EndDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<DonationListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Retrieve information about specific donation
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationId">Unique donation identifier</param>
		/// <returns>information about specific donation</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Donation> GetDonationDetailsAsync(double accountId, int donationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donations/{donationId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donations/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Donation>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Update existing donation information
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task UpdateDonationAsync(double accountId, int donationId, Donation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/donations/{donationId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/donations/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Sent emails
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">To get only a list of email identifiers as a result of search request.</param>
		/// <param name="filter">Allowed filter fields (**allowed operations**):
		/// <br/>  - *SentDate* (**ge**, **le**),
		/// <br/>  - *SenderId* (**eq**) - ID of sender,
		/// <br/>  - *OriginType* (**eq**) - see SentEmail.Origin.OriginType,
		/// <br/>  - *SendingType* (**eq**) -SentEmail.SendingType (Automatic or Manual)
		/// <br/>
		/// <br/>  only AND boolean operator supported
		/// <br/>  - ...&amp;$filter=SentDate ge 2018-05-01 - will return records sent on or after May 1st, 2018</param>
		/// <returns>Contains a list of sent emails or list of identifiers, depending on idsOnly parameter value.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EmailLog> GetSentEmailsLogAsync(double accountId, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, string? filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/SentEmails"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/SentEmails");
					urlBuilder_.Append('?');
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filter != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Sent email details
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="emailId">Email unique Id</param>
		/// <returns>Email details</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EmailLogRecord> GetSentEmailDetailsAsync(double accountId, int emailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailId == null)
				throw new System.ArgumentNullException("emailId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/SentEmails/{emailId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/SentEmails/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(emailId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailLogRecord>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Email drafts
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">Should be set to true in order to get only a list of email identifiers as a result of search request.</param>
		/// <param name="filter">Allowed filter fields (**allowed operations**):
		/// <br/>  - *LastChangedDate* (**ge**, **le**),
		/// <br/>  - *CreatorId* (**eq**),
		/// <br/>  - *IsScheduled* (**eq**),
		/// <br/>  - *EventId* (**eq**)
		/// <br/>
		/// <br/>  only AND boolean operator supported
		/// <br/>  - ...&amp;$filter=LastChangedDate ge 2018-05-01 - will return records updated on or after May 1st, 2018
		/// <br/>  - ...&amp;$filter=LastChangedDate ge 2010-05-01 AND CreatorId eq 123456 - will return records updated on or after May 1st, 2010 and create by a user with Contact ID 123456      
		/// <br/>  - ...&amp;$filter=IsScheduled eq true - will return scheduled drafts only</param>
		/// <returns>A wrapper object, which contains a list of sent emails. also contains EmailDraftIdentifiersResult if idsOnly parameter is true</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EmailDraftListResult> GetEmailDraftsListAsync(double accountId, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, string? filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EmailDrafts"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EmailDrafts");
					urlBuilder_.Append('?');
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (filter != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailDraftListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Email draft details
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="draftId">Email draft Id</param>
		/// <returns>Email draft</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EmailDraft> GetEmailDraftAsync(double accountId, int draftId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (draftId == null)
				throw new System.ArgumentNullException("draftId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EmailDrafts/{draftId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EmailDrafts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailDraft>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Delete email draft
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="draftId">Email draft Id</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteEmailDraftAsync(double accountId, int draftId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (draftId == null)
				throw new System.ArgumentNullException("draftId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/EmailDrafts/{draftId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/EmailDrafts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <remarks>
		/// Sent email recipients
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="emailId">sent email Id (from email Log)</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// <br/>- ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">Should be set to true in order to get only a list of contact/recipient identifiers as a result of search request.</param>
		/// <param name="loadLinks">load clicked links information</param>
		/// <param name="delivered">load delivered or not delivered only</param>
		/// <param name="opened">load opened or not opened only</param>
		/// <returns>Contains a list of sent email recipients.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<SentEmailRecipientsRecords> SentEmailRecipientListAsync(double accountId, int emailId, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, bool? loadLinks = null, bool? delivered = null, bool? opened = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailId == null)
				throw new System.ArgumentNullException("emailId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/SentEmailRecipients"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/SentEmailRecipients");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("emailId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(emailId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					if (skip != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (top != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (count != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (idsOnly != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (loadLinks != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("LoadLinks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(loadLinks, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (delivered != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("Delivered")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(delivered, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (opened != null) {
						urlBuilder_.Append(System.Uri.EscapeDataString("Opened")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opened, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<SentEmailRecipientsRecords>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Pause or resume scheduled draft.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task SetEmailDraftScheduleAsync(double accountId, EmailScheduleParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/SetEmailDraftSchedule"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/SetEmailDraftSchedule");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get preview version of email.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>email preview subject and body</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<EmailDraftPreview> GetEmailDraftPreviewAsync(double accountId, SendDraftParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/GetEmailDraftPreview"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/GetEmailDraftPreview");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailDraftPreview>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Send draft.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created sent email id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> SendEmailDraftAsync(double accountId, SendDraftParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/SendEmailDraft"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/SendEmailDraft");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Send draft.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created sent email id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> SendEmailAsync(double accountId, SendEmailParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/SendEmail"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/SendEmail");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get count of real email recipients (unique addresses).
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> GetUniqueEmailRecipientsCountAsync(double accountId, EmailRecipientsParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/CountUniqueAddressesForEmailRecipients"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/CountUniqueAddressesForEmailRecipients");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get count of real email recipients (unique addresses).
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<int> GetUniqueEmailRecipientsCountForDraftAsync(double accountId, int body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/CountUniqueAddressesForEmailDraft"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/CountUniqueAddressesForEmailDraft");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get unique addresses of real email recipients.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<FileResponse> GetUniqueAddressesForEmailRecipientsAsync(double accountId, EmailRecipientsParams body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/GetUniqueAddressesForEmailRecipients"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/GetUniqueAddressesForEmailRecipients");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206) {
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get unique addresses of real email recipients.
		/// </summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<FileResponse> GetUniqueAddressesForEmailDraftAsync(double accountId, int body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "rpc/{accountId}/email/GetUniqueAddressesForEmailDraft"
					urlBuilder_.Append("rpc/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/email/GetUniqueAddressesForEmailDraft");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206) {
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Get information about feature availability for specific account.
		/// </summary>
		/// <remarks>
		/// There is no way to get full list of features, so api client should know feature identifier. For any invalid featureId API will return {"Allowed":true}.
		/// <br/>This method is reserved **_for internal use only_** and not expected to be used by third party client applications.
		/// </remarks>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="featureId">feature identifier</param>
		/// <returns>Feature availability status.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Feature> GetFeatureAvailabilityAsync(double accountId, int featureId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (featureId == null)
				throw new System.ArgumentNullException("featureId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "accounts/{accountId}/features/{featureId}"
					urlBuilder_.Append("accounts/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/features/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Feature>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null) {
				return new ObjectResponseResult<T>(default(T)!, string.Empty);
			}

			if (ReadResponseAsString) {
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try {
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody!, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception) {
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new WildApricotException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else {
				try {
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader)) {
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody!, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception) {
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new WildApricotException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null) {
				return "";
			}

			if (value is System.Enum) {
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null) {
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null) {
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null) {
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool) {
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[]) {
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[]) {
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray) {
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++) {
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	/// <summary>
	/// Information about Wild Apricot account
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Account
	{
		[Newtonsoft.Json.JsonConstructor]

		public Account(BillingPlan? @billingPlan, ContactLimitInfo @contactLimitInfo, Currency @currency, int @id, bool? @isFreeAccount, Localization @localization, string @name, PaymentSettings? @paymentSettings, string @primaryDomainName, System.Collections.Generic.ICollection<Resource>? @resources, SquareRegisterSettings @squareRegisterSettings, TimeZone? @timeZone, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Name = @name;

			this.Url = @url;

			this.PrimaryDomainName = @primaryDomainName;

			this.IsFreeAccount = @isFreeAccount;

			this.Resources = @resources;

			this.ContactLimitInfo = @contactLimitInfo;

			this.TimeZone = @timeZone;

			this.Currency = @currency;

			this.Localization = @localization;

			this.SquareRegisterSettings = @squareRegisterSettings;

			this.PaymentSettings = @paymentSettings;

			this.BillingPlan = @billingPlan;

		}    /// <summary>
			 /// Account unique identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		/// <summary>
		/// The account name. This corresponds to the organization name as it appears on the Organization details screen.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// The primary domain name for the account.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PrimaryDomainName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string PrimaryDomainName { get; }

		[Newtonsoft.Json.JsonProperty("IsFreeAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsFreeAccount { get; }

		/// <summary>
		/// Collection of account-related resources.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Resources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Resource>? Resources { get; }

		[Newtonsoft.Json.JsonProperty("ContactLimitInfo", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public ContactLimitInfo ContactLimitInfo { get; }

		[Newtonsoft.Json.JsonProperty("TimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public TimeZone? TimeZone { get; }

		[Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Currency Currency { get; }

		[Newtonsoft.Json.JsonProperty("Localization", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Localization Localization { get; }

		[Newtonsoft.Json.JsonProperty("SquareRegisterSettings", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public SquareRegisterSettings SquareRegisterSettings { get; }

		[Newtonsoft.Json.JsonProperty("PaymentSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public PaymentSettings? PaymentSettings { get; }

		[Newtonsoft.Json.JsonProperty("BillingPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public BillingPlan? BillingPlan { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Current account billing plan.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class BillingPlan
	{
		[Newtonsoft.Json.JsonConstructor]

		public BillingPlan(string? @name, double? @price)

		{

			this.Name = @name;

			this.Price = @price;

		}    /// <summary>
			 /// Billing plan name
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Monthly price
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Price { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Details about limits on the number of contacts.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactLimitInfo
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactLimitInfo(int? @billingPlanContactsLimit, int? @currentContactsCount)

		{

			this.CurrentContactsCount = @currentContactsCount;

			this.BillingPlanContactsLimit = @billingPlanContactsLimit;

		}    /// <summary>
			 /// Number of contacts currently in database (archived excluded)
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("CurrentContactsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CurrentContactsCount { get; }

		/// <summary>
		/// Maximum number of contacts allowed by billing plan.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("BillingPlanContactsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BillingPlanContactsLimit { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Currency
	{
		[Newtonsoft.Json.JsonConstructor]

		public Currency(string? @code, string? @name, string? @symbol)

		{

			this.Code = @code;

			this.Name = @name;

			this.Symbol = @symbol;

		}    /// <summary>
			 /// Currency code according to ISO4217
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Code { get; }

		/// <summary>
		/// Human-readable currency name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Currency symbol like $ or €
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Symbol { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Information about specific feature availability
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Feature
	{
		[Newtonsoft.Json.JsonConstructor]

		public Feature(bool? @allowed, string? @id)

		{

			this.Id = @id;

			this.Allowed = @allowed;

		}    /// <summary>
			 /// Feature identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Id { get; }

		/// <summary>
		/// Indicates whether the feature is allowed
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Allowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? Allowed { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Localization
	{
		[Newtonsoft.Json.JsonConstructor]

		public Localization(string? @dateFormat, string? @timeFormat)

		{

			this.DateFormat = @dateFormat;

			this.TimeFormat = @timeFormat;

		}    /// <summary>
			 /// Date format like "d MMM yyyy"
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DateFormat { get; }

		/// <summary>
		/// Time format like "h:mm tt"
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? TimeFormat { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PaymentSettings
	{
		[Newtonsoft.Json.JsonConstructor]

		public PaymentSettings(string? @eventPaymentInstructions, string? @generalPaymentInstructions, string? @membershipPaymentInstructions)

		{

			this.GeneralPaymentInstructions = @generalPaymentInstructions;

			this.EventPaymentInstructions = @eventPaymentInstructions;

			this.MembershipPaymentInstructions = @membershipPaymentInstructions;

		}    /// <summary>
			 /// General payment instructions (shown on the Invoices &amp; Payments page and Manual invoices)
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("GeneralPaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? GeneralPaymentInstructions { get; }

		/// <summary>
		/// For event registrations (can be changed for each event)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventPaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EventPaymentInstructions { get; }

		/// <summary>
		/// For membership applications, renewals and level changes
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MembershipPaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? MembershipPaymentInstructions { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Settings for Square Register integration, used for mobile app
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SquareRegisterSettings
	{
		[Newtonsoft.Json.JsonConstructor]

		public SquareRegisterSettings(string? @clientId, bool @integrationEnabled)

		{

			this.IntegrationEnabled = @integrationEnabled;

			this.ClientId = @clientId;

		}    /// <summary>
			 /// Is integration enabled in admin UI.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("IntegrationEnabled", Required = Newtonsoft.Json.Required.Always)]
		public bool IntegrationEnabled { get; }

		/// <summary>
		/// (optional) Square client Id
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ClientId { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Details about account time zone
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class TimeZone
	{
		[Newtonsoft.Json.JsonConstructor]

		public TimeZone(string? @name, int? @utcOffset, string? @zoneId)

		{

			this.ZoneId = @zoneId;

			this.Name = @name;

			this.UtcOffset = @utcOffset;

		}    /// <summary>
			 /// Time zone id, i.e. "Arabic Standard Time"
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ZoneId { get; }

		/// <summary>
		/// Time zone name, i.e. "(UTC+03:00) Baghdad"
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Offcet from UTC Time in minutes, i.e. "180"
		/// </summary>
		[Newtonsoft.Json.JsonProperty("UtcOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? UtcOffset { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateEntityFieldParams : EntityFieldDescription
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreateEntityFieldParams(System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, string @description, string? @displayType, string? @fieldInstructions, string @fieldName, CustomFieldType @fieldType, bool? @isSystem, int? @order, RulesAndTermsInfo? @rulesAndTermsInfo, string? @systemCode)

			: base(allowedValues, description, displayType, fieldInstructions, fieldName, isSystem, order, rulesAndTermsInfo, systemCode)

		{

			this.FieldType = @fieldType;

		}
		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CustomFieldType FieldType { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EditEntityFieldParams : EntityFieldDescription
	{
		[Newtonsoft.Json.JsonConstructor]

		public EditEntityFieldParams(System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, string @description, string? @displayType, string? @fieldInstructions, string @fieldName, CustomFieldType @fieldType, bool? @isSystem, int? @order, RulesAndTermsInfo? @rulesAndTermsInfo, string? @systemCode)

			: base(allowedValues, description, displayType, fieldInstructions, fieldName, isSystem, order, rulesAndTermsInfo, systemCode)

		{

			this.FieldType = @fieldType;

		}
		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CustomFieldType FieldType { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EntityFieldDescription
	{
		[Newtonsoft.Json.JsonConstructor]

		public EntityFieldDescription(System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, string @description, string? @displayType, string? @fieldInstructions, string @fieldName, bool? @isSystem, int? @order, RulesAndTermsInfo? @rulesAndTermsInfo, string? @systemCode)

		{

			this.FieldName = @fieldName;

			this.SystemCode = @systemCode;

			this.DisplayType = @displayType;

			this.IsSystem = @isSystem;

			this.Description = @description;

			this.FieldInstructions = @fieldInstructions;

			this.AllowedValues = @allowedValues;

			this.Order = @order;

			this.RulesAndTermsInfo = @rulesAndTermsInfo;

		}    /// <summary>
			 /// Field name title, could be displayed in user interface. Field name could be changed by account administrator.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string FieldName { get; }

		/// <summary>
		/// System-defined code associated with field. It does not change even if FieldName is edited in admin backend.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SystemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? SystemCode { get; }

		/// <summary>
		/// Optional hint, which tells how to display and edit field. It appears for String and Choice fields.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DisplayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DisplayType { get; }

		/// <summary>
		/// Field is system-defined and could not be deleted. However, field name could be changed by account administrator.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsSystem { get; }

		/// <summary>
		/// System-defined description of the field. Empty for custom fields.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Description { get; }

		/// <summary>
		/// Admin-defined comment for the field. Shown as a tip when members or visitors fill in forms.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FieldInstructions { get; }

		/// <summary>
		/// If field value is limited to set of predefined values, this contains list of allowed values. Normally, AllowedValues appear for MultipleChoice and Choice fields.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OptionsListItem>? AllowedValues { get; }

		/// <summary>
		/// Sorting order to display the field in UI
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Order { get; }

		[Newtonsoft.Json.JsonProperty("RulesAndTermsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RulesAndTermsInfo? RulesAndTermsInfo { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EntityFieldDescriptionWithExtraCharge : EditEntityFieldParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EntityFieldDescriptionWithExtraCharge(System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, string @description, string? @displayType, ExtraCharge? @extraCharge, string? @fieldInstructions, string @fieldName, CustomFieldType @fieldType, bool? @isSystem, int? @order, RulesAndTermsInfo? @rulesAndTermsInfo, string? @systemCode)

			: base(allowedValues, description, displayType, fieldInstructions, fieldName, fieldType, isSystem, order, rulesAndTermsInfo, systemCode)

		{

			this.ExtraCharge = @extraCharge;

		}
		[Newtonsoft.Json.JsonProperty("ExtraCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExtraCharge? ExtraCharge { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Error
	{
		[Newtonsoft.Json.JsonConstructor]

		public Error(string @code, object? @details, string @message)

		{

			this.Code = @code;

			this.Message = @message;

			this.Details = @details;

		}    /// <summary>
			 /// Error code, like Validation / Search / ...
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Code { get; }

		/// <summary>
		/// An explanation of why this error occured
		/// </summary>
		[Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Message { get; }

		/// <summary>
		/// More information about the error. Data structure is specific for each
		/// <br/>kind of error.
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Details { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FieldValue
	{
		[Newtonsoft.Json.JsonConstructor]

		public FieldValue(string? @fieldName, string? @systemCode, object? @value)

		{

			this.FieldName = @fieldName;

			this.SystemCode = @systemCode;

			this.Value = @value;

		}    /// <summary>
			 /// Field title. Custom field names are defined by account adinistrator. System field names are predefined by Wild Apricot system.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FieldName { get; }

		/// <summary>
		/// The system code is a unique field identifier that can be used instead of the field name to identify the field. While field name could be changed by administrators, system codes are defined by the system and cannot be changed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SystemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? SystemCode { get; }

		/// <summary>
		/// Field value could be an integer / string / date in ISO8601 format / boolean / an object consisting of Id and Label or array of such objects. The content format depends on custom field description.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Value { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public LinkedResource(int? @id, string? @url)

		{

			this.Id = @id;

			this.Url = @url;

		}    /// <summary>
			 /// unique item identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// API url to get item details
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Url { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class LinkedResourceWithName : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public LinkedResourceWithName(int? @id, string? @name, string? @url)

			: base(id, url)

		{

			this.Name = @name;

		}    /// <summary>
			 /// Resource name
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Resource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Resource(System.Collections.Generic.ICollection<string> @allowedOperations, string? @description, string @name, ResourceUrl @url)

		{

			this.Url = @url;

			this.Name = @name;

			this.Description = @description;

			this.AllowedOperations = @allowedOperations;

		}
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public ResourceUrl Url { get; }

		/// <summary>
		/// Name of resource
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; }

		/// <summary>
		/// Text description of the resource
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		/// <summary>
		/// Collection of allowed operations for this resource. Possible values are
		/// <br/>GET - Resource can be requested
		/// <br/>POST - Resource can be created
		/// <br/>PUT - Resource can be updated
		/// <br/>DELETE - Resource can be deleted
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllowedOperations", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> AllowedOperations { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Permanent resource URL in API.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ResourceUrl
	{
		private readonly string _value;

		[Newtonsoft.Json.JsonConstructor]
		public ResourceUrl(string s)
		{
			_value = s;
		}

		public static implicit operator string(ResourceUrl r)
		{
			return r._value;
		}

		public static implicit operator ResourceUrl(string s)
		{
			return new ResourceUrl(s);
		}

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class AttachmentData
	{
		[Newtonsoft.Json.JsonConstructor]

		public AttachmentData(object? @data, string? @mimeType, string? @name)

		{

			this.Name = @name;

			this.MimeType = @mimeType;

			this.Data = @data;

		}    /// <summary>
			 /// attachment name
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// http ContentType (MIME type)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? MimeType { get; }

		/// <summary>
		/// uploading file data
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Data { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// list of uploading files
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class AttachmentDataList : System.Collections.ObjectModel.Collection<AttachmentData>
	{
		[Newtonsoft.Json.JsonConstructor]

		public AttachmentDataList()

			: base()

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Bundle
	{
		[Newtonsoft.Json.JsonConstructor]

		public Bundle(Administrator? @administrator, string? @email, int? @id, System.Collections.Generic.ICollection<LinkedResource>? @members, MembershipLevel2? @membershipLevel, int? @participantsCount, int? @spacesLeft, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.Email = @email;

			this.ParticipantsCount = @participantsCount;

			this.Administrator = @administrator;

			this.MembershipLevel = @membershipLevel;

			this.SpacesLeft = @spacesLeft;

			this.Members = @members;

		}    /// <summary>
			 /// Unique bundle identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Email of bundle coordinator.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// The number of members in the bundle.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ParticipantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ParticipantsCount { get; }

		[Newtonsoft.Json.JsonProperty("Administrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Administrator? Administrator { get; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel2? MembershipLevel { get; }

		/// <summary>
		/// If bundle size is limited, then this field indicates number of vacant spaces left in the bundle.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SpacesLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SpacesLeft { get; }

		/// <summary>
		/// Collection of links to members of the bundle.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? Members { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact(string? @displayName, string? @email, System.Collections.Generic.ICollection<ContactFieldValue>? @fieldValues, string? @firstName, int? @id, bool? @isAccountAdministrator, string? @lastName, bool? @membershipEnabled, MembershipLevel3? @membershipLevel, string? @organization, System.DateTimeOffset? @profileLastUpdated, ContactStatus? @status, bool? @termsOfUseAccepted, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Organization = @organization;

			this.Email = @email;

			this.DisplayName = @displayName;

			this.ProfileLastUpdated = @profileLastUpdated;

			this.MembershipLevel = @membershipLevel;

			this.MembershipEnabled = @membershipEnabled;

			this.Status = @status;

			this.IsAccountAdministrator = @isAccountAdministrator;

			this.TermsOfUseAccepted = @termsOfUseAccepted;

			this.FieldValues = @fieldValues;

		}    /// <summary>
			 /// Unique contact identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'FirstName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'LastName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'Organization'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DisplayName { get; }

		/// <summary>
		/// Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ProfileLastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? ProfileLastUpdated { get; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel3? MembershipLevel { get; }

		/// <summary>
		/// Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MembershipEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MembershipEnabled { get; }

		/// <summary>
		/// The status of the contact's membership. The status is only included in the results if the contact is a member.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactStatus? Status { get; }

		/// <summary>
		/// Indicates if the contact is an account administrator.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsAccountAdministrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsAccountAdministrator { get; }

		/// <summary>
		/// Indicates if the contact already accepted Wild Apricot's terms of use.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TermsOfUseAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TermsOfUseAccepted { get; }

		/// <summary>
		/// For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ContactFieldValue>? FieldValues { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactExtendedMembershipInfo
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactExtendedMembershipInfo(string? @displayName, string? @email, ExtendedMembershipInfo? @extendedMembershipInfo, System.Collections.Generic.ICollection<ContactFieldValue>? @fieldValues, string? @firstName, int? @id, bool? @isAccountAdministrator, string? @lastName, bool? @membershipEnabled, MembershipLevel4? @membershipLevel, string? @organization, System.DateTimeOffset? @profileLastUpdated, ContactExtendedMembershipInfoStatus? @status, bool? @termsOfUseAccepted, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Organization = @organization;

			this.Email = @email;

			this.DisplayName = @displayName;

			this.ProfileLastUpdated = @profileLastUpdated;

			this.MembershipLevel = @membershipLevel;

			this.MembershipEnabled = @membershipEnabled;

			this.Status = @status;

			this.ExtendedMembershipInfo = @extendedMembershipInfo;

			this.IsAccountAdministrator = @isAccountAdministrator;

			this.TermsOfUseAccepted = @termsOfUseAccepted;

			this.FieldValues = @fieldValues;

		}    /// <summary>
			 /// Unique contact identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'FirstName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'LastName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'Organization'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DisplayName { get; }

		/// <summary>
		/// Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ProfileLastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? ProfileLastUpdated { get; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel4? MembershipLevel { get; }

		/// <summary>
		/// Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MembershipEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MembershipEnabled { get; }

		/// <summary>
		/// The status of the contact's membership. The status is only included in the results if the contact is a member.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactExtendedMembershipInfoStatus? Status { get; }

		[Newtonsoft.Json.JsonProperty("ExtendedMembershipInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExtendedMembershipInfo? ExtendedMembershipInfo { get; }

		/// <summary>
		/// Indicates if the contact is an account administrator.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsAccountAdministrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsAccountAdministrator { get; }

		/// <summary>
		/// Indicates if the contact already accepted Wild Apricot's terms of use.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TermsOfUseAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TermsOfUseAccepted { get; }

		/// <summary>
		/// For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ContactFieldValue>? FieldValues { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// 
	/// <br/>Indicates who is allowed to view the field value. - **Public** - value is visible to anyone who has access to members directory - **Members** - value is visible only to members - **Nobody* - value is visible only to account administrators
	/// <br/>
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ContactFieldAccessLevel
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Public")]
		Public = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Members")]
		Members = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Nobody")]
		Nobody = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactFieldDescription : EntityFieldDescriptionWithExtraCharge
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactFieldDescription(ContactFieldAccessLevel? @access, bool? @adminOnly, System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, string @description, string? @displayType, System.Collections.Generic.ICollection<LinkedResource>? @existsInLevels, ExtraCharge? @extraCharge, string? @fieldInstructions, string @fieldName, CustomFieldType @fieldType, int? @id, bool? @isBuiltIn, bool? @isEditable, bool? @isSystem, MemberFieldAccess? @memberAccess, bool? @memberOnly, int? @order, bool? @prorateInApplication, RenewalPolicy? @renewalPolicy, RulesAndTermsInfo? @rulesAndTermsInfo, bool? @supportSearch, string? @systemCode)

			: base(allowedValues, description, displayType, extraCharge, fieldInstructions, fieldName, fieldType, isSystem, order, rulesAndTermsInfo, systemCode)

		{

			this.Id = @id;

			this.Access = @access;

			this.AdminOnly = @adminOnly;

			this.ExistsInLevels = @existsInLevels;

			this.MemberAccess = @memberAccess;

			this.MemberOnly = @memberOnly;

			this.IsBuiltIn = @isBuiltIn;

			this.SupportSearch = @supportSearch;

			this.IsEditable = @isEditable;

			this.RulesAndTermsInfo = @rulesAndTermsInfo;

			this.RenewalPolicy = @renewalPolicy;

			this.ProrateInApplication = @prorateInApplication;

			this.FieldType = @fieldType;

		}    /// <summary>
			 /// Unique field identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactFieldAccessLevel? Access { get; }

		/// <summary>
		/// Indicates that the field is accessible only by administrators.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AdminOnly { get; }

		/// <summary>
		/// If field is defined for specific levels only, this contains list of membership levels.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ExistsInLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? ExistsInLevels { get; }

		[Newtonsoft.Json.JsonProperty("MemberAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MemberFieldAccess? MemberAccess { get; }

		/// <summary>
		/// Indicates whether the field is a membership field.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MemberOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MemberOnly { get; }

		/// <summary>
		/// The field is a built-in system field, it cannot be edited or deleted.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsBuiltIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsBuiltIn { get; }

		/// <summary>
		/// Indicates that this field can be used in $filter expression in contact search.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SupportSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SupportSearch { get; }

		/// <summary>
		/// Indicates that the field's value can be changed with create/update requests. Otherwise value can’t be edited through API. If non-editable field value is provided in create/update contact request, the value is ignored by API.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsEditable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsEditable { get; }

		[Newtonsoft.Json.JsonProperty("RulesAndTermsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RulesAndTermsInfo? RulesAndTermsInfo { get; }

		[Newtonsoft.Json.JsonProperty("RenewalPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RenewalPolicy? RenewalPolicy { get; }

		/// <summary>
		/// If the field has associated cost, this indicates if the cost should be prorated over a partial period of time.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ProrateInApplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ProrateInApplication { get; }

		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CustomFieldType? FieldType { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactFieldValue : FieldValue
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactFieldValue(ContactFieldAccessLevel? @customAccessLevel, string? @fieldName, string? @systemCode, object? @value)

			: base(fieldName, systemCode, value)

		{

			this.CustomAccessLevel = @customAccessLevel;

		}
		[Newtonsoft.Json.JsonProperty("CustomAccessLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactFieldAccessLevel? CustomAccessLevel { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactIdsResponse(System.Collections.Generic.ICollection<int>? @contactIdentifiers)

		{

			this.ContactIdentifiers = @contactIdentifiers;

		}    /// <summary>
			 /// List of contact identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ContactIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? ContactIdentifiers { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactsAsyncResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactsAsyncResponse(string? @errorDetails, InitialQuery? @initialQuery, string? @processed, ContactsAsyncResponseProcessingState? @processingState, string? @requested, string? @resultId, string? @resultUrl)

		{

			this.ResultId = @resultId;

			this.ResultUrl = @resultUrl;

			this.Requested = @requested;

			this.Processed = @processed;

			this.ProcessingState = @processingState;

			this.InitialQuery = @initialQuery;

			this.ErrorDetails = @errorDetails;

		}    /// <summary>
			 /// Unique result identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ResultId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ResultId { get; }

		/// <summary>
		/// URL to check async result availability. We expect that client application will check this URL with some small delay (every 5 sec) until API returns a list of contacts or ProcessingState==Failed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ResultUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ResultUrl { get; }

		/// <summary>
		/// Date and time when the request was queued for processing.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Requested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Requested { get; }

		/// <summary>
		/// Date and time when the request was processed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Processed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Processed { get; }

		/// <summary>
		/// Asynchronous request state. It starts from Waiting, then server process it. Request may end in one of final states: Complete or Failed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ProcessingState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactsAsyncResponseProcessingState? ProcessingState { get; }

		[Newtonsoft.Json.JsonProperty("InitialQuery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public InitialQuery? InitialQuery { get; }

		/// <summary>
		/// In case of error, provides description of error occured.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ErrorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ErrorDetails { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactsCountResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactsCountResponse(int? @count)

		{

			this.Count = @count;

		}    /// <summary>
			 /// Number of contacts that match request criteria. This field appears only if $count parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactsListResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactsListResponse(System.Collections.Generic.ICollection<Contact>? @contacts)

		{

			this.Contacts = @contacts;

		}    /// <summary>
			 /// List of contacts that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Contact>? Contacts { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactsMe
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactsMe(string? @displayName, string? @email, string? @firstName, int? @id, bool? @isAccountAdministrator, string? @lastName, MembershipLevel5? @membershipLevel, string? @organization, ContactsMeStatus? @status, bool? @termsOfUseAccepted, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.DisplayName = @displayName;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Email = @email;

			this.Organization = @organization;

			this.Status = @status;

			this.MembershipLevel = @membershipLevel;

			this.IsAccountAdministrator = @isAccountAdministrator;

			this.TermsOfUseAccepted = @termsOfUseAccepted;

		}    /// <summary>
			 /// Contact unique identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DisplayName { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'FirstName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'LastName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// Shortcut for custom field value with system code 'Organization'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// The status of the contact's membership. The status is only included in the results if the contact is a member.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactsMeStatus? Status { get; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel5? MembershipLevel { get; }

		/// <summary>
		/// Indicates if the contact is an account administrator.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsAccountAdministrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsAccountAdministrator { get; }

		/// <summary>
		/// Indicates if the contact already accepted Wild Apricot's terms of use.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TermsOfUseAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TermsOfUseAccepted { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ContactsResponse : ContactsAsyncResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public ContactsResponse(System.Collections.Generic.ICollection<int>? @contactIdentifiers, System.Collections.Generic.ICollection<Contact>? @contacts, int? @count, string? @errorDetails, InitialQuery? @initialQuery, string? @processed, ContactsAsyncResponseProcessingState? @processingState, string? @requested, string? @resultId, string? @resultUrl)

			: base(errorDetails, initialQuery, processed, processingState, requested, resultId, resultUrl)

		{

			this.ContactIdentifiers = @contactIdentifiers;

			this.Count = @count;

			this.Contacts = @contacts;

		}    /// <summary>
			 /// List of contact identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ContactIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? ContactIdentifiers { get; }

		/// <summary>
		/// Number of contacts that match request criteria. This field appears only if $count parameter was passed in request.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; }

		/// <summary>
		/// List of contacts that match request criteria.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Contact>? Contacts { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateContactFieldParams : EditContactFieldParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreateContactFieldParams(ContactFieldAccessLevel? @access, bool? @adminOnly, System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, System.Collections.Generic.ICollection<ExistsInLevels>? @existsInLevels, ExtraCharge? @extraCharge, string? @fieldInstructions, string @fieldName, CreateContactFieldParamsFieldType @fieldType, bool? @isRequired, MemberFieldAccess? @memberAccess, bool? @memberOnly, int? @order, bool? @prorateInApplication, RenewalPolicy? @renewalPolicy, RulesAndTermsInfo? @rulesAndTermsInfo)

			: base(access, adminOnly, allowedValues, existsInLevels, extraCharge, fieldInstructions, fieldName, isRequired, memberAccess, order, prorateInApplication, renewalPolicy, rulesAndTermsInfo)

		{

			this.FieldType = @fieldType;

			this.MemberOnly = @memberOnly;

		}    /// <summary>
			 /// Field data type.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CreateContactFieldParamsFieldType FieldType { get; }

		/// <summary>
		/// Indicates whether a field is available only to members.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MemberOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MemberOnly { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateContactParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreateContactParams(string? @email, System.Collections.Generic.ICollection<FieldValue>? @fieldValues, string? @firstName, string? @lastName, bool? @membershipEnabled, MembershipLevel6? @membershipLevel, string? @organization, string? @password, bool? @recreateInvoice, CreateContactParamsStatus? @status)

		{

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Organization = @organization;

			this.Email = @email;

			this.MembershipLevel = @membershipLevel;

			this.MembershipEnabled = @membershipEnabled;

			this.Status = @status;

			this.Password = @password;

			this.FieldValues = @fieldValues;

			this.RecreateInvoice = @recreateInvoice;

		}    /// <summary>
			 /// Shortcut for custom field with system code 'FirstName'
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Shortcut for custom field with system code 'LastName'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// Shortcut for custom field with system code 'Organization'
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// Contact primary email, shortcut for custom field with system code 'Email'. Should be unique in account.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel6? MembershipLevel { get; }

		/// <summary>
		/// Indicates whether the contact has membership. False means that the contact is a not a member or the membership is suspended.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MembershipEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MembershipEnabled { get; }

		/// <summary>
		/// The status of the membership. The status is only included in the results if the contact is a member.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CreateContactParamsStatus? Status { get; }

		/// <summary>
		/// New password to assign. If you don't want to change password, just skip this field.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Password { get; }

		/// <summary>
		/// An array of field values to assign to contact.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue>? FieldValues { get; }

		/// <summary>
		/// Indicates whether to create invoice is required. Default value is **TRUE**
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Custom field data type.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum CustomFieldType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"String")]
		String = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
		DateTime = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
		Boolean = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Choice")]
		Choice = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleChoice")]
		MultipleChoice = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Number")]
		Number = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"SectionDivider")]
		SectionDivider = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"CalculatedExtraCharge")]
		CalculatedExtraCharge = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Picture")]
		Picture = 8,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EditContactFieldParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EditContactFieldParams(ContactFieldAccessLevel? @access, bool? @adminOnly, System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, System.Collections.Generic.ICollection<ExistsInLevels>? @existsInLevels, ExtraCharge? @extraCharge, string? @fieldInstructions, string @fieldName, bool? @isRequired, MemberFieldAccess? @memberAccess, int? @order, bool? @prorateInApplication, RenewalPolicy? @renewalPolicy, RulesAndTermsInfo? @rulesAndTermsInfo)

		{

			this.FieldName = @fieldName;

			this.IsRequired = @isRequired;

			this.AdminOnly = @adminOnly;

			this.Access = @access;

			this.FieldInstructions = @fieldInstructions;

			this.Order = @order;

			this.AllowedValues = @allowedValues;

			this.RulesAndTermsInfo = @rulesAndTermsInfo;

			this.ExistsInLevels = @existsInLevels;

			this.MemberAccess = @memberAccess;

			this.RenewalPolicy = @renewalPolicy;

			this.ProrateInApplication = @prorateInApplication;

			this.ExtraCharge = @extraCharge;

		}    /// <summary>
			 /// New field name. Must be unique.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string FieldName { get; }

		/// <summary>
		/// Indicates whether a field has to be filled before the form is submitted. This limitation affects member-facing functionality only, admin always can submit form even without required fields.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsRequired { get; }

		/// <summary>
		/// Indicates that the field is accessible only by administrators.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AdminOnly { get; }

		[Newtonsoft.Json.JsonProperty("Access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactFieldAccessLevel? Access { get; }

		/// <summary>
		/// Shown as a tip when members or visitors fill in forms. Max length is 250 characters.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FieldInstructions { get; }

		/// <summary>
		/// Sorting order to display the field in UI.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Order { get; }

		/// <summary>
		/// List of allowed values for this field. This data is used for Choice and MultipleChoice fields, otherwise it will be ignored.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OptionsListItem>? AllowedValues { get; }

		[Newtonsoft.Json.JsonProperty("RulesAndTermsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RulesAndTermsInfo? RulesAndTermsInfo { get; }

		/// <summary>
		/// Collection of membership levels where the field exists. If empty collection provided, it means the field would be available for all levels.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ExistsInLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ExistsInLevels>? ExistsInLevels { get; }

		[Newtonsoft.Json.JsonProperty("MemberAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MemberFieldAccess? MemberAccess { get; }

		[Newtonsoft.Json.JsonProperty("RenewalPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RenewalPolicy? RenewalPolicy { get; }

		/// <summary>
		/// Whether the cost should be prorated over a partial period of time. Used only by fields with an associated cost.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ProrateInApplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ProrateInApplication { get; }

		[Newtonsoft.Json.JsonProperty("ExtraCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExtraCharge? ExtraCharge { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Readonly object 
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ExtendedMembershipInfo
	{
		[Newtonsoft.Json.JsonConstructor]

		public ExtendedMembershipInfo(System.Collections.Generic.ICollection<LinkedResourceWithName>? @allowedActions, PendingMembershipInvoice? @pendingMembershipInvoice, ExtendedMembershipInfoPendingMembershipOrderStatusType? @pendingMembershipOrderStatusType)

		{

			this.PendingMembershipOrderStatusType = @pendingMembershipOrderStatusType;

			this.PendingMembershipInvoice = @pendingMembershipInvoice;

			this.AllowedActions = @allowedActions;

		}
		[Newtonsoft.Json.JsonProperty("PendingMembershipOrderStatusType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ExtendedMembershipInfoPendingMembershipOrderStatusType? PendingMembershipOrderStatusType { get; }

		[Newtonsoft.Json.JsonProperty("PendingMembershipInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public PendingMembershipInvoice? PendingMembershipInvoice { get; }

		/// <summary>
		/// List of allowed actions related to contact. Each action is described with title and URL, which should be used in POST request.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResourceWithName>? AllowedActions { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// This property appears for CalculatedExtraCharge fields only.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ExtraCharge
	{
		[Newtonsoft.Json.JsonConstructor]

		public ExtraCharge(int? @maxAmount, decimal? @maxCharge, int? @minAmount, decimal? @minCharge, decimal @multiplier, ExtraChargeMultiplierType @multiplierType)

		{

			this.MultiplierType = @multiplierType;

			this.Multiplier = @multiplier;

			this.MinAmount = @minAmount;

			this.MaxAmount = @maxAmount;

			this.MinCharge = @minCharge;

			this.MaxCharge = @maxCharge;

		}    /// <summary>
			 /// Indicates the type of multiplier field.
			 /// <br/>  ItemPrice multiplier specifies a price for each requested item.
			 /// <br/>  Percentage multiplier specifies a percent of field value to use as extra charge.
			 /// <br/>
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("MultiplierType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ExtraChargeMultiplierType MultiplierType { get; }

		/// <summary>
		/// value of multiplier for extra charge calculation
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Multiplier", Required = Newtonsoft.Json.Required.Always)]
		public decimal Multiplier { get; }

		/// <summary>
		/// Minimal amount of items to request (minimal field value). For ItemPrice multiplier type only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MinAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MinAmount { get; }

		/// <summary>
		/// Maximum amount of items to request (maximum field value). For ItemPrice multiplier type only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaxAmount { get; }

		/// <summary>
		/// Minimal extra charge. (minimal field value). For Percentage multiplier type only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MinCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? MinCharge { get; }

		/// <summary>
		/// Maximum extra charge. (maximum field value). For Percentage multiplier type only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MaxCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? MaxCharge { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FileInfo
	{
		[Newtonsoft.Json.JsonConstructor]

		public FileInfo(string? @contentType, string? @createdDate, int? @id, string? @name, int? @size)

		{

			this.Id = @id;

			this.Name = @name;

			this.ContentType = @contentType;

			this.Size = @size;

			this.CreatedDate = @createdDate;

		}    /// <summary>
			 /// Unique attachment identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// attachment name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// http ContentType (MIME type)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ContentType { get; }

		/// <summary>
		/// File size
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Size { get; }

		/// <summary>
		/// Date and time when the file has been uploaded.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? CreatedDate { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Controls whether the member is allowed to view or modify this field. Only for member fields.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum MemberFieldAccess
	{

		[System.Runtime.Serialization.EnumMember(Value = @"EditInProfileAndInApplicationForm")]
		EditInProfileAndInApplicationForm = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"EditInProfile")]
		EditInProfile = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"EditInApplicationForm")]
		EditInApplicationForm = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"ViewOnly")]
		ViewOnly = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Nobody")]
		Nobody = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipGroupListItem
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipGroupListItem(string? @description, int? @id, string? @name)

		{

			this.Id = @id;

			this.Name = @name;

			this.Description = @description;

		}    /// <summary>
			 /// Unique group identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// group name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// group description
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipGroup : MembershipGroupListItem
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipGroup(System.Collections.Generic.ICollection<int>? @contactIds, int? @contactsCount, string? @description, int? @id, string? @name)

			: base(description, id, name)

		{

			this.ContactsCount = @contactsCount;

			this.ContactIds = @contactIds;

		}    /// <summary>
			 /// Total count of group participants
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ContactsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ContactsCount { get; }

		[Newtonsoft.Json.JsonProperty("ContactIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? ContactIds { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipLevel
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipLevel(int? @bundleMembersLimit, string? @description, int? @id, System.Collections.Generic.ICollection<LinkedResource>? @memberCanChangeToLevels, double? @membershipFee, string? @name, bool? @publicCanApply, MembershipRenewalPeriod? @renewalPeriod, MembershipLevelType? @type)

		{

			this.Id = @id;

			this.Name = @name;

			this.Description = @description;

			this.PublicCanApply = @publicCanApply;

			this.Type = @type;

			this.BundleMembersLimit = @bundleMembersLimit;

			this.MembershipFee = @membershipFee;

			this.MemberCanChangeToLevels = @memberCanChangeToLevels;

			this.RenewalPeriod = @renewalPeriod;

		}    /// <summary>
			 /// Unique membership level identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// level name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// level description
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		/// <summary>
		/// Indicates if non-member can apply for membership with this level.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicCanApply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? PublicCanApply { get; }

		/// <summary>
		/// Indicates if membership level is individual or bundle.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MembershipLevelType? Type { get; }

		/// <summary>
		/// Maximum number of bundle members. Empty for individuals.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("BundleMembersLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BundleMembersLimit { get; }

		/// <summary>
		/// Price of being a member with this level of membership. Price is for RenewalPeriod.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MembershipFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? MembershipFee { get; }

		/// <summary>
		/// Member can switch from current level to one of levels from this list.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MemberCanChangeToLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? MemberCanChangeToLevels { get; }

		[Newtonsoft.Json.JsonProperty("RenewalPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipRenewalPeriod? RenewalPeriod { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Describes membership renewal period.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipRenewalPeriod
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipRenewalPeriod(ApplicationReview? @applicationReview, bool? @automaticRecurringPayments, System.Collections.Generic.ICollection<Dates>? @dates, MembershipRenewalPeriodKind? @kind, bool? @startFromJoinDate)

		{

			this.Kind = @kind;

			this.StartFromJoinDate = @startFromJoinDate;

			this.Dates = @dates;

			this.AutomaticRecurringPayments = @automaticRecurringPayments;

			this.ApplicationReview = @applicationReview;

		}    /// <summary>
			 /// Period of renewal.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MembershipRenewalPeriodKind? Kind { get; }

		/// <summary>
		/// Indicates if renewal period starts from join date. Otherwise, starts from dates specified in Dates field.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartFromJoinDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartFromJoinDate { get; }

		/// <summary>
		/// Collection of renewal dates during a year.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Dates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Dates>? Dates { get; }

		/// <summary>
		/// Indicates if recurring payments will be charged automatically.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AutomaticRecurringPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AutomaticRecurringPayments { get; }

		/// <summary>
		/// Application approval policy
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ApplicationReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ApplicationReview? ApplicationReview { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OptionsListItem
	{
		[Newtonsoft.Json.JsonConstructor]

		public OptionsListItem(decimal? @extraCost, int? @id, string? @label, int? @position, bool? @selectedByDefault)

		{

			this.Id = @id;

			this.Label = @label;

			this.Position = @position;

			this.SelectedByDefault = @selectedByDefault;

			this.ExtraCost = @extraCost;

		}    /// <summary>
			 /// Item identifier unique in the list
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Human-readable text label.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Label { get; }

		/// <summary>
		/// Option position among other options.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Position { get; }

		/// <summary>
		/// Indicates whether this option would be selected on form if user did not select another option.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SelectedByDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SelectedByDefault { get; }

		/// <summary>
		/// Extra price for selecting this option. Used only by fields with an associated cost.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ExtraCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? ExtraCost { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Defines how system manages field during renewal process. Used only by multichoice fields with an associated cost.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RenewalPolicy
	{
		[Newtonsoft.Json.JsonConstructor]

		public RenewalPolicy(bool? @allowedToChangeInRenewal, bool? @includeInRenewals)

		{

			this.IncludeInRenewals = @includeInRenewals;

			this.AllowedToChangeInRenewal = @allowedToChangeInRenewal;

		}    /// <summary>
			 /// Indicates if the field should be shown in renewal form.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("IncludeInRenewals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IncludeInRenewals { get; }

		/// <summary>
		/// Indicates whether field value can be changed during renual process. Can be set to TRUE only if IncludeInRenewals is set to TRUE.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllowedToChangeInRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AllowedToChangeInRenewal { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Additional info for fields with rules / terms conditions. Not present for other field types.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RulesAndTermsInfo
	{
		[Newtonsoft.Json.JsonConstructor]

		public RulesAndTermsInfo(string? @link, string? @text)

		{

			this.Text = @text;

			this.Link = @link;

		}    /// <summary>
			 /// Terms of use label.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Text { get; }

		/// <summary>
		/// Url of the rules and terms document.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Link { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SavedSearchListItem
	{
		[Newtonsoft.Json.JsonConstructor]

		public SavedSearchListItem(string? @description, int? @id, string? @name)

		{

			this.Id = @id;

			this.Name = @name;

			this.Description = @description;

		}    /// <summary>
			 /// Unique search identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Saved search name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Save search description
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SavedSearch : SavedSearchListItem
	{
		[Newtonsoft.Json.JsonConstructor]

		public SavedSearch(System.Collections.Generic.ICollection<int>? @contactIds, string? @description, int? @id, string? @name)

			: base(description, id, name)

		{

			this.ContactIds = @contactIds;

		}
		[Newtonsoft.Json.JsonProperty("ContactIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? ContactIds { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdateContactFieldParams : EditContactFieldParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdateContactFieldParams(ContactFieldAccessLevel? @access, bool? @adminOnly, System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, System.Collections.Generic.ICollection<ExistsInLevels>? @existsInLevels, ExtraCharge? @extraCharge, string? @fieldInstructions, string @fieldName, int? @id, bool? @isRequired, MemberFieldAccess? @memberAccess, int? @order, bool? @prorateInApplication, RenewalPolicy? @renewalPolicy, RulesAndTermsInfo? @rulesAndTermsInfo)

			: base(access, adminOnly, allowedValues, existsInLevels, extraCharge, fieldInstructions, fieldName, isRequired, memberAccess, order, prorateInApplication, renewalPolicy, rulesAndTermsInfo)

		{

			this.Id = @id;

		}    /// <summary>
			 /// Unique identifier of existing field.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdateContactParams : CreateContactParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdateContactParams(string? @email, System.Collections.Generic.ICollection<FieldValue>? @fieldValues, string? @firstName, int? @id, string? @lastName, bool? @membershipEnabled, MembershipLevel6? @membershipLevel, string? @organization, string? @password, bool? @recreateInvoice, CreateContactParamsStatus? @status)

			: base(email, fieldValues, firstName, lastName, membershipEnabled, membershipLevel, organization, password, recreateInvoice, status)

		{

			this.Id = @id;

		}    /// <summary>
			 /// Unique contact identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ClickedLink
	{
		[Newtonsoft.Json.JsonConstructor]

		public ClickedLink(bool? @clicked, int? @clicksCount, string? @url)

		{

			this.Url = @url;

			this.Clicked = @clicked;

			this.ClicksCount = @clicksCount;

		}    /// <summary>
			 /// Link address.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Url { get; }

		/// <summary>
		/// the link is clicked at least once
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Clicked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? Clicked { get; }

		/// <summary>
		/// Total number of link clicks (by all recipients).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ClicksCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ClicksCount { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CloneEvent
	{
		[Newtonsoft.Json.JsonConstructor]

		public CloneEvent(int? @eventId, string? @titlePrefix)

		{

			this.EventId = @eventId;

			this.TitlePrefix = @titlePrefix;

		}    /// <summary>
			 /// Identifier of existing event you want to clone.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; }

		/// <summary>
		/// Prefix to be added to the event title to form the new title. For example if you are cloning the event "Annual meetup" and the prefix is "yet another ", then the new event will have the title "yet another Annual meetup".
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TitlePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? TitlePrefix { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Email delivery status.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DeliveryStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Queued")]
		Queued = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Delivered")]
		Delivered = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Failed")]
		Failed = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailDraft
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailDraft(string? @body, string? @createdDate, ShortContact? @creator, int? @eventId, int? @id, bool? @isLinkTrackingAllowed, bool? @isScheduled, string? @lastChangedDate, ShortContact? @modifier, EmailRecipients? @recipients, string? @replyToAddress, string? @replyToName, string? @scheduledDate, string? @subject, EmailDraftType? @type, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.CreatedDate = @createdDate;

			this.Type = @type;

			this.Subject = @subject;

			this.Body = @body;

			this.ReplyToName = @replyToName;

			this.ReplyToAddress = @replyToAddress;

			this.EventId = @eventId;

			this.Creator = @creator;

			this.IsLinkTrackingAllowed = @isLinkTrackingAllowed;

			this.Recipients = @recipients;

			this.LastChangedDate = @lastChangedDate;

			this.Modifier = @modifier;

			this.IsScheduled = @isScheduled;

			this.ScheduledDate = @scheduledDate;

		}    /// <summary>
			 /// Unique email draft identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Date and time when the draft was created.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? CreatedDate { get; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EmailDraftType? Type { get; }

		/// <summary>
		/// Value for email subject. It may contain macros, which will be replaced before delivery.
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Subject { get; }

		/// <summary>
		/// Value for email body. Usually it is HTML content with macros, which will be replaced before delivery.
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Body { get; }

		/// <summary>
		/// Display name for reply to
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ReplyToName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ReplyToName { get; }

		/// <summary>
		/// Email address to use as reply to.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ReplyToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ReplyToAddress { get; }

		/// <summary>
		/// Event identifier for which the draft has been started (if any).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; }

		[Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ShortContact? Creator { get; }

		/// <summary>
		/// Indicates if email tracking is enabled for this email.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsLinkTrackingAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsLinkTrackingAllowed { get; }

		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipients? Recipients { get; }

		/// <summary>
		/// Date and time when the draft was last modified.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastChangedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastChangedDate { get; }

		[Newtonsoft.Json.JsonProperty("Modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ShortContact? Modifier { get; }

		/// <summary>
		/// Indicates if draft delivery is scheduled for a particular date. See ScheduledDate value.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsScheduled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsScheduled { get; }

		/// <summary>
		/// Date and time when the draft will be sent.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ScheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ScheduledDate { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailDraftListResult
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailDraftListResult(System.Collections.Generic.ICollection<EmailDraft>? @emails)

		{

			this.Emails = @emails;

		}    /// <summary>
			 /// Collection of email drafts.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EmailDraft>? Emails { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Describes how email will look like when all macros are applied.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailDraftPreview
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailDraftPreview(string? @body, string? @subject)

		{

			this.Subject = @subject;

			this.Body = @body;

		}    /// <summary>
			 /// Email subject with macros applied.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Subject { get; }

		/// <summary>
		/// Email body HTML with mosros applied.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Body { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EmailDraftType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
		Unknown = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"ContactBlast")]
		ContactBlast = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees")]
		EventAttendees = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventWaitlistPersons")]
		EventWaitlistPersons = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailLog : EmailLogRecords
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailLog(object? @emails, System.Collections.Generic.ICollection<int>? @emailsIdentifiers)

			: base(emails)

		{

			this.EmailsIdentifiers = @emailsIdentifiers;

		}    /// <summary>
			 /// A collection of email log record identifiers.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("EmailsIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? EmailsIdentifiers { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailLogIdentifiers
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailLogIdentifiers(System.Collections.Generic.ICollection<int>? @emailsIdentifiers)

		{

			this.EmailsIdentifiers = @emailsIdentifiers;

		}    /// <summary>
			 /// A collection of email log record identifiers.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("EmailsIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? EmailsIdentifiers { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailLogRecord
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailLogRecord(string? @body, int? @failedCount, int? @id, bool? @inProgress, bool? @isCopySentToAdmins, bool? @isTrackingAllowed, EmailOrigin? @origin, int? @readCount, EmailRecipient? @recipient, int? @recipientCount, int? @recipientsThatClickedAnyLinkCount, string? @replyToAddress, string? @replyToName, int? @senderId, string? @senderName, InitializationSourceType? @sendingType, string? @sentDate, string? @subject, int? @subOriginId, int? @successfullySentCount, EmailType? @type, int? @uniqueLinkClickCount, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.SentDate = @sentDate;

			this.Subject = @subject;

			this.Body = @body;

			this.ReplyToName = @replyToName;

			this.ReplyToAddress = @replyToAddress;

			this.Type = @type;

			this.IsTrackingAllowed = @isTrackingAllowed;

			this.IsCopySentToAdmins = @isCopySentToAdmins;

			this.SenderId = @senderId;

			this.SenderName = @senderName;

			this.SendingType = @sendingType;

			this.Origin = @origin;

			this.SubOriginId = @subOriginId;

			this.RecipientCount = @recipientCount;

			this.ReadCount = @readCount;

			this.UniqueLinkClickCount = @uniqueLinkClickCount;

			this.SuccessfullySentCount = @successfullySentCount;

			this.RecipientsThatClickedAnyLinkCount = @recipientsThatClickedAnyLinkCount;

			this.FailedCount = @failedCount;

			this.InProgress = @inProgress;

			this.Recipient = @recipient;

		}    /// <summary>
			 /// Unique email identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Date when email sending was started.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? SentDate { get; }

		/// <summary>
		/// Email subject.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Subject { get; }

		/// <summary>
		/// Email body.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Body { get; }

		[Newtonsoft.Json.JsonProperty("ReplyToName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ReplyToName { get; }

		[Newtonsoft.Json.JsonProperty("ReplyToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ReplyToAddress { get; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EmailType? Type { get; }

		[Newtonsoft.Json.JsonProperty("IsTrackingAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsTrackingAllowed { get; }

		[Newtonsoft.Json.JsonProperty("IsCopySentToAdmins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCopySentToAdmins { get; }

		[Newtonsoft.Json.JsonProperty("SenderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SenderId { get; }

		[Newtonsoft.Json.JsonProperty("SenderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? SenderName { get; }

		[Newtonsoft.Json.JsonProperty("SendingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InitializationSourceType? SendingType { get; }

		[Newtonsoft.Json.JsonProperty("Origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailOrigin? Origin { get; }

		[Newtonsoft.Json.JsonProperty("SubOriginId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SubOriginId { get; }

		[Newtonsoft.Json.JsonProperty("RecipientCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RecipientCount { get; }

		[Newtonsoft.Json.JsonProperty("ReadCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ReadCount { get; }

		[Newtonsoft.Json.JsonProperty("UniqueLinkClickCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? UniqueLinkClickCount { get; }

		[Newtonsoft.Json.JsonProperty("SuccessfullySentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SuccessfullySentCount { get; }

		[Newtonsoft.Json.JsonProperty("RecipientsThatClickedAnyLinkCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RecipientsThatClickedAnyLinkCount { get; }

		[Newtonsoft.Json.JsonProperty("FailedCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? FailedCount { get; }

		[Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? InProgress { get; }

		/// <summary>
		/// only if email has a single recipient
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipient? Recipient { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailLogRecords
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailLogRecords(object? @emails)

		{

			this.Emails = @emails;

		}    /// <summary>
			 /// Collection of email log records.
			 /// <br/>
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Emails { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailOrigin
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailOrigin(int? @id, string? @name, EmailOriginType? @originType)

		{

			this.OriginType = @originType;

			this.Id = @id;

			this.Name = @name;

		}
		[Newtonsoft.Json.JsonProperty("OriginType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EmailOriginType? OriginType { get; }

		/// <summary>
		/// Unique origin identifier.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Email origin type.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EmailOriginType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"System")]
		System = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Contact")]
		Contact = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipLevel")]
		MembershipLevel = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Event")]
		Event = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"WebPage")]
		WebPage = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"ForumTopicSubscription")]
		ForumTopicSubscription = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"FinancialDocument")]
		FinancialDocument = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"NewPasswordEmail")]
		NewPasswordEmail = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStoreOrder")]
		OnlineStoreOrder = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"PollStartAnnouncement")]
		PollStartAnnouncement = 10,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailRecipient
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailRecipient(string? @email, int? @id, string? @name, EmailRecipientType? @type)

		{

			this.Id = @id;

			this.Type = @type;

			this.Name = @name;

			this.Email = @email;

		}    /// <summary>
			 /// If email was sent to individual recipient, this field contains contact identifier.
			 /// <br/>If email was sent to all recipients from some saved search, this field contains saved search identifier.
			 /// <br/>
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Recipient group type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipientType? Type { get; }

		/// <summary>
		/// Display name of recipient or name of saved search.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// recipient email. for IndividualRecipient and SentEmailRecipient types only
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Collection of recipients.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailRecipients
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailRecipients()

		{

		}

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// list of email recipient groups
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailRecipientsParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailRecipientsParams(int? @contextEventId, System.Collections.Generic.ICollection<EmailRecipient>? @recipients)

		{

			this.Recipients = @recipients;

			this.ContextEventId = @contextEventId;

		}
		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EmailRecipient>? Recipients { get; }

		/// <summary>
		/// context event identifier. not required. for Event related recipient types only
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ContextEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ContextEventId { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EmailScheduleParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EmailScheduleParams(int? @draftId, bool? @isScheduled, string? @scheduleDate)

		{

			this.DraftId = @draftId;

			this.ScheduleDate = @scheduleDate;

			this.IsScheduled = @isScheduled;

		}    /// <summary>
			 /// Unique email draft identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DraftId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DraftId { get; }

		/// <summary>
		/// Date and time scheduled for sending.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ScheduleDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ScheduleDate { get; }

		/// <summary>
		/// Indicates if draft is scheduled for delivery. Set False to pause.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsScheduled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsScheduled { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The reason why the email was sent.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EmailType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
		Unknown = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_ActivationEmail")]
		MemberApplication_ActivationEmail = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_InitiationEmail")]
		MemberApplication_InitiationEmail = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_BundleMember_ActivationEmail")]
		MemberApplication_BundleMember_ActivationEmail = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_BundleAdmin_ActivationEmail")]
		MemberApplication_BundleAdmin_ActivationEmail = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_FreeRenewal")]
		MemberRenewal_FreeRenewal = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalPending")]
		MemberRenewal_RenewalPending = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalConfirmed")]
		MemberRenewal_RenewalConfirmed = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalCanceledByMember")]
		MemberRenewal_RenewalCanceledByMember = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_MemberRenewal_RecurringRenewalFailed")]
		MemberRenewal_MemberRenewal_RecurringRenewalFailed = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_Online_PaymentSuccessfull")]
		MemberRenewal_Online_PaymentSuccessfull = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_AdvanceRenewalReminder1")]
		MemberRenewal_AdvanceRenewalReminder1 = 11,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_AdvanceRenewalReminder2")]
		MemberRenewal_AdvanceRenewalReminder2 = 12,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalDateNotice")]
		MemberRenewal_RenewalDateNotice = 13,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_GracePeriod")]
		MemberRenewal_GracePeriod = 14,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_Lapsed")]
		MemberRenewal_Lapsed = 15,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberLevelChange_InitiationEmail")]
		MemberLevelChange_InitiationEmail = 16,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberLevelChange_ActivationEmail")]
		MemberLevelChange_ActivationEmail = 17,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation_Confirmation")]
		Donation_Confirmation = 18,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OfflinePayment_FreeLevelConfirmationEmail")]
		EventRegistration_OfflinePayment_FreeLevelConfirmationEmail = 19,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OfflinePayment_PaidLevelConfirmationEmail")]
		EventRegistration_OfflinePayment_PaidLevelConfirmationEmail = 20,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OfflinePayment_PaidLevelPendingEmail")]
		EventRegistration_OfflinePayment_PaidLevelPendingEmail = 21,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_NewWaitlistEntryEmail")]
		EventRegistration_NewWaitlistEntryEmail = 22,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_CanceledEmail")]
		EventRegistration_CanceledEmail = 23,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OnlinePayment_PaidLevelConfirmationEmail")]
		EventRegistration_OnlinePayment_PaidLevelConfirmationEmail = 24,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Reminder1")]
		EventRegistration_Reminder1 = 25,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Reminder2")]
		EventRegistration_Reminder2 = 26,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Reminder3")]
		EventRegistration_Reminder3 = 27,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Announcement1")]
		EventRegistration_Announcement1 = 28,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Announcement2")]
		EventRegistration_Announcement2 = 29,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Announcement3")]
		EventRegistration_Announcement3 = 30,

		[System.Runtime.Serialization.EnumMember(Value = @"EmailBlast_Members")]
		EmailBlast_Members = 31,

		[System.Runtime.Serialization.EnumMember(Value = @"EmailBlast_Registrations")]
		EmailBlast_Registrations = 32,

		[System.Runtime.Serialization.EnumMember(Value = @"EmailBlast_WaitlistPersons")]
		EmailBlast_WaitlistPersons = 33,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_Invoice")]
		Finances_Invoice = 34,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_PaymentReceipt")]
		Finances_PaymentReceipt = 35,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_DonationReceipt")]
		Finances_DonationReceipt = 36,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_RefundNote")]
		Finances_RefundNote = 37,

		[System.Runtime.Serialization.EnumMember(Value = @"Contact_Password")]
		Contact_Password = 38,

		[System.Runtime.Serialization.EnumMember(Value = @"SubscriptionForm_Confirmation")]
		SubscriptionForm_Confirmation = 39,

		[System.Runtime.Serialization.EnumMember(Value = @"Public_MemberToMemberEmail")]
		Public_MemberToMemberEmail = 40,

		[System.Runtime.Serialization.EnumMember(Value = @"Poll_Announcement_Notification")]
		Poll_Announcement_Notification = 41,

		[System.Runtime.Serialization.EnumMember(Value = @"ForgottenPasswordRequest")]
		ForgottenPasswordRequest = 42,

		[System.Runtime.Serialization.EnumMember(Value = @"ForumNotification")]
		ForumNotification = 43,

		[System.Runtime.Serialization.EnumMember(Value = @"ForumTopicNotification")]
		ForumTopicNotification = 44,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStore_Order")]
		OnlineStore_Order = 45,

	}

	/// <summary>
	/// Email initialization source type.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum InitializationSourceType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
		Automatic = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Manual")]
		Manual = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SendDraftParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public SendDraftParams(int? @draftId)

		{

			this.DraftId = @draftId;

		}    /// <summary>
			 /// Unique email draft identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DraftId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DraftId { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SendEmailParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public SendEmailParams(string? @body, int? @eventId, EmailRecipients? @recipients, string? @replyToAddress, string? @replyToName, string? @subject)

		{

			this.Subject = @subject;

			this.Body = @body;

			this.ReplyToAddress = @replyToAddress;

			this.ReplyToName = @replyToName;

			this.Recipients = @recipients;

			this.EventId = @eventId;

		}    /// <summary>
			 /// Subject of email message. May contain macros.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Subject { get; }

		/// <summary>
		/// Email body in HTML format. May contain macros.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Body { get; }

		/// <summary>
		/// Email ReplyTo address.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ReplyToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ReplyToAddress { get; }

		/// <summary>
		/// Email ReplyTo display name.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ReplyToName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ReplyToName { get; }

		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipients? Recipients { get; }

		/// <summary>
		/// Unique event identifier. Required if email should be sent to event-related recipients, e.g. all attendees.
		/// <br/>  See EmailRecipient description for details.
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SentEmailRecipient
	{
		[Newtonsoft.Json.JsonConstructor]

		public SentEmailRecipient(System.Collections.Generic.ICollection<ClickedLink>? @clickedLinks, int? @contactId, string? @email, int? @eventRegistrationId, string? @firstName, bool? @isDelivered, bool? @isOpened, string? @lastName, string? @organization, string? @recipientName)

		{

			this.ContactId = @contactId;

			this.EventRegistrationId = @eventRegistrationId;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Organization = @organization;

			this.Email = @email;

			this.RecipientName = @recipientName;

			this.IsDelivered = @isDelivered;

			this.IsOpened = @isOpened;

			this.ClickedLinks = @clickedLinks;

		}    /// <summary>
			 /// Contact identifier with used email address.
			 /// <br/>
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ContactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ContactId { get; }

		/// <summary>
		/// Event regisration Id if the email was sent to an event attendee.
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventRegistrationId { get; }

		/// <summary>
		/// first name of recipient.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// last name of recipient.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// organization of recipient.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// recipient email.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// display name of recipient (Last, First names (if set) or Organization).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RecipientName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RecipientName { get; }

		/// <summary>
		/// email has been successfully sent.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsDelivered { get; }

		/// <summary>
		/// email has been opened/viewed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsOpened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsOpened { get; }

		[Newtonsoft.Json.JsonProperty("ClickedLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ClickedLink>? ClickedLinks { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SentEmailRecipientsRecords
	{
		[Newtonsoft.Json.JsonConstructor]

		public SentEmailRecipientsRecords(System.Collections.Generic.ICollection<SentEmailRecipient>? @recipients)

		{

			this.Recipients = @recipients;

		}    /// <summary>
			 /// Collection of email recipients.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<SentEmailRecipient>? Recipients { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ShortContact
	{
		[Newtonsoft.Json.JsonConstructor]

		public ShortContact(string? @firstName, int? @id, string? @lastName, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.FirstName = @firstName;

			this.LastName = @lastName;

		}    /// <summary>
			 /// Unique contact identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Contact first name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Contact last name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistration
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistration(LinkedResourceWithName @contact, string @displayName, EventStub @event, GuestRegistrationsSummary? @guestRegistrationsSummary, int @id, bool @isCheckedIn, bool @isGuestRegistration, bool @isPaid, string? @memo, bool? @onWaitlist, string @organization, decimal @paidSum, LinkedResource? @parentRegistration, bool? @recreateInvoice, string @registrationDate, decimal @registrationFee, System.Collections.Generic.ICollection<FieldValue>? @registrationFields, LinkedResourceWithName @registrationType, int @registrationTypeId, bool @showToPublic, EventRegistrationStatus? @status, ResourceUrl @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.Event = @event;

			this.Contact = @contact;

			this.RegistrationType = @registrationType;

			this.RegistrationTypeId = @registrationTypeId;

			this.GuestRegistrationsSummary = @guestRegistrationsSummary;

			this.DisplayName = @displayName;

			this.Organization = @organization;

			this.IsCheckedIn = @isCheckedIn;

			this.RegistrationFee = @registrationFee;

			this.PaidSum = @paidSum;

			this.IsPaid = @isPaid;

			this.RegistrationFields = @registrationFields;

			this.ShowToPublic = @showToPublic;

			this.RegistrationDate = @registrationDate;

			this.Memo = @memo;

			this.IsGuestRegistration = @isGuestRegistration;

			this.OnWaitlist = @onWaitlist;

			this.RecreateInvoice = @recreateInvoice;

			this.ParentRegistration = @parentRegistration;

			this.Status = @status;

		}    /// <summary>
			 /// Unique identifier of event registration
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public ResourceUrl Url { get; }

		[Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Always)]
		public EventStub Event { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public LinkedResourceWithName Contact { get; }

		[Newtonsoft.Json.JsonProperty("RegistrationType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public LinkedResourceWithName RegistrationType { get; }

		/// <summary>
		/// Unique identifier of event registration type
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypeId", Required = Newtonsoft.Json.Required.Always)]
		public int RegistrationTypeId { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public GuestRegistrationsSummary? GuestRegistrationsSummary { get; }

		/// <summary>
		/// Contact display name.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string DisplayName { get; }

		/// <summary>
		/// Contact display name.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Organization { get; }

		/// <summary>
		/// Indicates if registrant is already checked in for event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsCheckedIn", Required = Newtonsoft.Json.Required.Always)]
		public bool IsCheckedIn { get; }

		/// <summary>
		/// The fee for this registration including all extra charges and taxes.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFee", Required = Newtonsoft.Json.Required.Always)]
		public decimal RegistrationFee { get; }

		/// <summary>
		/// The sum that the registrant has already paid for the registration.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PaidSum", Required = Newtonsoft.Json.Required.Always)]
		public decimal PaidSum { get; }

		/// <summary>
		/// Indicates if the registrant has already paid for the registration.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsPaid", Required = Newtonsoft.Json.Required.Always)]
		public bool IsPaid { get; }

		/// <summary>
		/// A collection of registration fields values
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue>? RegistrationFields { get; }

		/// <summary>
		/// Indicates whether this registration can be shown to other event registrants.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ShowToPublic", Required = Newtonsoft.Json.Required.Always)]
		public bool ShowToPublic { get; }

		/// <summary>
		/// Date and time when registration was created. (Account local time)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string RegistrationDate { get; }

		/// <summary>
		/// Some additional notes about this registration.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Memo { get; }

		/// <summary>
		/// Boolean. True if this is a guest registration, otherwise false.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsGuestRegistration", Required = Newtonsoft.Json.Required.Always)]
		public bool IsGuestRegistration { get; }

		/// <summary>
		/// Indicates if event registration is in waitlist.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("OnWaitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? OnWaitlist { get; }

		/// <summary>
		/// Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; }

		[Newtonsoft.Json.JsonProperty("ParentRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResource? ParentRegistration { get; }

		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationStatus? Status { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationPost
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationPost(Contact2 @contact, Event2 @event, GuestRegistrationsSummary? @guestRegistrationsSummary, int? @id, bool? @isCheckedIn, string? @memo, bool? @onWaitlist, bool? @recreateInvoice, string? @registrationDate, System.Collections.Generic.ICollection<FieldValue>? @registrationFields, int @registrationTypeId, bool? @showToPublic, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.Event = @event;

			this.Contact = @contact;

			this.RegistrationTypeId = @registrationTypeId;

			this.GuestRegistrationsSummary = @guestRegistrationsSummary;

			this.IsCheckedIn = @isCheckedIn;

			this.RegistrationFields = @registrationFields;

			this.ShowToPublic = @showToPublic;

			this.OnWaitlist = @onWaitlist;

			this.RegistrationDate = @registrationDate;

			this.Memo = @memo;

			this.RecreateInvoice = @recreateInvoice;

		}    /// <summary>
			 /// Unique identifier of event registration
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		[Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Event2 Event { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Contact2 Contact { get; }

		/// <summary>
		/// Unique identifier of event registration type
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypeId", Required = Newtonsoft.Json.Required.Always)]
		public int RegistrationTypeId { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public GuestRegistrationsSummary? GuestRegistrationsSummary { get; }

		/// <summary>
		/// Indicates if registrant is already checked in on event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCheckedIn { get; }

		/// <summary>
		/// A collection of registration fields values
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue>? RegistrationFields { get; }

		/// <summary>
		/// Indicates whether this registration can be shown to other event registrants.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ShowToPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ShowToPublic { get; }

		/// <summary>
		/// Indicates to create a wait lst entry instead of registration.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("OnWaitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? OnWaitlist { get; }

		/// <summary>
		/// Date and time when registration was created. (Account local time)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationDate { get; }

		/// <summary>
		/// Some additional notes about this registration.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Memo { get; }

		/// <summary>
		/// Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationPut
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationPut(GuestRegistrationsSummary? @guestRegistrationsSummary, int @id, bool? @isCheckedIn, string? @memo, bool? @recreateInvoice, System.Collections.Generic.ICollection<FieldValue>? @registrationFields, int? @registrationTypeId, bool? @showToPublic)

		{

			this.Id = @id;

			this.RegistrationTypeId = @registrationTypeId;

			this.IsCheckedIn = @isCheckedIn;

			this.RegistrationFields = @registrationFields;

			this.ShowToPublic = @showToPublic;

			this.Memo = @memo;

			this.GuestRegistrationsSummary = @guestRegistrationsSummary;

			this.RecreateInvoice = @recreateInvoice;

		}    /// <summary>
			 /// Unique identifier of event registration
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		/// <summary>
		/// Unique identifier of event registration type
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RegistrationTypeId { get; }

		/// <summary>
		/// Indicates if registrant is already checked in on event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCheckedIn { get; }

		/// <summary>
		/// A collection of registration fields values
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue>? RegistrationFields { get; }

		/// <summary>
		/// Indicates whether this registration can be shown to other event registrants.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ShowToPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ShowToPublic { get; }

		/// <summary>
		/// Some additional notes about this registration.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Memo { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public GuestRegistrationsSummary? GuestRegistrationsSummary { get; }

		/// <summary>
		/// Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// List of event registrations that matches request criteria.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationsResponse : System.Collections.ObjectModel.Collection<EventRegistration>
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationsResponse()

			: base()

		{

		}
	}

	/// <summary>
	/// Describes event registration status
	/// <br/>
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventRegistrationStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Paid")]
		Paid = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Unpaid")]
		Unpaid = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PartiallyPaid")]
		PartiallyPaid = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Canceled")]
		Canceled = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Free")]
		Free = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"NoInvoice")]
		NoInvoice = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"OnWaitlist")]
		OnWaitlist = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventStub
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventStub(string? @endDate, int? @id, string? @location, string? @name, string? @startDate, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.Name = @name;

			this.StartDate = @startDate;

			this.EndDate = @endDate;

			this.Location = @location;

		}    /// <summary>
			 /// Event identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Event Url to get event details from API.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Event title.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Date and time when the event is scheduled to start.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? StartDate { get; }

		/// <summary>
		/// Date and time when the event is scheduled to end. Could be empty.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EndDate { get; }

		/// <summary>
		/// Location where the event will take place.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Location { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class GuestRegistrationsSummary
	{
		[Newtonsoft.Json.JsonConstructor]

		public GuestRegistrationsSummary(System.Collections.Generic.ICollection<LinkedResource>? @guestRegistrations, int? @numberOfGuests, int? @numberOfGuestsCheckedIn)

		{

			this.NumberOfGuests = @numberOfGuests;

			this.NumberOfGuestsCheckedIn = @numberOfGuestsCheckedIn;

			this.GuestRegistrations = @guestRegistrations;

		}    /// <summary>
			 /// Number of guests registered along with the registrant. If event registration type requires guests registration with details (contact information, etc.), this value is 0.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("NumberOfGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NumberOfGuests { get; }

		/// <summary>
		/// Number of guests who already checked in. If event registration type requires guests registration with details (contact information, etc.), this value is null.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("NumberOfGuestsCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NumberOfGuestsCheckedIn { get; }

		/// <summary>
		/// List of guest registrations links. If event registration type expects guest registration by number (without contact information), this value is null. This value cannot be saved or updated using API.
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("GuestRegistrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? GuestRegistrations { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventEditParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventEditParams(EventDetailsEditParams? @details, string? @endDate, bool? @endTimeSpecified, EventEditParamsEventType @eventType, int? @id, string? @location, string @name, bool? @registrationEnabled, int? @registrationsLimit, System.Collections.Generic.ICollection<EventSesssion>? @sessions, string @startDate, bool? @startTimeSpecified, System.Collections.Generic.ICollection<string>? @tags)

		{

			this.Id = @id;

			this.Name = @name;

			this.EventType = @eventType;

			this.StartDate = @startDate;

			this.StartTimeSpecified = @startTimeSpecified;

			this.EndDate = @endDate;

			this.EndTimeSpecified = @endTimeSpecified;

			this.Location = @location;

			this.RegistrationEnabled = @registrationEnabled;

			this.Tags = @tags;

			this.Details = @details;

			this.Sessions = @sessions;

			this.RegistrationsLimit = @registrationsLimit;

		}    /// <summary>
			 /// Unique identifier of event. This field should be provided only when updating existing event.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Event title
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; }

		/// <summary>
		/// Indicates if event is simple (RSVP) or regular.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventEditParamsEventType EventType { get; }

		/// <summary>
		/// Date and time when the event is scheduled to start. If no time offset is specified, counts as UTC and will be converted into event timezone.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string StartDate { get; }

		/// <summary>
		/// Indicates if event start time is specified. False means that StartDate contains only date component.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartTimeSpecified { get; }

		/// <summary>
		/// Date and time when the event is scheduled to end. Could be empty. If no time offset is specified, counts as UTC and will be converted into event timezone.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EndDate { get; }

		/// <summary>
		/// Indicates if event end time is specified. False means that EndDate contains only date component.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EndTimeSpecified { get; }

		/// <summary>
		/// Location where the event will take place.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Location { get; }

		/// <summary>
		/// Indicates that registration to this event is enabled
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RegistrationEnabled { get; }

		/// <summary>
		/// A collection of tags associated with the event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string>? Tags { get; }

		[Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventDetailsEditParams? Details { get; }

		/// <summary>
		/// Collection of event sessions. Exist in multisessions events only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Sessions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventSesssion>? Sessions { get; }

		/// <summary>
		/// Maximum number of registrations for this event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RegistrationsLimit { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventDetailsEditParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventDetailsEditParams(EventAccessControl? @accessControl, EventAttendeesDisplaySettings? @attendeesDisplaySettings, string? @descriptionHtml, EventGuestRegistrationSettings? @guestRegistrationSettings, bool? @isWaitlistEnabled, bool? @multipleRegistrationAllowed, Organizer? @organizer, string? @paymentInstructions, EventPaymentMethodType? @paymentMethod, string? @registrationConfirmationExtraInfo, string? @registrationMessage, bool? @sendEmailCopy, TimeZone? @timeZone, EventWaitlistSettings? @waitlistSettings)

		{

			this.DescriptionHtml = @descriptionHtml;

			this.PaymentInstructions = @paymentInstructions;

			this.TimeZone = @timeZone;

			this.AccessControl = @accessControl;

			this.GuestRegistrationSettings = @guestRegistrationSettings;

			this.Organizer = @organizer;

			this.PaymentMethod = @paymentMethod;

			this.RegistrationConfirmationExtraInfo = @registrationConfirmationExtraInfo;

			this.RegistrationMessage = @registrationMessage;

			this.SendEmailCopy = @sendEmailCopy;

			this.IsWaitlistEnabled = @isWaitlistEnabled;

			this.WaitlistSettings = @waitlistSettings;

			this.MultipleRegistrationAllowed = @multipleRegistrationAllowed;

			this.AttendeesDisplaySettings = @attendeesDisplaySettings;

		}    /// <summary>
			 /// Full event description in HTML format.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DescriptionHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DescriptionHtml { get; }

		/// <summary>
		/// A description how attendee can pay for attendance in this event. Payment instructions for this event only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PaymentInstructions { get; }

		[Newtonsoft.Json.JsonProperty("TimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public TimeZone? TimeZone { get; }

		[Newtonsoft.Json.JsonProperty("AccessControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAccessControl? AccessControl { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventGuestRegistrationSettings? GuestRegistrationSettings { get; }

		/// <summary>
		/// Link to contact, who is set as organizer for this event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Organizer? Organizer { get; }

		[Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventPaymentMethodType? PaymentMethod { get; }

		/// <summary>
		/// Additional event information to be inserted in registration confirmation email
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationConfirmationExtraInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationConfirmationExtraInfo { get; }

		/// <summary>
		/// This text will be shown above Register button on Event details
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationMessage { get; }

		/// <summary>
		/// Indicates if email copy should be sent according to email routing setting.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SendEmailCopy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SendEmailCopy { get; }

		/// <summary>
		/// Indicates if waitlist feature is enabled to the event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; }

		[Newtonsoft.Json.JsonProperty("WaitlistSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventWaitlistSettings? WaitlistSettings { get; }

		/// <summary>
		/// Indicates if it is allowed to have multiple registrations for the same contact.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MultipleRegistrationAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MultipleRegistrationAllowed { get; }

		[Newtonsoft.Json.JsonProperty("AttendeesDisplaySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAttendeesDisplaySettings? AttendeesDisplaySettings { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CheckInParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public CheckInParams(bool @checkedIn, int? @checkedInGuests, int @registrationId)

		{

			this.RegistrationId = @registrationId;

			this.CheckedIn = @checkedIn;

			this.CheckedInGuests = @checkedInGuests;

		}    /// <summary>
			 /// Event registration Id.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationId", Required = Newtonsoft.Json.Required.Always)]
		public int RegistrationId { get; }

		/// <summary>
		/// Check in (true) or check out (false).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CheckedIn", Required = Newtonsoft.Json.Required.Always)]
		public bool CheckedIn { get; }

		/// <summary>
		/// For event registrations with anonymous guests (guests as number), sets number of checked-in guests.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CheckedInGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CheckedInGuests { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Event
	{
		[Newtonsoft.Json.JsonConstructor]

		public Event(EventAccessLevel? @accessLevel, int? @checkedInAttendeesNumber, int? @confirmedRegistrationsCount, EventDetails? @details, string? @endDate, bool? @endTimeSpecified, EventType @eventType, bool? @hasEnabledRegistrationTypes, int @id, EventInviteeStatistics? @inviteeStat, string? @location, string @name, int? @pendingRegistrationsCount, bool? @registrationEnabled, int? @registrationsLimit, System.Collections.Generic.ICollection<EventSesssion>? @sessions, string @startDate, bool? @startTimeSpecified, System.Collections.Generic.ICollection<string>? @tags, ResourceUrl @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.Name = @name;

			this.EventType = @eventType;

			this.StartDate = @startDate;

			this.StartTimeSpecified = @startTimeSpecified;

			this.EndDate = @endDate;

			this.EndTimeSpecified = @endTimeSpecified;

			this.Location = @location;

			this.RegistrationEnabled = @registrationEnabled;

			this.HasEnabledRegistrationTypes = @hasEnabledRegistrationTypes;

			this.AccessLevel = @accessLevel;

			this.Tags = @tags;

			this.Details = @details;

			this.Sessions = @sessions;

			this.RegistrationsLimit = @registrationsLimit;

			this.InviteeStat = @inviteeStat;

			this.PendingRegistrationsCount = @pendingRegistrationsCount;

			this.ConfirmedRegistrationsCount = @confirmedRegistrationsCount;

			this.CheckedInAttendeesNumber = @checkedInAttendeesNumber;

		}    /// <summary>
			 /// Unique event identifier
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public ResourceUrl Url { get; }

		/// <summary>
		/// Event title
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; }

		/// <summary>
		/// Indicates if event is simple (RSVP) or regular.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventType EventType { get; }

		/// <summary>
		/// Date and time when the event is scheduled to start.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string StartDate { get; }

		/// <summary>
		/// Indicates if event start time is specified. False means that StartDate contains only date component.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartTimeSpecified { get; }

		/// <summary>
		/// Date and time when the event is scheduled to end. Could be empty.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EndDate { get; }

		/// <summary>
		/// Indicates if event end time is specified. False means that EndDate contains only date component.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EndTimeSpecified { get; }

		/// <summary>
		/// Location where the event will take place.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Location { get; }

		/// <summary>
		/// Indicates whether registration to this event is enabled
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RegistrationEnabled { get; }

		/// <summary>
		/// Indicates that at least one registration type is enabled for this event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("HasEnabledRegistrationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? HasEnabledRegistrationTypes { get; }

		[Newtonsoft.Json.JsonProperty("AccessLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventAccessLevel? AccessLevel { get; }

		/// <summary>
		/// A collection of tags associated with the event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string>? Tags { get; }

		[Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventDetails? Details { get; }

		/// <summary>
		/// Collection of event sessions. Exist in multisessions events only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Sessions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventSesssion>? Sessions { get; }

		/// <summary>
		/// Maximum number of registrations for this event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RegistrationsLimit { get; }

		[Newtonsoft.Json.JsonProperty("InviteeStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventInviteeStatistics? InviteeStat { get; }

		/// <summary>
		/// Number of participants already registered for this event but not confirmed yet.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PendingRegistrationsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PendingRegistrationsCount { get; }

		/// <summary>
		/// Number of participants already registered for this event and already confirmed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ConfirmedRegistrationsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ConfirmedRegistrationsCount { get; }

		/// <summary>
		/// Number of attendees already checked in on this event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CheckedInAttendeesNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CheckedInAttendeesNumber { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Describes event availability.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventAccessControl
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventAccessControl(EventAccessLevel @accessLevel, bool? @availableForAnyGroup, bool? @availableForAnyLevel, System.Collections.Generic.ICollection<LinkedResource>? @availableForGroups, System.Collections.Generic.ICollection<LinkedResource>? @availableForLevels)

		{

			this.AccessLevel = @accessLevel;

			this.AvailableForAnyLevel = @availableForAnyLevel;

			this.AvailableForLevels = @availableForLevels;

			this.AvailableForAnyGroup = @availableForAnyGroup;

			this.AvailableForGroups = @availableForGroups;

		}
		[Newtonsoft.Json.JsonProperty("AccessLevel", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventAccessLevel AccessLevel { get; }

		/// <summary>
		/// If AccessLevel is Restricted, then indicates if the event is available to any member on any level.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableForAnyLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AvailableForAnyLevel { get; }

		/// <summary>
		/// Event is available to members who are on these levels.
		/// <br/>This field appears only if AccessLevel is Restricted and AvailableForAnyLevel is false.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableForLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? AvailableForLevels { get; }

		/// <summary>
		/// If AccessLevel is Restricted, then indicates if the event is available to any member in any membership group.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableForAnyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AvailableForAnyGroup { get; }

		/// <summary>
		/// Event is available to members who are any of these groups.
		/// <br/>This field appears only if AccessLevel is Restricted and AvailableForAnyGroup is false.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableForGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? AvailableForGroups { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// 
	/// <br/>Event accessability.
	/// <br/>  - Public means event accessible for everyone
	/// <br/>  - AdminOnly means event accessible for administrators only
	/// <br/>  - Restricted means event accessible for specific membership levels or groups.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventAccessLevel
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Public")]
		Public = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"AdminOnly")]
		AdminOnly = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Restricted")]
		Restricted = 2,

	}

	/// <summary>
	/// Settings for section "List of event registrants" on UI.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventAttendeesDisplaySettings
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventAttendeesDisplaySettings(bool? @showPendingAttendees, ContactFieldAccessLevel? @visibleTo)

		{

			this.VisibleTo = @visibleTo;

			this.ShowPendingAttendees = @showPendingAttendees;

		}
		//Renamed from that VisableTo typedef we commented out previously
		[Newtonsoft.Json.JsonProperty("VisibleTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ContactFieldAccessLevel? VisibleTo { get; }

		/// <summary>
		/// Indicates if pending registrants should be included in the list of registrants.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ShowPendingAttendees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ShowPendingAttendees { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventDetails
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventDetails(EventAccessControl? @accessControl, EventAttendeesDisplaySettings? @attendeesDisplaySettings, string? @descriptionHtml, System.Collections.Generic.ICollection<EventRegistrationFieldDescription>? @eventRegistrationFields, EventGuestRegistrationSettings? @guestRegistrationSettings, bool? @isWaitlistEnabled, bool? @multipleRegistrationAllowed, Organizer2? @organizer, string? @paymentInstructions, EventPaymentMethodType? @paymentMethod, string? @registrationConfirmationExtraInfo, string? @registrationMessage, System.Collections.Generic.ICollection<EventRegistrationType>? @registrationTypes, bool? @sendEmailCopy, TimeZone? @timeZone, double? @totalDue, double? @totalPaid, EventWaitlistSettings? @waitlistSettings)

		{

			this.DescriptionHtml = @descriptionHtml;

			this.PaymentInstructions = @paymentInstructions;

			this.TimeZone = @timeZone;

			this.RegistrationTypes = @registrationTypes;

			this.EventRegistrationFields = @eventRegistrationFields;

			this.TotalPaid = @totalPaid;

			this.TotalDue = @totalDue;

			this.AccessControl = @accessControl;

			this.GuestRegistrationSettings = @guestRegistrationSettings;

			this.Organizer = @organizer;

			this.PaymentMethod = @paymentMethod;

			this.RegistrationConfirmationExtraInfo = @registrationConfirmationExtraInfo;

			this.RegistrationMessage = @registrationMessage;

			this.SendEmailCopy = @sendEmailCopy;

			this.IsWaitlistEnabled = @isWaitlistEnabled;

			this.WaitlistSettings = @waitlistSettings;

			this.MultipleRegistrationAllowed = @multipleRegistrationAllowed;

			this.AttendeesDisplaySettings = @attendeesDisplaySettings;

		}    /// <summary>
			 /// Full event description in HTML format. Important - Links to images can be relative.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DescriptionHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DescriptionHtml { get; }

		/// <summary>
		/// A description how registrant can pay for attendance to this event. Payment instructions for this event only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PaymentInstructions { get; }

		[Newtonsoft.Json.JsonProperty("TimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public TimeZone? TimeZone { get; }

		/// <summary>
		/// Collection of configured registration types for the event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventRegistrationType>? RegistrationTypes { get; }

		/// <summary>
		/// Collection of fields registrant should fill during registration process.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventRegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventRegistrationFieldDescription>? EventRegistrationFields { get; }

		/// <summary>
		/// Total sum paid for all registrations to this event. This is a read-only property.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TotalPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? TotalPaid { get; }

		/// <summary>
		/// Total sum due, but not necessarily paid yet for all registrations related to this event. This is a read-only property.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("TotalDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? TotalDue { get; }

		[Newtonsoft.Json.JsonProperty("AccessControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAccessControl? AccessControl { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventGuestRegistrationSettings? GuestRegistrationSettings { get; }

		[Newtonsoft.Json.JsonProperty("Organizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Organizer2? Organizer { get; }

		[Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventPaymentMethodType? PaymentMethod { get; }

		/// <summary>
		/// Additional event information to be inserted in registration confirmation email
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationConfirmationExtraInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationConfirmationExtraInfo { get; }

		/// <summary>
		/// This text will be shown above Register button on Event details
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationMessage { get; }

		/// <summary>
		/// Indicates if email copy should be sent according to email routing settings.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SendEmailCopy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SendEmailCopy { get; }

		/// <summary>
		/// Indicates if waitlist feature is enabled for the event.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; }

		[Newtonsoft.Json.JsonProperty("WaitlistSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventWaitlistSettings? WaitlistSettings { get; }

		/// <summary>
		/// Indicates if multiple registrations are allowed for the same contact.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MultipleRegistrationAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MultipleRegistrationAllowed { get; }

		[Newtonsoft.Json.JsonProperty("AttendeesDisplaySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAttendeesDisplaySettings? AttendeesDisplaySettings { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Describes how guests are registered. Allowed values are
	/// <br/>- Disabled - guest registration is not allowed - NumberOfGuests - number of guests should be specified. - CollectContactDetails - contact information should be collected for each guest. - CollectFullInfo - full registration info should be collected for each guest.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventGuestRegistrationPolicy
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
		Disabled = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"NumberOfGuests")]
		NumberOfGuests = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CollectContactDetails")]
		CollectContactDetails = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"CollectFullInfo")]
		CollectFullInfo = 3,

	}

	/// <summary>
	/// Control how system works with guest registrations for specific event.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventGuestRegistrationSettings
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventGuestRegistrationSettings(EventGuestRegistrationSettingsCreateContactMode? @createContactMode, bool? @enabled)

		{

			this.Enabled = @enabled;

			this.CreateContactMode = @createContactMode;

		}    /// <summary>
			 /// Indicates if guest registrations are allowed.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? Enabled { get; }

		/// <summary>
		/// Indicates whether guests are automatically added to database after the main registrant confirms the registration
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CreateContactMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventGuestRegistrationSettingsCreateContactMode? CreateContactMode { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Statistics related to invitees to RSVP events.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventInviteeStatistics
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventInviteeStatistics(int? @attended, int? @maybeAttended, int? @notAttended, int? @notResponded)

		{

			this.NotResponded = @notResponded;

			this.NotAttended = @notAttended;

			this.Attended = @attended;

			this.MaybeAttended = @maybeAttended;

		}    /// <summary>
			 /// Number of invitees who did not respond yet.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("NotResponded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NotResponded { get; }

		/// <summary>
		/// Number of invitees who answered NO to the invite.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("NotAttended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NotAttended { get; }

		/// <summary>
		/// Number of invitees who answered YES to the invite.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Attended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Attended { get; }

		/// <summary>
		/// Number of invitees who answered MAY BE to the invite.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MaybeAttended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaybeAttended { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// How attendees can pay for the ticket.
	/// <br/>
	/// <br/>  - OnlineAndOffline
	/// <br/>  - OfflineOnly
	/// <br/>  - OnlineOnly
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventPaymentMethodType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineAndOffline")]
		OnlineAndOffline = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"OfflineOnly")]
		OfflineOnly = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineOnly")]
		OnlineOnly = 3,

	}

	/// <summary>
	/// Indicates if it is possible for attendee to self-cancel event registration.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventRegistrationCancellationBehavior
	{

		[System.Runtime.Serialization.EnumMember(Value = @"DoNotAllow")]
		DoNotAllow = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"AllowUpToPeriodBeforeEvent")]
		AllowUpToPeriodBeforeEvent = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Allow")]
		Allow = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationFieldDescription : EntityFieldDescriptionWithExtraCharge
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationFieldDescription(System.Collections.Generic.ICollection<OptionsListItem>? @allowedValues, string @description, string? @displayType, ExtraCharge? @extraCharge, string? @fieldInstructions, string @fieldName, CustomFieldType @fieldType, bool? @isSystem, EventRegistrationFieldDescriptionKind? @kind, int? @order, RulesAndTermsInfo? @rulesAndTermsInfo, string? @systemCode)

			: base(allowedValues, description, displayType, extraCharge, fieldInstructions, fieldName, fieldType, isSystem, order, rulesAndTermsInfo, systemCode)

		{

			this.Kind = @kind;

		}    /// <summary>
			 /// Indicated is the field is common for all contacts or custom for the event.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationFieldDescriptionKind? Kind { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationType
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationType(EventRegistrationTypeAvailability? @availability, System.Collections.Generic.ICollection<LinkedResource>? @availableForMembershipLevels, string? @availableFrom, string? @availableThrough, double? @basePrice, EventRegistrationCancellationBehavior? @cancellationBehaviour, int? @cancellationDaysBeforeEvent, int? @currentRegistrantsCount, string? @description, int? @eventId, double? @guestPrice, EventGuestRegistrationPolicy? @guestRegistrationPolicy, int? @id, bool? @isEnabled, bool? @isWaitlistEnabled, int? @maximumRegistrantsCount, string? @name, string? @registrationCode, EventRegistrationUnavailabilityPolicy? @unavailabilityPolicy, ResourceUrl? @url, bool? @useTaxScopeSettings)

		{

			this.Id = @id;

			this.Url = @url;

			this.IsEnabled = @isEnabled;

			this.EventId = @eventId;

			this.Name = @name;

			this.Description = @description;

			this.BasePrice = @basePrice;

			this.GuestPrice = @guestPrice;

			this.UseTaxScopeSettings = @useTaxScopeSettings;

			this.Availability = @availability;

			this.RegistrationCode = @registrationCode;

			this.AvailableForMembershipLevels = @availableForMembershipLevels;

			this.AvailableFrom = @availableFrom;

			this.AvailableThrough = @availableThrough;

			this.MaximumRegistrantsCount = @maximumRegistrantsCount;

			this.CurrentRegistrantsCount = @currentRegistrantsCount;

			this.GuestRegistrationPolicy = @guestRegistrationPolicy;

			this.UnavailabilityPolicy = @unavailabilityPolicy;

			this.CancellationBehaviour = @cancellationBehaviour;

			this.CancellationDaysBeforeEvent = @cancellationDaysBeforeEvent;

			this.IsWaitlistEnabled = @isWaitlistEnabled;

		}    /// <summary>
			 /// Unique event registration type identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Indicates whether this registration type is enabled
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsEnabled { get; }

		/// <summary>
		/// Identifier of event related to the registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; }

		/// <summary>
		/// Registraton type title.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Plain text description for the event registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		/// <summary>
		/// Base price registrant pays for this registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("BasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? BasePrice { get; }

		/// <summary>
		/// Price for each additional guest.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("GuestPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? GuestPrice { get; }

		/// <summary>
		/// Indicates whether account tax scope settings should be used to calculate final price.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("UseTaxScopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? UseTaxScopeSettings { get; }

		[Newtonsoft.Json.JsonProperty("Availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationTypeAvailability? Availability { get; }

		/// <summary>
		/// Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationCode { get; }

		/// <summary>
		/// Which membership levels can apply for event. This property has value only if Availability is MembersOnly.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableForMembershipLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? AvailableForMembershipLevels { get; }

		/// <summary>
		/// This registration type is available starting from this date. Can be null.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? AvailableFrom { get; }

		/// <summary>
		/// This registration type is available until this date. Can be null.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableThrough", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? AvailableThrough { get; }

		/// <summary>
		/// Maximum number of registrants for this registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MaximumRegistrantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaximumRegistrantsCount { get; }

		/// <summary>
		/// Current number of registrants for this registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CurrentRegistrantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CurrentRegistrantsCount { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventGuestRegistrationPolicy? GuestRegistrationPolicy { get; }

		[Newtonsoft.Json.JsonProperty("UnavailabilityPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationUnavailabilityPolicy? UnavailabilityPolicy { get; }

		[Newtonsoft.Json.JsonProperty("CancellationBehaviour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationCancellationBehavior? CancellationBehaviour { get; }

		/// <summary>
		/// In case if CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field indicates the minimum number of days before the event that cancellations are allowed.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CancellationDaysBeforeEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CancellationDaysBeforeEvent { get; }

		/// <summary>
		/// Indicated if registrant should be added to waitlist if registrations have reached their limit.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Indicates who the registration type is available to.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventRegistrationTypeAvailability
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Everyone")]
		Everyone = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MembersOnly")]
		MembersOnly = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CodeRequired")]
		CodeRequired = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationTypeEditParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationTypeEditParams(EventRegistrationTypeAvailability? @availability, System.Collections.Generic.ICollection<LinkedResource>? @availableForMembershipLevels, string? @availableFrom, string? @availableThrough, double? @basePrice, EventRegistrationCancellationBehavior? @cancellationBehaviour, int? @cancellationDaysBeforeEvent, string? @description, int @eventId, double? @guestPrice, EventGuestRegistrationPolicy? @guestRegistrationPolicy, int? @id, bool? @isEnabled, bool? @isWaitlistEnabled, int? @maximumRegistrantsCount, string? @name, string? @registrationCode, EventRegistrationUnavailabilityPolicy? @unavailabilityPolicy, bool? @useTaxScopeSettings)

		{

			this.Id = @id;

			this.EventId = @eventId;

			this.Name = @name;

			this.IsEnabled = @isEnabled;

			this.Description = @description;

			this.BasePrice = @basePrice;

			this.GuestPrice = @guestPrice;

			this.UseTaxScopeSettings = @useTaxScopeSettings;

			this.Availability = @availability;

			this.RegistrationCode = @registrationCode;

			this.AvailableForMembershipLevels = @availableForMembershipLevels;

			this.AvailableFrom = @availableFrom;

			this.AvailableThrough = @availableThrough;

			this.MaximumRegistrantsCount = @maximumRegistrantsCount;

			this.GuestRegistrationPolicy = @guestRegistrationPolicy;

			this.UnavailabilityPolicy = @unavailabilityPolicy;

			this.CancellationBehaviour = @cancellationBehaviour;

			this.CancellationDaysBeforeEvent = @cancellationDaysBeforeEvent;

			this.IsWaitlistEnabled = @isWaitlistEnabled;

		}    /// <summary>
			 /// Unique event identifier. This field should be provided only when updating existing event registration type
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Identifier of event related to the registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Always)]
		public int EventId { get; }

		/// <summary>
		/// Registraton type title. This field should be provided only when creating new registration type
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Indicates whether this registration type is enabled
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsEnabled { get; }

		/// <summary>
		/// Plain text description for the event registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		/// <summary>
		/// Base price registrant pays with this registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("BasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? BasePrice { get; }

		/// <summary>
		/// Price for each additional guest.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("GuestPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? GuestPrice { get; }

		/// <summary>
		/// Indicates whether account tax scope settings should be used to calculate final price. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to default value
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("UseTaxScopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? UseTaxScopeSettings { get; }

		[Newtonsoft.Json.JsonProperty("Availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationTypeAvailability? Availability { get; }

		/// <summary>
		/// Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RegistrationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? RegistrationCode { get; }

		/// <summary>
		/// Which membership levels can apply for event. This property has value only if Availability is MembersOnly.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableForMembershipLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? AvailableForMembershipLevels { get; }

		/// <summary>
		/// This registration type is available starting from this date. Can be null. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? AvailableFrom { get; }

		/// <summary>
		/// This registration type is available until this date. Can be null. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null
		/// <br/>
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableThrough", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? AvailableThrough { get; }

		/// <summary>
		/// Maximum number of registrants for this registration type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MaximumRegistrantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaximumRegistrantsCount { get; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventGuestRegistrationPolicy? GuestRegistrationPolicy { get; }

		[Newtonsoft.Json.JsonProperty("UnavailabilityPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationUnavailabilityPolicy? UnavailabilityPolicy { get; }

		[Newtonsoft.Json.JsonProperty("CancellationBehaviour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationCancellationBehavior? CancellationBehaviour { get; }

		/// <summary>
		/// If CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field contains minimum number of days before the event that cancellations are allowed
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CancellationDaysBeforeEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CancellationDaysBeforeEvent { get; }

		/// <summary>
		/// Indicated whether registrant should be placed on waitlist if registrations have reached their limit.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// List of event registration types that match the request criteria.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistrationTypeResponse : System.Collections.ObjectModel.Collection<EventRegistrationType>
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistrationTypeResponse()

			: base()

		{

		}
	}

	/// <summary>
	/// Indicates what is displayed if the registration type is not available for a particular visitor.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventRegistrationUnavailabilityPolicy
	{

		[System.Runtime.Serialization.EnumMember(Value = @"ShowDisabled")]
		ShowDisabled = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Hide")]
		Hide = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventSesssion
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventSesssion(string? @endDate, bool? @endTimeSpecified, int? @id, string? @startDate, bool? @startTimeSpecified, string? @title)

		{

			this.Id = @id;

			this.Title = @title;

			this.StartDate = @startDate;

			this.StartTimeSpecified = @startTimeSpecified;

			this.EndDate = @endDate;

			this.EndTimeSpecified = @endTimeSpecified;

		}    /// <summary>
			 /// Unique event session identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// Automatically generated session title.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; }

		/// <summary>
		/// Date and time when the event session is scheduled to start.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? StartDate { get; }

		/// <summary>
		/// Indicates if session start time is specified. False means that StartDate contains only date component.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("StartTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartTimeSpecified { get; }

		/// <summary>
		/// Date and time when the event session is scheduled to end. Could be empty.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EndDate { get; }

		/// <summary>
		/// Indicates if session end time is specified. False means that EndDate contains only date component.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EndTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EndTimeSpecified { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventsCountResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventsCountResponse(int? @count)

		{

			this.Count = @count;

		}    /// <summary>
			 /// Number of events that match request criteria. This field appears only if $count parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventsListResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventsListResponse(System.Collections.Generic.ICollection<Event>? @events)

		{

			this.Events = @events;

		}    /// <summary>
			 /// List of events that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Event>? Events { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventIdsResponse(System.Collections.Generic.ICollection<int>? @eventsIdentifiers)

		{

			this.EventsIdentifiers = @eventsIdentifiers;

		}    /// <summary>
			 /// List of event identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("EventsIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? EventsIdentifiers { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventsResponse : EventIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventsResponse(int? @count, System.Collections.Generic.ICollection<Event>? @events, System.Collections.Generic.ICollection<int>? @eventsIdentifiers)

			: base(eventsIdentifiers)

		{

			this.Events = @events;

			this.Count = @count;

		}    /// <summary>
			 /// List of events that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Event>? Events { get; }

		/// <summary>
		/// Number of events that match request criteria. This field appears only if $count parameter was passed in request.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventWaitlistSettings
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventWaitlistSettings(EventWaitlistSettingsInformationToCollect? @informationToCollect, EventWaitlistSettingsWaitlistType? @waitlistType)

		{

			this.WaitlistType = @waitlistType;

			this.InformationToCollect = @informationToCollect;

		}    /// <summary>
			 /// Indicates how the waitlist works for the event.
			 /// <br/>
			 /// <br/> - None - waitlist is not enabled
			 /// <br/> - Manual - people can be added to a waitlist and then automatically registered in the order they were added, as sufficient spaces open up
			 /// <br/> - Auto - people can be added to a waitlist and then manually registered by an administrator or by themselves once spaces become available
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("WaitlistType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventWaitlistSettingsWaitlistType? WaitlistType { get; }

		/// <summary>
		/// Indicates what information should be collected for people being added to the waitlist.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("InformationToCollect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventWaitlistSettingsInformationToCollect? InformationToCollect { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RegisterFromWaitlistParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public RegisterFromWaitlistParams(int @eventId, bool @generateInvoice, int @waitlistRegistrationId)

		{

			this.WaitlistRegistrationId = @waitlistRegistrationId;

			this.EventId = @eventId;

			this.GenerateInvoice = @generateInvoice;

		}    /// <summary>
			 /// Event registration Id.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("WaitlistRegistrationId", Required = Newtonsoft.Json.Required.Always)]
		public int WaitlistRegistrationId { get; }

		/// <summary>
		/// Event Id.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Always)]
		public int EventId { get; }

		/// <summary>
		/// Defines if invoice should be generated in case if registration is considered paid (registration fee &gt; 0 or any extra costs selected)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("GenerateInvoice", Required = Newtonsoft.Json.Required.Always)]
		public bool GenerateInvoice { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class AllocateInvoiceParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public AllocateInvoiceParams(double? @amount, int? @invoiceId)

		{

			this.InvoiceId = @invoiceId;

			this.Amount = @amount;

		}    /// <summary>
			 /// Unique invoice identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("InvoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? InvoiceId { get; }

		/// <summary>
		/// Allocating amount.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Amount { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class AuditItemsListResult
	{
		[Newtonsoft.Json.JsonConstructor]

		public AuditItemsListResult(System.Collections.Generic.ICollection<AuditLogItem>? @items)

		{

			this.Items = @items;

		}    /// <summary>
			 /// List of audit log items that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<AuditLogItem>? Items { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class AuditLogItem
	{
		[Newtonsoft.Json.JsonConstructor]

		public AuditLogItem(Contact3? @contact, Document? @document, AuditLogItemDocumentAction? @documentAction, AuditLogItemDocumentType? @documentType, string? @email, string? @firstName, int? @id, string? @lastName, string? @message, AuditLogItemOrderType? @orderType, string? @organization, object? @properties, AuditLogItemSeverity? @severity, System.DateTimeOffset? @timestamp, ResourceUrl? @url)

		{

			this.Id = @id;

			this.Url = @url;

			this.Timestamp = @timestamp;

			this.Contact = @contact;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Organization = @organization;

			this.Email = @email;

			this.Message = @message;

			this.Severity = @severity;

			this.OrderType = @orderType;

			this.Properties = @properties;

			this.Document = @document;

			this.DocumentType = @documentType;

			this.DocumentAction = @documentAction;

		}    /// <summary>
			 /// Unique identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		/// <summary>
		/// Item creation date.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? Timestamp { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact3? Contact { get; }

		/// <summary>
		/// Contact first name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Contact last name
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// Contact organization
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// Contact primary email.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// Log item text.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Message { get; }

		/// <summary>
		/// Log item severity level.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemSeverity? Severity { get; }

		/// <summary>
		/// The origin of the audit log entry.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemOrderType? OrderType { get; }

		/// <summary>
		/// Collection of audit log item properties that contains all technical information about transaction and other linked documents.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Properties { get; }

		[Newtonsoft.Json.JsonProperty("Document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Document? Document { get; }

		/// <summary>
		/// Related document type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemDocumentType? DocumentType { get; }

		/// <summary>
		/// Action performed on related document type.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemDocumentAction? DocumentAction { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateFinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreateFinanceDocument(Contact4? @contact, CreatedBy? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, ResourceUrl? @url, float? @value)

		{

			this.Url = @url;

			this.Value = @value;

			this.DocumentDate = @documentDate;

			this.Contact = @contact;

			this.CreatedDate = @createdDate;

			this.CreatedBy = @createdBy;

		}
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; }

		/// <summary>
		/// Document date.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact4? Contact { get; }

		/// <summary>
		/// Date and time when the document was created.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? CreatedDate { get; }

		[Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public CreatedBy? CreatedBy { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateInvoiceParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreateInvoiceParams(Contact5? @contact, CreatedBy2? @createdBy, System.DateTimeOffset? @documentDate, string? @documentNumber, string? @memo, System.Collections.Generic.ICollection<OrderDetailRecord>? @orderDetails, InvoiceOrderType? @orderType, string? @publicMemo, UpdatedBy? @updatedBy, System.DateTimeOffset? @updatedDate, float? @value)

		{

			this.Value = @value;

			this.DocumentDate = @documentDate;

			this.Contact = @contact;

			this.CreatedBy = @createdBy;

			this.UpdatedDate = @updatedDate;

			this.UpdatedBy = @updatedBy;

			this.DocumentNumber = @documentNumber;

			this.OrderType = @orderType;

			this.OrderDetails = @orderDetails;

			this.Memo = @memo;

			this.PublicMemo = @publicMemo;

		}
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; }

		/// <summary>
		/// Document date.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact5? Contact { get; }

		[Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public CreatedBy2? CreatedBy { get; }

		/// <summary>
		/// Date and time when the document was last modified.  Could be null.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("UpdatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? UpdatedDate { get; }

		[Newtonsoft.Json.JsonProperty("UpdatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public UpdatedBy? UpdatedBy { get; }

		/// <summary>
		/// Invoice number.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DocumentNumber { get; }

		[Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InvoiceOrderType? OrderType { get; }

		[Newtonsoft.Json.JsonProperty("OrderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OrderDetailRecord>? OrderDetails { get; }

		/// <summary>
		/// Internal note on invoice. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Memo { get; }

		/// <summary>
		/// Comment on invoice. Visible to both administrators and the person being invoicec.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicMemo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicMemo { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreatePaymentModel
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreatePaymentModel(string? @comment, Contact6? @contact, System.DateTimeOffset? @documentDate, System.Collections.Generic.ICollection<LinkedResource>? @invoices, PaymentType? @paymentType, string? @publicComment, LinkedResource? @tender, float? @value)

		{

			this.Value = @value;

			this.DocumentDate = @documentDate;

			this.Invoices = @invoices;

			this.Contact = @contact;

			this.Tender = @tender;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.PaymentType = @paymentType;

		}    /// <summary>
			 /// Payment amount.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; }

		/// <summary>
		/// Document date.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; }

		/// <summary>
		/// If not null or empty then invoices with these IDs will be settled to new payment.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource>? Invoices { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact6? Contact { get; }

		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResource? Tender { get; }

		/// <summary>
		/// Internal note on payment. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment to payor. Visible to both administrators and payor.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		[Newtonsoft.Json.JsonProperty("PaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? PaymentType { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateRefundParams : CreateFinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreateRefundParams(string? @comment, Contact4? @contact, CreatedBy? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, string? @publicComment, float? @settledValue, LinkedResourceWithName? @tender, ResourceUrl? @url, float? @value)

			: base(contact, createdBy, createdDate, documentDate, url, value)

		{

			this.Tender = @tender;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.SettledValue = @settledValue;

		}
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName? Tender { get; }

		/// <summary>
		/// Internal note on refund. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment on refund. Visible to both administrators and the person being refunded.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		/// <summary>
		/// The previously settled amount of the payment.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SettledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? SettledValue { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class DocumentParam
	{
		[Newtonsoft.Json.JsonConstructor]

		public DocumentParam(int? @documentId)

		{

			this.DocumentId = @documentId;

		}    /// <summary>
			 /// Unique finance document identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DocumentId { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Donation
	{
		[Newtonsoft.Json.JsonConstructor]

		public Donation(string? @comment, Contact7? @contact, System.DateTimeOffset? @donationDate, string? @email, System.Collections.Generic.ICollection<FieldValue>? @fieldValues, string? @firstName, string? @lastName, string? @organization, Payment2? @payment, string? @phone, string? @publicComment, DonationType? @type, float? @value)

		{

			this.Contact = @contact;

			this.Payment = @payment;

			this.DonationDate = @donationDate;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.Email = @email;

			this.Organization = @organization;

			this.Phone = @phone;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.Value = @value;

			this.Type = @type;

			this.FieldValues = @fieldValues;

		}
		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact7? Contact { get; }

		[Newtonsoft.Json.JsonProperty("Payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Payment2? Payment { get; }

		/// <summary>
		/// Donation date.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DonationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DonationDate { get; }

		/// <summary>
		/// First name of the donor.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		/// <summary>
		/// Last name of the donor.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		/// <summary>
		/// Email of the donor.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		/// <summary>
		/// Organization of the donor.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Organization { get; }

		/// <summary>
		/// Phone of the donor.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Phone { get; }

		/// <summary>
		/// Internal note on donation. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment on donation. Visible to both administrators and donors.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		/// <summary>
		/// Donation amount.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public DonationType? Type { get; }

		/// <summary>
		/// For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this donation are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue>? FieldValues { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class DonationListResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public DonationListResponse(System.Collections.Generic.ICollection<Donation>? @payments)

		{

			this.Payments = @payments;

		}    /// <summary>
			 /// List of donations that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Donation>? Payments { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Donation type.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DonationType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Online")]
		Online = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Manual")]
		Manual = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public FinanceDocument(Contact8? @contact, CreatedBy3? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, int? @id, UpdatedBy2? @updatedBy, System.DateTimeOffset? @updatedDate, ResourceUrl? @url, float? @value)

		{

			this.Id = @id;

			this.Url = @url;

			this.Value = @value;

			this.DocumentDate = @documentDate;

			this.Contact = @contact;

			this.CreatedDate = @createdDate;

			this.CreatedBy = @createdBy;

			this.UpdatedDate = @updatedDate;

			this.UpdatedBy = @updatedBy;

		}    /// <summary>
			 /// Unique document identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ResourceUrl? Url { get; }

		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; }

		/// <summary>
		/// Document date.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact8? Contact { get; }

		/// <summary>
		/// Date and time when the document was created.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? CreatedDate { get; }

		[Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public CreatedBy3? CreatedBy { get; }

		/// <summary>
		/// Date and time when the document was last modified.  Could be null.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("UpdatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? UpdatedDate { get; }

		[Newtonsoft.Json.JsonProperty("UpdatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public UpdatedBy2? UpdatedBy { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Invoice : FinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public Invoice(Contact8? @contact, CreatedBy3? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, string? @documentNumber, EventRegistration2? @eventRegistration, int? @id, bool? @isPaid, string? @memo, System.Collections.Generic.ICollection<OrderDetailRecord>? @orderDetails, InvoiceOrderType? @orderType, double? @paidAmount, string? @publicMemo, UpdatedBy2? @updatedBy, System.DateTimeOffset? @updatedDate, ResourceUrl? @url, float? @value, System.DateTimeOffset? @voidedDate)

			: base(contact, createdBy, createdDate, documentDate, id, updatedBy, updatedDate, url, value)

		{

			this.DocumentNumber = @documentNumber;

			this.IsPaid = @isPaid;

			this.PaidAmount = @paidAmount;

			this.OrderType = @orderType;

			this.EventRegistration = @eventRegistration;

			this.OrderDetails = @orderDetails;

			this.Memo = @memo;

			this.PublicMemo = @publicMemo;

			this.VoidedDate = @voidedDate;

		}    /// <summary>
			 /// Invoice number.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DocumentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DocumentNumber { get; }

		/// <summary>
		/// Indicates if the invoice is fully paid.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsPaid { get; }

		/// <summary>
		/// Sum already paid for this invoice.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? PaidAmount { get; }

		[Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InvoiceOrderType? OrderType { get; }

		[Newtonsoft.Json.JsonProperty("EventRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventRegistration2? EventRegistration { get; }

		[Newtonsoft.Json.JsonProperty("OrderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OrderDetailRecord>? OrderDetails { get; }

		/// <summary>
		/// Internal note on invoice. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Memo { get; }

		/// <summary>
		/// Comment on invoice. Visible to both administrators and the person being invoiced.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicMemo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicMemo { get; }

		/// <summary>
		/// When invoice is voided this field indicates date of void. Voided invoice does not affect balance. For regular invoices this field is null.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("VoidedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? VoidedDate { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class InvoiceIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public InvoiceIdsResponse(System.Collections.Generic.ICollection<int>? @invoiceIdentifiers)

		{

			this.InvoiceIdentifiers = @invoiceIdentifiers;

		}    /// <summary>
			 /// List of invoices identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("InvoiceIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? InvoiceIdentifiers { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class InvoiceListResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public InvoiceListResponse(System.Collections.Generic.ICollection<Invoice>? @invoices)

		{

			this.Invoices = @invoices;

		}    /// <summary>
			 /// List of invoices that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Invoice>? Invoices { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Type of invoice.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum InvoiceOrderType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipApplication")]
		MembershipApplication = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipRenewal")]
		MembershipRenewal = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipLevelChange")]
		MembershipLevelChange = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStore")]
		OnlineStore = 6,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class InvoicesResponse : InvoiceIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public InvoicesResponse(System.Collections.Generic.ICollection<int>? @invoiceIdentifiers, System.Collections.Generic.ICollection<Invoice>? @invoices)

			: base(invoiceIdentifiers)

		{

			this.Invoices = @invoices;

		}    /// <summary>
			 /// List of invoices that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Invoice>? Invoices { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderDetailRecord
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderDetailRecord(string? @notes, OrderDetailType? @orderDetailType, SalesTaxInfo? @taxes, float? @value)

		{

			this.Value = @value;

			this.OrderDetailType = @orderDetailType;

			this.Notes = @notes;

			this.Taxes = @taxes;

		}    /// <summary>
			 /// Sum to pay for this item. Can be negative (discounts).
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; }

		[Newtonsoft.Json.JsonProperty("OrderDetailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public OrderDetailType? OrderDetailType { get; }

		/// <summary>
		/// Comment to order detail
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Notes { get; }

		[Newtonsoft.Json.JsonProperty("Taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public SalesTaxInfo? Taxes { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Type of invoice detail item.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum OrderDetailType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
		Unspecified = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"GuestsNumber")]
		GuestsNumber = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"GuestCard")]
		GuestCard = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"ExtraCost")]
		ExtraCost = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberLevel")]
		MemberLevel = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Prorate")]
		Prorate = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Discount")]
		Discount = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStoreProduct")]
		OnlineStoreProduct = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStoreShipping")]
		OnlineStoreShipping = 10,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Payment : FinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public Payment(float? @allocatedValue, string? @comment, Contact8? @contact, CreatedBy3? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, int? @donationId, System.Collections.Generic.ICollection<FieldValue>? @fieldValues, int? @id, string? @publicComment, decimal? @refundedAmount, LinkedResourceWithName? @tender, PaymentType? @type, UpdatedBy2? @updatedBy, System.DateTimeOffset? @updatedDate, ResourceUrl? @url, float? @value)

			: base(contact, createdBy, createdDate, documentDate, id, updatedBy, updatedDate, url, value)

		{

			this.Tender = @tender;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.AllocatedValue = @allocatedValue;

			this.RefundedAmount = @refundedAmount;

			this.Type = @type;

			this.DonationId = @donationId;

			this.FieldValues = @fieldValues;

		}
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName? Tender { get; }

		/// <summary>
		/// Internal note on payment. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment on payment. Visible to both administrators and payors.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		/// <summary>
		/// Total amount allocated to another finance documents (invoices or refunds).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllocatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? AllocatedValue { get; }

		/// <summary>
		/// Amount of a refund assigned to the payment.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RefundedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? RefundedAmount { get; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? Type { get; }

		/// <summary>
		/// Identifyer of Donation for payment of type DonationPayment.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("DonationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DonationId { get; }

		/// <summary>
		/// For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this donation are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue>? FieldValues { get; }

	}

	/// <summary>
	/// Thhis object describes how payment is allocated among invoices.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PaymentAllocation
	{
		[Newtonsoft.Json.JsonConstructor]

		public PaymentAllocation(int? @id, Invoice2? @invoice, System.DateTimeOffset? @invoiceDate, string? @invoiceNumber, Payment3? @payment, System.DateTimeOffset? @paymentDate, PaymentType? @paymentType, Refund2? @refund, System.DateTimeOffset? @refundDate, double? @value)

		{

			this.Id = @id;

			this.Value = @value;

			this.Invoice = @invoice;

			this.InvoiceDate = @invoiceDate;

			this.InvoiceNumber = @invoiceNumber;

			this.Payment = @payment;

			this.PaymentDate = @paymentDate;

			this.PaymentType = @paymentType;

			this.Refund = @refund;

			this.RefundDate = @refundDate;

		}    /// <summary>
			 /// Unique identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		/// <summary>
		/// allocated amount.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Value { get; }

		[Newtonsoft.Json.JsonProperty("Invoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Invoice2? Invoice { get; }

		/// <summary>
		/// Invoice date
		/// </summary>
		[Newtonsoft.Json.JsonProperty("InvoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? InvoiceDate { get; }

		/// <summary>
		/// Invoice number.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("InvoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? InvoiceNumber { get; }

		[Newtonsoft.Json.JsonProperty("Payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Payment3? Payment { get; }

		/// <summary>
		/// Payment date
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? PaymentDate { get; }

		[Newtonsoft.Json.JsonProperty("PaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? PaymentType { get; }

		[Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Refund2? Refund { get; }

		/// <summary>
		/// Refund date
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RefundDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? RefundDate { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PaymentIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public PaymentIdsResponse(System.Collections.Generic.ICollection<int>? @paymentIdentifiers)

		{

			this.PaymentIdentifiers = @paymentIdentifiers;

		}    /// <summary>
			 /// List of payment identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("PaymentIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? PaymentIdentifiers { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PaymentListResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public PaymentListResponse(System.Collections.Generic.ICollection<Payment>? @payments)

		{

			this.Payments = @payments;

		}    /// <summary>
			 /// List of payments that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Payment>? Payments { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PaymentsResponse : PaymentIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public PaymentsResponse(System.Collections.Generic.ICollection<int>? @paymentIdentifiers, System.Collections.Generic.ICollection<Payment>? @payments)

			: base(paymentIdentifiers)

		{

			this.Payments = @payments;

		}    /// <summary>
			 /// List of payments that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Payment>? Payments { get; }

	}

	/// <summary>
	/// Payment type.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum PaymentType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
		Unknown = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoicePayment")]
		InvoicePayment = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"DonationPayment")]
		DonationPayment = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Refund : FinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public Refund(string? @comment, Contact8? @contact, CreatedBy3? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, int? @id, string? @publicComment, float? @settledValue, LinkedResourceWithName? @tender, UpdatedBy2? @updatedBy, System.DateTimeOffset? @updatedDate, ResourceUrl? @url, float? @value)

			: base(contact, createdBy, createdDate, documentDate, id, updatedBy, updatedDate, url, value)

		{

			this.Tender = @tender;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.SettledValue = @settledValue;

		}
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName? Tender { get; }

		/// <summary>
		/// Internal note on refund. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment on refund. Visible to both administrators and person being refunded.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		/// <summary>
		/// Total amount allocated to another finance documents (payments or donations).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SettledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? SettledValue { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RefundIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public RefundIdsResponse(System.Collections.Generic.ICollection<int>? @refundIdentifiers)

		{

			this.RefundIdentifiers = @refundIdentifiers;

		}    /// <summary>
			 /// List of refund identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("RefundIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int>? RefundIdentifiers { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RefundListResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public RefundListResponse(System.Collections.Generic.ICollection<Refund>? @refunds)

		{

			this.Refunds = @refunds;

		}    /// <summary>
			 /// List of refunds that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Refunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Refund>? Refunds { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RefundParam
	{
		[Newtonsoft.Json.JsonConstructor]

		public RefundParam(int? @refundId)

		{

			this.RefundId = @refundId;

		}    /// <summary>
			 /// Unique refund identifier.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("RefundId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RefundId { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class RefundsResponse : RefundIdsResponse
	{
		[Newtonsoft.Json.JsonConstructor]

		public RefundsResponse(System.Collections.Generic.ICollection<int>? @refundIdentifiers, System.Collections.Generic.ICollection<Refund>? @refunds)

			: base(refundIdentifiers)

		{

			this.Refunds = @refunds;

		}    /// <summary>
			 /// List of refunds that match request criteria.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Refunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Refund>? Refunds { get; }

	}

	/// <summary>
	/// Taxes applied to the invoice according to account Tax Rules settings.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SalesTax
	{
		[Newtonsoft.Json.JsonConstructor]

		public SalesTax(string? @name, string? @publicId, double? @rate)

		{

			this.Name = @name;

			this.PublicId = @publicId;

			this.Rate = @rate;

		}    /// <summary>
			 /// Internal account tax name.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		/// <summary>
		/// Public tax ID (displayed on invoices).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicId { get; }

		/// <summary>
		/// Tax rate value.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Rate { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Describe taxes applied to this invoice item
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SalesTaxInfo
	{
		[Newtonsoft.Json.JsonConstructor]

		public SalesTaxInfo(double? @amount, double? @calculatedTax1, double? @calculatedTax2, double? @netAmount, double? @roundedAmount, Tax1? @tax1, Tax2? @tax2)

		{

			this.Amount = @amount;

			this.CalculatedTax1 = @calculatedTax1;

			this.CalculatedTax2 = @calculatedTax2;

			this.NetAmount = @netAmount;

			this.RoundedAmount = @roundedAmount;

			this.Tax1 = @tax1;

			this.Tax2 = @tax2;

		}    /// <summary>
			 /// total gross amount including all taxes
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Amount { get; }

		/// <summary>
		/// tax 1 amount
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CalculatedTax1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? CalculatedTax1 { get; }

		/// <summary>
		/// tax 2 amount
		/// </summary>
		[Newtonsoft.Json.JsonProperty("CalculatedTax2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? CalculatedTax2 { get; }

		/// <summary>
		/// net amount from invoice items
		/// </summary>
		[Newtonsoft.Json.JsonProperty("NetAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? NetAmount { get; }

		/// <summary>
		/// rounded total amount including all taxes
		/// </summary>
		[Newtonsoft.Json.JsonProperty("RoundedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? RoundedAmount { get; }

		[Newtonsoft.Json.JsonProperty("Tax1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Tax1? Tax1 { get; }

		[Newtonsoft.Json.JsonProperty("Tax2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Tax2? Tax2 { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Tender : LinkedResourceWithName
	{
		[Newtonsoft.Json.JsonConstructor]

		public Tender(int? @displayPosition, int? @id, bool? @isCustom, string? @name, string? @url)

			: base(id, name, url)

		{

			this.DisplayPosition = @displayPosition;

			this.IsCustom = @isCustom;

		}    /// <summary>
			 /// Display position in UI.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("DisplayPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DisplayPosition { get; }

		/// <summary>
		/// Indicates that this tender is created by account admin, otherwise the tender is built-in.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("IsCustom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCustom { get; }

	}

	/// <summary>
	/// Collection of tenders.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class TendersResponse : System.Collections.ObjectModel.Collection<Tender>
	{
		[Newtonsoft.Json.JsonConstructor]

		public TendersResponse()

			: base()

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdateInvoiceParams : CreateInvoiceParams
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdateInvoiceParams(Contact5? @contact, CreatedBy2? @createdBy, System.DateTimeOffset? @documentDate, string? @documentNumber, int? @id, string? @memo, System.Collections.Generic.ICollection<OrderDetailRecord>? @orderDetails, InvoiceOrderType? @orderType, string? @publicMemo, UpdatedBy? @updatedBy, System.DateTimeOffset? @updatedDate, float? @value)

			: base(contact, createdBy, documentDate, documentNumber, memo, orderDetails, orderType, publicMemo, updatedBy, updatedDate, value)

		{

			this.Id = @id;

		}    /// <summary>
			 /// Identifier of the invoice to update
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdatePaymentParams : FinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdatePaymentParams(float? @allocatedValue, string? @comment, Contact8? @contact, CreatedBy3? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, int? @id, string? @publicComment, LinkedResourceWithName? @tender, PaymentType? @type, UpdatedBy2? @updatedBy, System.DateTimeOffset? @updatedDate, ResourceUrl? @url, float? @value)

			: base(contact, createdBy, createdDate, documentDate, id, updatedBy, updatedDate, url, value)

		{

			this.Tender = @tender;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.AllocatedValue = @allocatedValue;

			this.Type = @type;

		}
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName? Tender { get; }

		/// <summary>
		/// Internal note on payment. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment on payment. Visible to both administrators and payors.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		/// <summary>
		/// Total amount allocated to another finance documents (invoices or refunds).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllocatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? AllocatedValue { get; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? Type { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdateRefundParams : FinanceDocument
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdateRefundParams(string? @comment, Contact8? @contact, CreatedBy3? @createdBy, System.DateTimeOffset? @createdDate, System.DateTimeOffset? @documentDate, int? @id, string? @publicComment, float? @settledValue, LinkedResourceWithName? @tender, UpdatedBy2? @updatedBy, System.DateTimeOffset? @updatedDate, ResourceUrl? @url, float? @value)

			: base(contact, createdBy, createdDate, documentDate, id, updatedBy, updatedDate, url, value)

		{

			this.Tender = @tender;

			this.Comment = @comment;

			this.PublicComment = @publicComment;

			this.SettledValue = @settledValue;

		}
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName? Tender { get; }

		/// <summary>
		/// Internal note on refund. Visible to administrators only.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		/// <summary>
		/// Comment on refund. Visible to both administrators and person being refunded.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? PublicComment { get; }

		/// <summary>
		/// The previously settled amount of the payment.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SettledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? SettledValue { get; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Order
	{
		[Newtonsoft.Json.JsonConstructor]

		public Order(BillingPerson? @billingPerson, string? @comment, int @contactId, System.DateTimeOffset? @created, Currency? @currency, OrderDeliveryOption? @deliveryOption, OrderExternalNote? @externalNote, OrderInternalNote? @internalNote, int? @invoiceId, int? @invoiceNumber, bool @isTaxesApplied, bool @isTaxesIncludedTotal, string? @number, PaymentStatus @paymentStatus, System.Collections.Generic.ICollection<OrderProduct>? @products, ShippingAddress? @shippingAddress, OrderStatus @status, decimal @subTotal, decimal @total, string? @url)

		{

			this.Url = @url;

			this.ContactId = @contactId;

			this.Number = @number;

			this.Total = @total;

			this.SubTotal = @subTotal;

			this.IsTaxesApplied = @isTaxesApplied;

			this.IsTaxesIncludedTotal = @isTaxesIncludedTotal;

			this.InvoiceId = @invoiceId;

			this.InvoiceNumber = @invoiceNumber;

			this.Status = @status;

			this.PaymentStatus = @paymentStatus;

			this.InternalNote = @internalNote;

			this.Products = @products;

			this.ShippingAddress = @shippingAddress;

			this.BillingPerson = @billingPerson;

			this.Comment = @comment;

			this.ExternalNote = @externalNote;

			this.Currency = @currency;

			this.Created = @created;

			this.DeliveryOption = @deliveryOption;

		}
		[Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Url { get; }

		[Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Always)]
		public int ContactId { get; }

		[Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Number { get; }

		[Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
		public decimal Total { get; }

		[Newtonsoft.Json.JsonProperty("subTotal", Required = Newtonsoft.Json.Required.Always)]
		public decimal SubTotal { get; }

		[Newtonsoft.Json.JsonProperty("isTaxesApplied", Required = Newtonsoft.Json.Required.Always)]
		public bool IsTaxesApplied { get; }

		[Newtonsoft.Json.JsonProperty("isTaxesIncludedTotal", Required = Newtonsoft.Json.Required.Always)]
		public bool IsTaxesIncludedTotal { get; }

		[Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? InvoiceId { get; }

		[Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? InvoiceNumber { get; }

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public OrderStatus Status { get; }

		[Newtonsoft.Json.JsonProperty("paymentStatus", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentStatus PaymentStatus { get; }

		[Newtonsoft.Json.JsonProperty("internalNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public OrderInternalNote? InternalNote { get; }

		[Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OrderProduct>? Products { get; }

		[Newtonsoft.Json.JsonProperty("shippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ShippingAddress? ShippingAddress { get; }

		[Newtonsoft.Json.JsonProperty("billingPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public BillingPerson? BillingPerson { get; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Comment { get; }

		[Newtonsoft.Json.JsonProperty("externalNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public OrderExternalNote? ExternalNote { get; }

		[Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Currency? Currency { get; }

		[Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? Created { get; }

		[Newtonsoft.Json.JsonProperty("deliveryOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public OrderDeliveryOption? DeliveryOption { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum OrderStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"UNFULFILLED")]
		Unfulfilled = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"FULFILLED")]
		Fulfilled = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
		Cancelled = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum PaymentStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"UNPAID")]
		Unpaid = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"PAID")]
		Paid = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PARTIALLYPAID")]
		PartiallyPaid = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"NOINVOICE")]
		NoInvoice = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"FREE")]
		Free = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderInternalNote
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderInternalNote(string? @text)

		{

			this.Text = @text;

		}
		[Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Text { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderProduct
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderProduct(decimal @amount, OrderDigitalProduct? @digitalProduct, decimal @price, int @productId, OrderProductType @productType, int @quantity, string? @title, int? @variantId)

		{

			this.Title = @title;

			this.Price = @price;

			this.Amount = @amount;

			this.ProductId = @productId;

			this.VariantId = @variantId;

			this.Quantity = @quantity;

			this.ProductType = @productType;

			this.DigitalProduct = @digitalProduct;

		}
		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; }

		[Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
		public decimal Price { get; }

		[Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
		public decimal Amount { get; }

		[Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Always)]
		public int ProductId { get; }

		[Newtonsoft.Json.JsonProperty("variantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? VariantId { get; }

		[Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
		public int Quantity { get; }

		[Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public OrderProductType ProductType { get; }

		[Newtonsoft.Json.JsonProperty("digitalProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public OrderDigitalProduct? DigitalProduct { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum OrderProductType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"PHYSICAL")]
		Physical = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"DIGITAL")]
		Digital = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderDigitalProduct
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderDigitalProduct(string? @code, string? @emailNote, string? @url)

		{

			this.Url = @url;

			this.Code = @code;

			this.EmailNote = @emailNote;

		}
		[Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Url { get; }

		[Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Code { get; }

		[Newtonsoft.Json.JsonProperty("emailNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EmailNote { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ShippingAddress
	{
		[Newtonsoft.Json.JsonConstructor]

		public ShippingAddress(string? @addressLine1, string? @addressLine2, string? @city, Country? @country, string? @province, string? @zip)

		{

			this.AddressLine1 = @addressLine1;

			this.AddressLine2 = @addressLine2;

			this.Country = @country;

			this.Province = @province;

			this.City = @city;

			this.Zip = @zip;

		}
		[Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? AddressLine1 { get; }

		[Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? AddressLine2 { get; }

		[Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Country? Country { get; }

		[Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Province { get; }

		[Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? City { get; }

		[Newtonsoft.Json.JsonProperty("zip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Zip { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Country
	{
		[Newtonsoft.Json.JsonConstructor]

		public Country(int @allowedPaymentMethods, string? @codeAlpha2, string? @codeAlpha3, int? @codeNumeric, string? @name)

		{

			this.Name = @name;

			this.CodeAlpha2 = @codeAlpha2;

			this.CodeAlpha3 = @codeAlpha3;

			this.CodeNumeric = @codeNumeric;

			this.AllowedPaymentMethods = @allowedPaymentMethods;

		}
		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		[Newtonsoft.Json.JsonProperty("codeAlpha2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? CodeAlpha2 { get; }

		[Newtonsoft.Json.JsonProperty("codeAlpha3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? CodeAlpha3 { get; }

		[Newtonsoft.Json.JsonProperty("codeNumeric", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CodeNumeric { get; }

		[Newtonsoft.Json.JsonProperty("allowedPaymentMethods", Required = Newtonsoft.Json.Required.Always)]
		public int AllowedPaymentMethods { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class BillingPerson
	{
		[Newtonsoft.Json.JsonConstructor]

		public BillingPerson(int @contactId, string? @displayName, string? @email, string? @firstName, string? @lastName, string? @phone)

		{

			this.ContactId = @contactId;

			this.Email = @email;

			this.FirstName = @firstName;

			this.LastName = @lastName;

			this.DisplayName = @displayName;

			this.Phone = @phone;

		}
		[Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Always)]
		public int ContactId { get; }

		[Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; }

		[Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; }

		[Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? DisplayName { get; }

		[Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Phone { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderExternalNote
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderExternalNote(string? @text)

		{

			this.Text = @text;

		}
		[Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Text { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderDeliveryOption
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderDeliveryOption(string? @description, decimal? @price, string? @title, DeliveryType @type)

		{

			this.Type = @type;

			this.Title = @title;

			this.Description = @description;

			this.Price = @price;

		}
		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public DeliveryType Type { get; }

		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		[Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? Price { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DeliveryType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"SHIPPING")]
		Shipping = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"PICKUP")]
		Pickup = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderSetStatusResult
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderSetStatusResult(bool? @isCustomerNotified)

		{

			this.IsCustomerNotified = @isCustomerNotified;

		}
		[Newtonsoft.Json.JsonProperty("isCustomerNotified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCustomerNotified { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class OrderFulfilment
	{
		[Newtonsoft.Json.JsonConstructor]

		public OrderFulfilment(OrderStatus @status)

		{

			this.Status = @status;

		}
		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public OrderStatus Status { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Product
	{
		[Newtonsoft.Json.JsonConstructor]

		public Product(System.DateTimeOffset? @created, string? @description, DigitalProduct? @digitalProduct, int @id, bool @outOfStock, System.Collections.Generic.ICollection<string>? @pictures, Price? @price, System.Collections.Generic.ICollection<ProductOption>? @productOptions, System.Collections.Generic.ICollection<ProductVariant>? @productVariants, ProductStatus @status, int @stock, System.Collections.Generic.ICollection<string>? @tags, string? @title, int @totalStock, bool @trackInventory, ProductType @type, string? @url)

		{

			this.Url = @url;

			this.Id = @id;

			this.Title = @title;

			this.Description = @description;

			this.Price = @price;

			this.Status = @status;

			this.Type = @type;

			this.Pictures = @pictures;

			this.Tags = @tags;

			this.TrackInventory = @trackInventory;

			this.Stock = @stock;

			this.ProductOptions = @productOptions;

			this.ProductVariants = @productVariants;

			this.OutOfStock = @outOfStock;

			this.TotalStock = @totalStock;

			this.DigitalProduct = @digitalProduct;

			this.Created = @created;

		}
		[Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Url { get; }

		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; }

		[Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Price? Price { get; }

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ProductStatus Status { get; }

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ProductType Type { get; }

		[Newtonsoft.Json.JsonProperty("pictures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string>? Pictures { get; }

		[Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string>? Tags { get; }

		[Newtonsoft.Json.JsonProperty("trackInventory", Required = Newtonsoft.Json.Required.Always)]
		public bool TrackInventory { get; }

		[Newtonsoft.Json.JsonProperty("stock", Required = Newtonsoft.Json.Required.Always)]
		public int Stock { get; }

		[Newtonsoft.Json.JsonProperty("productOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ProductOption>? ProductOptions { get; }

		[Newtonsoft.Json.JsonProperty("productVariants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ProductVariant>? ProductVariants { get; }

		[Newtonsoft.Json.JsonProperty("outOfStock", Required = Newtonsoft.Json.Required.Always)]
		public bool OutOfStock { get; }

		[Newtonsoft.Json.JsonProperty("totalStock", Required = Newtonsoft.Json.Required.Always)]
		public int TotalStock { get; }

		[Newtonsoft.Json.JsonProperty("digitalProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public DigitalProduct? DigitalProduct { get; }

		[Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? Created { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Price
	{
		[Newtonsoft.Json.JsonConstructor]

		public Price(decimal? @members, decimal @regular)

		{

			this.Regular = @regular;

			this.Members = @members;

		}
		[Newtonsoft.Json.JsonProperty("regular", Required = Newtonsoft.Json.Required.Always)]
		public decimal Regular { get; }

		[Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? Members { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ProductStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"ADMINONLY")]
		AdminOnly = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"PUBLIC")]
		Public = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ProductType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"PHYSICAL")]
		Physical = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"DIGITAL")]
		Digital = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ProductOption
	{
		[Newtonsoft.Json.JsonConstructor]

		public ProductOption(string? @title, System.Collections.Generic.ICollection<string>? @values)

		{

			this.Title = @title;

			this.Values = @values;

		}
		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; }

		[Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string>? Values { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ProductVariant
	{
		[Newtonsoft.Json.JsonConstructor]

		public ProductVariant(int @id, bool @outOfStock, System.Collections.Generic.ICollection<ProductVariantOptionValue>? @productVariantOptionValues, int @stock, bool @trackInventory)

		{

			this.Id = @id;

			this.ProductVariantOptionValues = @productVariantOptionValues;

			this.Stock = @stock;

			this.OutOfStock = @outOfStock;

			this.TrackInventory = @trackInventory;

		}
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		[Newtonsoft.Json.JsonProperty("productVariantOptionValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ProductVariantOptionValue>? ProductVariantOptionValues { get; }

		[Newtonsoft.Json.JsonProperty("stock", Required = Newtonsoft.Json.Required.Always)]
		public int Stock { get; }

		[Newtonsoft.Json.JsonProperty("outOfStock", Required = Newtonsoft.Json.Required.Always)]
		public bool OutOfStock { get; }

		[Newtonsoft.Json.JsonProperty("trackInventory", Required = Newtonsoft.Json.Required.Always)]
		public bool TrackInventory { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ProductVariantOptionValue
	{
		[Newtonsoft.Json.JsonConstructor]

		public ProductVariantOptionValue(string? @title, string? @value)

		{

			this.Title = @title;

			this.Value = @value;

		}
		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; }

		[Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Value { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class DigitalProduct
	{
		[Newtonsoft.Json.JsonConstructor]

		public DigitalProduct(string? @emailNote, ProductFile? @productFile, ProductLink? @productLink, DigitalProductType @type)

		{

			this.Type = @type;

			this.ProductFile = @productFile;

			this.ProductLink = @productLink;

			this.EmailNote = @emailNote;

		}
		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public DigitalProductType Type { get; }

		[Newtonsoft.Json.JsonProperty("productFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ProductFile? ProductFile { get; }

		[Newtonsoft.Json.JsonProperty("productLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ProductLink? ProductLink { get; }

		[Newtonsoft.Json.JsonProperty("emailNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? EmailNote { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DigitalProductType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"FILE")]
		File = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"LINK")]
		Link = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ProductFile
	{
		[Newtonsoft.Json.JsonConstructor]

		public ProductFile(string? @name)

		{

			this.Name = @name;

		}
		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ProductLink
	{
		[Newtonsoft.Json.JsonConstructor]

		public ProductLink(string? @code, string? @url)

		{

			this.Url = @url;

			this.Code = @code;

		}
		[Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Url { get; }

		[Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Code { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PagingSettings
	{
		[Newtonsoft.Json.JsonConstructor]

		public PagingSettings(int? @skip, int? @top)

		{

			this.Skip = @skip;

			this.Top = @top;

		}
		[Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Skip { get; }

		[Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Top { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum Method
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Email")]
		Email = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Sms")]
		Sms = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum Method2
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Email")]
		Email = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Sms")]
		Sms = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum Size
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Original")]
		Original = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Small")]
		Small = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Medium")]
		Medium = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Medium1")]
		Medium1 = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Large")]
		Large = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum FilterObjectType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Contact")]
		Contact = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Event")]
		Event = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
		Invoice = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Payment")]
		Payment = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Refund")]
		Refund = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Response
	{
		[Newtonsoft.Json.JsonConstructor]

		public Response(string? @picture0, string? @picture1)

		{

			this.Picture0 = @picture0;

			this.Picture1 = @picture1;

		}    /// <summary>
			 /// Picture guid
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("picture0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Picture0 { get; }

		/// <summary>
		/// Picture guid
		/// </summary>
		[Newtonsoft.Json.JsonProperty("picture1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Picture1 { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Administrator : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Administrator(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipLevel2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipLevel2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipLevel3 : LinkedResourceWithName
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipLevel3(int? @id, string? @name, string? @url)

			: base(id, name, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ContactStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipLevel4 : LinkedResourceWithName
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipLevel4(int? @id, string? @name, string? @url)

			: base(id, name, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ContactExtendedMembershipInfoStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class InitialQuery
	{
		[Newtonsoft.Json.JsonConstructor]

		public InitialQuery(string? @filterExpression, string? @objectType, bool? @returnIds, string? @selectExpression)

		{

			this.ObjectType = @objectType;

			this.FilterExpression = @filterExpression;

			this.SelectExpression = @selectExpression;

			this.ReturnIds = @returnIds;

		}    /// <summary>
			 /// Object type which was requested. In this case it is always Contact.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("ObjectType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ObjectType { get; }

		/// <summary>
		/// Value of $filter parameter passed into API.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("FilterExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FilterExpression { get; }

		/// <summary>
		/// Value of $select parameter passed into API.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("SelectExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? SelectExpression { get; }

		/// <summary>
		/// Indicates if client requested only a list of identifiers, instead of full list of contacts.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ReturnIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ReturnIds { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ContactsAsyncResponseProcessingState
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
		Waiting = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Processing")]
		Processing = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Complete")]
		Complete = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Failed")]
		Failed = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipLevel5 : LinkedResourceWithName
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipLevel5(int? @id, string? @name, string? @url)

			: base(id, name, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ContactsMeStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ExistsInLevels
	{
		[Newtonsoft.Json.JsonConstructor]

		public ExistsInLevels(int? @id)

		{

			this.Id = @id;

		}    /// <summary>
			 /// Id of membership level
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum CreateContactFieldParamsFieldType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Text")]
		Text = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MultilineText")]
		MultilineText = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleChoice")]
		MultipleChoice = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleChoiceWithExtraCharge")]
		MultipleChoiceWithExtraCharge = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"RadioButtons")]
		RadioButtons = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"RadioButtonsWithExtraCharge")]
		RadioButtonsWithExtraCharge = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Dropdown")]
		Dropdown = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Picture")]
		Picture = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"RulesAndTerms")]
		RulesAndTerms = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"Date")]
		Date = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"ExtraChargeCalculation")]
		ExtraChargeCalculation = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"SectionDivider")]
		SectionDivider = 11,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class MembershipLevel6
	{
		[Newtonsoft.Json.JsonConstructor]

		public MembershipLevel6(int? @id)

		{

			this.Id = @id;

		}    /// <summary>
			 /// ID of membership level to assign.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum CreateContactParamsStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class PendingMembershipInvoice : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public PendingMembershipInvoice(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ExtendedMembershipInfoPendingMembershipOrderStatusType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Invisible")]
		Invisible = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNoCorrespondingInvoice")]
		PendingNoCorrespondingInvoice = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNotPaidYet")]
		PendingNotPaidYet = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoicePaidManualApprovalRequired")]
		InvoicePaidManualApprovalRequired = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"FreeOrderManualApprovalRequired")]
		FreeOrderManualApprovalRequired = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoiceNotPaidButOperationApproved")]
		InvoiceNotPaidButOperationApproved = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleInvoiceNotPaidMemberActivated")]
		MultipleInvoiceNotPaidMemberActivated = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleInvoiceNotPaidMemberPending")]
		MultipleInvoiceNotPaidMemberPending = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ExtraChargeMultiplierType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"ItemPrice")]
		ItemPrice = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Percentage")]
		Percentage = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum MembershipLevelType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Individual")]
		Individual = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Bundle")]
		Bundle = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApplicationReview
	{
		[Newtonsoft.Json.JsonConstructor]

		public ApplicationReview(bool? @adminApprovalRequired, bool? @prepayRequired)

		{

			this.PrepayRequired = @prepayRequired;

			this.AdminApprovalRequired = @adminApprovalRequired;

		}    /// <summary>
			 /// If true, membership fee should be received in full before application is activated. Else, approved memberships activate immediately, regardless of payment status.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("PrepayRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? PrepayRequired { get; }

		/// <summary>
		/// 
		/// <br/>Indicates that account administrator should approve membership application.
		/// <br/>False means that all applications are considered approved when they are submitted.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AdminApprovalRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AdminApprovalRequired { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Dates
	{
		[Newtonsoft.Json.JsonConstructor]

		public Dates(int? @day, int? @month)

		{

			this.Month = @month;

			this.Day = @day;

		}    /// <summary>
			 /// Month of a year, 1-12
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public int? Month { get; }

		/// <summary>
		/// Day of a month
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public int? Day { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum MembershipRenewalPeriodKind
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Never")]
		Never = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
		Monthly = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
		Quarterly = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"TwiceAYear")]
		TwiceAYear = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"EveryNYears")]
		EveryNYears = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EmailRecipientType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"IndividualContactRecipient")]
		IndividualContactRecipient = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"IndividualEventRegistrationRecipient")]
		IndividualEventRegistrationRecipient = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees_CheckedIn")]
		EventAttendees_CheckedIn = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees_NotCheckedIn")]
		EventAttendees_NotCheckedIn = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees_Paid")]
		EventAttendees_Paid = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees_NotPaid")]
		EventAttendees_NotPaid = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees_All")]
		EventAttendees_All = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees_Selected")]
		EventAttendees_Selected = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Contacts_All")]
		Contacts_All = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"Contacts_Selected")]
		Contacts_Selected = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"Contacts_SavedSearch")]
		Contacts_SavedSearch = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"Members_All")]
		Members_All = 11,

		[System.Runtime.Serialization.EnumMember(Value = @"Members_SavedSearch")]
		Members_SavedSearch = 12,

		[System.Runtime.Serialization.EnumMember(Value = @"SentEmailRecipient")]
		SentEmailRecipient = 13,

		[System.Runtime.Serialization.EnumMember(Value = @"EventWaitlist_All")]
		EventWaitlist_All = 14,

		[System.Runtime.Serialization.EnumMember(Value = @"EventWaitlist_Selected")]
		EventWaitlist_Selected = 15,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact2
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact2(int @id)

		{

			this.Id = @id;

		}
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Event2
	{
		[Newtonsoft.Json.JsonConstructor]

		public Event2(int @id)

		{

			this.Id = @id;

		}
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventEditParamsEventType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Reqular")]
		Reqular = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RSVP")]
		RSVP = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Organizer
	{
		[Newtonsoft.Json.JsonConstructor]

		public Organizer(int? @id)

		{

			this.Id = @id;

		}
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Reqular")]
		Reqular = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RSVP")]
		RSVP = 1,

	}

	// It's trying to use this as a typedef, can't do that to an enum in C#
	//[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	//public partial class VisibleTo : ContactFieldAccessLevel
	//{
	//	[Newtonsoft.Json.JsonConstructor]

	//	public VisibleTo()

	//		: base()

	//	{

	//	}
	//}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Organizer2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Organizer2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventGuestRegistrationSettingsCreateContactMode
	{

		[System.Runtime.Serialization.EnumMember(Value = @"NeverCreateContact")]
		NeverCreateContact = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"CreateContactForAllGuests")]
		CreateContactForAllGuests = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CreateContactForGuestsWithEmail")]
		CreateContactForGuestsWithEmail = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventRegistrationFieldDescriptionKind
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Common")]
		Common = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Custom")]
		Custom = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventWaitlistSettingsInformationToCollect
	{

		[System.Runtime.Serialization.EnumMember(Value = @"None")]
		None = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"NameAndEmail")]
		NameAndEmail = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"ContactInformation")]
		ContactInformation = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"RegistrationInformation")]
		RegistrationInformation = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum EventWaitlistSettingsWaitlistType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"None")]
		None = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Manual")]
		Manual = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Auto")]
		Auto = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact3 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact3(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Document : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Document(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum AuditLogItemDocumentAction
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Created")]
		Created = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Changed")]
		Changed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
		Deleted = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Voided")]
		Voided = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Custom")]
		Custom = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum AuditLogItemDocumentType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
		Invoice = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Payment")]
		Payment = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CreditMemo")]
		CreditMemo = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Refund")]
		Refund = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Adjustment")]
		Adjustment = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"DonationPayment")]
		DonationPayment = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoicePayment")]
		InvoicePayment = 6,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum AuditLogItemOrderType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipApplication")]
		MembershipApplication = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipRenewal")]
		MembershipRenewal = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipLevelChange")]
		MembershipLevelChange = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"ChangeBillingPlan")]
		ChangeBillingPlan = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"ChangeBillingInfo")]
		ChangeBillingInfo = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"LockInPlan")]
		LockInPlan = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"AssociationRenewal")]
		AssociationRenewal = 8,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum AuditLogItemSeverity
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Verbose")]
		Verbose = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Information")]
		Information = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"AttentionRequired")]
		AttentionRequired = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Warning")]
		Warning = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Error")]
		Error = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Critical")]
		Critical = 5,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact4 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact4(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreatedBy : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreatedBy(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact5
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact5(int? @id)

		{

			this.Id = @id;

		}    /// <summary>
			 /// ID of contact to whom the invoice is assigned.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreatedBy2
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreatedBy2(int? @id)

		{

			this.Id = @id;

		}    /// <summary>
			 /// ID of contact who created the document. Could be null.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdatedBy
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdatedBy(int? @id)

		{

			this.Id = @id;

		}    /// <summary>
			 /// ID of contact who modified the document. Could be null.
			 /// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; }

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact6 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact6(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact7 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact7(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Payment2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Payment2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Contact8 : LinkedResourceWithName
	{
		[Newtonsoft.Json.JsonConstructor]

		public Contact8(int? @id, string? @name, string? @url)

			: base(id, name, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreatedBy3 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public CreatedBy3(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class UpdatedBy2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public UpdatedBy2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class EventRegistration2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public EventRegistration2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Invoice2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Invoice2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Payment3 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Payment3(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Refund2 : LinkedResource
	{
		[Newtonsoft.Json.JsonConstructor]

		public Refund2(int? @id, string? @url)

			: base(id, url)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Tax1 : SalesTax
	{
		[Newtonsoft.Json.JsonConstructor]

		public Tax1(string? @name, string? @publicId, double? @rate)

			: base(name, publicId, rate)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Tax2 : SalesTax
	{
		[Newtonsoft.Json.JsonConstructor]

		public Tax2(string? @name, string? @publicId, double? @rate)

			: base(name, publicId, rate)

		{

		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
	{
		public DateFormatConverter()
		{
			DateTimeFormat = "yyyy-MM-dd";
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FileParameter
	{
		public FileParameter(System.IO.Stream data)
			: this(data, null, null)
		{
		}

		public FileParameter(System.IO.Stream data, string? fileName)
			: this(data, fileName, null)
		{
		}

		public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
		{
			Data = data;
			FileName = fileName;
			ContentType = contentType;
		}

		public System.IO.Stream Data { get; private set; }

		public string? FileName { get; private set; }

		public string? ContentType { get; private set; }
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FileResponse : System.IDisposable
	{
		private System.IDisposable? _client;
		private System.IDisposable? _response;

		public int StatusCode { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public System.IO.Stream Stream { get; private set; }

		public bool IsPartial
		{
			get { return StatusCode == 206; }
		}

		public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
		{
			StatusCode = statusCode;
			Headers = headers;
			Stream = stream;
			_client = client;
			_response = response;
		}

		public void Dispose()
		{
			Stream.Dispose();
			if (_response != null)
				_response.Dispose();
			if (_client != null)
				_client.Dispose();
		}
	}


	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class WildApricotException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string? Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public WildApricotException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class WildApricotException<TResult> : WildApricotException
	{
		public TResult Result { get; private set; }

		public WildApricotException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
