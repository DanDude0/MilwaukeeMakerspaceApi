//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace WildApricot
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class WildApricotClient
	{
		private string _baseUrl = "https://api.wildapricot.org/v2.2";
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		//public WildApricotClient(System.Net.Http.HttpClient httpClient)
		//{
		//	_httpClient = httpClient;
		//	_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
		//}

		private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Base URL for specific API version.</summary>
		/// <returns>Array of resources</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Resource>> GetApiResourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Resource>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>List of available accounts</summary>
		/// <returns>An array of accounts</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Details for specific account</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Account details</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Account> GetAccountAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Contacts list</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="async">Controls whether the API call is perform asynchronously. Default value if true.</param>
		/// <param name="resultId">This parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.</param>
		/// <param name="filter">Filters the results of the Contacts API call so that only those records that match the filter criteria are included.
		/// See [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.</param>
		/// <param name="select">Controls which fields are returned in the Contacts API call.  The field names correspond to the fields returned by the [ContactFields API call](#/Contacts.CustomFields/GetContactFieldDefinitions), not the field names that appear in Wild Apricot. Multiple field names are separated by commas, and field names with spaces or special characters are enclosed in single quotation marks.</param>
		/// <param name="sort">Ordering expression. There are 2 sorting options - **Name** and  **MemberSince**. And also 2 direction modifiers - **asc** and **desc**.
		/// ---
		/// Example of valid expression - MemberSince asc</param>
		/// <param name="simpleQuery">simpleQuery is a parameter which allows you to search for contacts by matching a substring in first name, last name, organization, email or phone. This is simpler than using $filter parameter.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <param name="count">Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">When idsOnly specified, the API returns only a list of identifiers matching criteria.</param>
		/// <returns>A wrapper object, which contains a list of contacts, contact identifiers, contacts count or information about asynchronous search request.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ContactsResponse> GetContactsListAsync(double accountId, bool? async = null, string resultId = null, string filter = null, string select = null, string sort = null, string simpleQuery = null, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contacts?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (async != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$async") + "=").Append(System.Uri.EscapeDataString(ConvertToString(async, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (resultId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("resultId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resultId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (select != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$select") + "=").Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (sort != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (simpleQuery != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("simpleQuery") + "=").Append(System.Uri.EscapeDataString(ConvertToString(simpleQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (count != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactsResponse>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Create a new contact or member record</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contact">- Values for read-only or unrecognized fields will be ignored.
		/// - In order to **assign membership**
		///   - set MembershipEnabled=true
		///   - set MembershipLevel.Id to id of desired level
		/// 
		/// - In order to **assign bundle** membership
		///   - set MembershipEnabled=true
		///   - set MembershipLevel.Id to id of some bundle level
		///   - set 'Member role' field value to json '{ "Label": "ROLE" }' where ROLE is "Bundle administrator" or "Bundle member"
		///   - For bundle member set field 'Bundle ID' to value of bundle identifier. The bundle ID is returned by the [Bundles API call](https://gethelp.wildapricot.com/en/articles/504) when using it to retrieve bundle information for a particular membership level.</param>
		/// <returns>Returns created contact record.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ContactExtendedMembershipInfo> CreateContactAsync(double accountId, CreateContactParams contact, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contact == null)
				throw new System.ArgumentNullException("contact");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contacts");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contact, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactExtendedMembershipInfo>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about current contact</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>information about current contact</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ContactsMe> GetCurrentContactInfoAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contacts/me");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactsMe>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific member or contact</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Unique contact identifier</param>
		/// <param name="getExtendedMembershipInfo">When GetExtendedMembershipInfo specified the API returns the information about membership order status, membership invoice and allowed actions for current member status.</param>
		/// <returns>information about specific member or contact</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ContactExtendedMembershipInfo> GetContactDetailsAsync(double accountId, int contactId, bool? getExtendedMembershipInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contacts/{contactId}?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{contactId}", System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
			if (getExtendedMembershipInfo != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("getExtendedMembershipInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getExtendedMembershipInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactExtendedMembershipInfo>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update information about existing member or contact</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Unique contact identifier</param>
		/// <returns>Updated version of contact information.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ContactExtendedMembershipInfo> UpdateContactDetailsAsync(double accountId, int contactId, UpdateContactParams contact, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			if (contact == null)
				throw new System.ArgumentNullException("contact");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contacts/{contactId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{contactId}", System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contact, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ContactExtendedMembershipInfo>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Unique contact identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteContactAsync(double accountId, int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contacts/{contactId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{contactId}", System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Accepts Terms of Use.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task AcceptTermsOfUseAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/AcceptTermsOfUse");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>List of custom fields related to contacts and members.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="showSectionDividers">Default value is false. Specifies whether section dividers also should be included in the response.</param>
		/// <returns>An array of contact field descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactFieldDescription>> GetContactFieldDefinitionsAsync(double accountId, bool? showSectionDividers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contactfields?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (showSectionDividers != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("showSectionDividers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSectionDividers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactFieldDescription>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new contact / membership field</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created field identifier</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> CreateContactFieldDefinitionAsync(double accountId, CreateContactFieldParams contactField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactField == null)
				throw new System.ArgumentNullException("contactField");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contactfields");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contactField, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Updates an existing contact / membership field</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactFieldId">contact field identifier</param>
		/// <returns>return true if field was updated successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<bool> UpdateContactFieldDefinitionAsync(double accountId, int contactFieldId, UpdateContactFieldParams contactField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactFieldId == null)
				throw new System.ArgumentNullException("contactFieldId");

			if (contactField == null)
				throw new System.ArgumentNullException("contactField");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contactfields/{contactFieldId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{contactFieldId}", System.Uri.EscapeDataString(ConvertToString(contactFieldId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contactField, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactFieldId">contact field identifier</param>
		/// <returns>return true if field was removed successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<bool> DeleteContactFieldDefinitionAsync(double accountId, int contactFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactFieldId == null)
				throw new System.ArgumentNullException("contactFieldId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/contactfields/{contactFieldId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{contactFieldId}", System.Uri.EscapeDataString(ConvertToString(contactFieldId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>List of Saved Searches.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>An array of saved search descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SavedSearchListItem>> GetSavedSearchesListAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/savedsearches");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SavedSearchListItem>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Saved Search and found contacts.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="savedSearchId">Saved Search identifier</param>
		/// <param name="excludeArchived">exclude archived contacts from found ContactIDs.</param>
		/// <param name="filter">Filters the results of the Contacts API call so that only those records that match the filter criteria are included.
		/// See [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.</param>
		/// <returns>Saved Search description and found contact IDs</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<SavedSearch> GetSavedSearchDetailsAsync(double accountId, int savedSearchId, bool? excludeArchived = null, string filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (savedSearchId == null)
				throw new System.ArgumentNullException("savedSearchId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/savedsearches/{savedSearchId}?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{savedSearchId}", System.Uri.EscapeDataString(ConvertToString(savedSearchId, System.Globalization.CultureInfo.InvariantCulture)));
			if (excludeArchived != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("excludeArchived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeArchived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<SavedSearch>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Download picture</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="pictureId">Picture identifier</param>
		/// <param name="fullSize">Full size picture will be returned. If full size picture does not exist, thumbnail will be returned.</param>
		/// <param name="asBase64">Base64 encoded image will be returned.</param>
		/// <returns>Response is common HttpResponseMessage with content set to picture binary data.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<FileResponse> GetPictureContentAsync(double accountId, string pictureId, bool? fullSize = null, bool? asBase64 = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (pictureId == null)
				throw new System.ArgumentNullException("pictureId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/pictures/{pictureId}?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{pictureId}", System.Uri.EscapeDataString(ConvertToString(pictureId, System.Globalization.CultureInfo.InvariantCulture)));
			if (fullSize != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("fullSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fullSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (asBase64 != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("asBase64") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asBase64, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206) {
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Upload pictures</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="picture0">The uploaded picture0 data</param>
		/// <param name="picture1">The uploaded picture1 data</param>
		/// <returns>Response is simple json object which contains picture guids (see example)</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Response> UploadPictureAsync(double accountId, FileParameter picture0, FileParameter picture1 = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/pictures");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var boundary_ = System.Guid.NewGuid().ToString();
					var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
					content_.Headers.Remove("Content-Type");
					content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
					if (picture0 == null)
						throw new System.ArgumentNullException("picture0");
					else {
						var content_picture0_ = new System.Net.Http.StreamContent(picture0.Data);
						if (!string.IsNullOrEmpty(picture0.ContentType))
							content_picture0_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(picture0.ContentType);
						content_.Add(content_picture0_, "picture0", picture0.FileName ?? "picture0");
					}
					if (picture1 != null) {
						var content_picture1_ = new System.Net.Http.StreamContent(picture1.Data);
						if (!string.IsNullOrEmpty(picture1.ContentType))
							content_picture1_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(picture1.ContentType);
						content_.Add(content_picture1_, "picture1", picture1.FileName ?? "picture1");
					}
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Download attachment</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="attachmentId">Attachment identifier</param>
		/// <param name="asBase64">Base64 encoded image will be returned.</param>
		/// <returns>Response is common HttpResponseMessage with content set to attachment binary data.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<FileResponse> GetAttachmentContentAsync(double accountId, string attachmentId, Size? size = null, bool? asBase64 = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (attachmentId == null)
				throw new System.ArgumentNullException("attachmentId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/attachments/{attachmentId}?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(ConvertToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
			if (size != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (asBase64 != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("asBase64") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asBase64, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206) {
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get attachments infos</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="attachmentIds">list of comma separated Attachment identifiers</param>
		/// <returns>An array of attachment descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> GetAttachmentInfosAsync(double accountId, string attachmentIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (attachmentIds == null)
				throw new System.ArgumentNullException("attachmentIds");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/attachments/GetInfos?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("attachmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(attachmentIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FileInfo>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Upload attachments</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>An array of attachment descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> UploadAttachmentsAsync(double accountId, System.Collections.Generic.IEnumerable<AttachmentData> model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (model == null)
				throw new System.ArgumentNullException("model");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/attachments/Upload");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FileInfo>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of all membership levels.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Collection of membership levels.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MembershipLevel>> GetMembershipLevelsListAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/membershiplevels");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MembershipLevel>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific membership level</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="levelId">Unique membership level identifier</param>
		/// <returns>information about specific membership level</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<MembershipLevel> GetMembershipLevelDetailsAsync(double accountId, int levelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (levelId == null)
				throw new System.ArgumentNullException("levelId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/membershiplevels/{levelId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{levelId}", System.Uri.EscapeDataString(ConvertToString(levelId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<MembershipLevel>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of membership bundles.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="levelId">Provide this parameter to get only bundles related to specific membership level.</param>
		/// <returns>List of bundles matching query parameters.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Bundle>> GetMembershipBundlesListAsync(double accountId, int? levelId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/bundles?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (levelId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("levelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(levelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Bundle>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get membership bundle details.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="bundleId">Unique bundle identifier</param>
		/// <returns>Bundle description.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Bundle> GetMembershipBundleAsync(double accountId, int bundleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (bundleId == null)
				throw new System.ArgumentNullException("bundleId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/bundles/{bundleId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{bundleId}", System.Uri.EscapeDataString(ConvertToString(bundleId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Bundle>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>List of Ad Hoc member groups.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>An array of member group descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MembershipGroupListItem>> GetMembershipGroupsAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/membergroups");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MembershipGroupListItem>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Ad Hoc member group.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="memberGroupId">member group identifier</param>
		/// <param name="includeArchivedMembers">include archived contacts in ContactIds list. Default - true.</param>
		/// <returns>member group description</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<MembershipGroup> GetMembershipGroupDetailsAsync(double accountId, int memberGroupId, bool? includeArchivedMembers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (memberGroupId == null)
				throw new System.ArgumentNullException("memberGroupId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/membergroups/{memberGroupId}?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{memberGroupId}", System.Uri.EscapeDataString(ConvertToString(memberGroupId, System.Globalization.CultureInfo.InvariantCulture)));
			if (includeArchivedMembers != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("includeArchivedMembers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeArchivedMembers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<MembershipGroup>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Approve pending membership.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Contact ID to approve membership</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task ApprovePendingMembershipAsync(double accountId, int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/ApprovePendingMembership?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reject pending membership.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Contact ID to reject membership</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task RejectPendingMembershipAsync(double accountId, int contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/RejectPendingMembership?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Events list</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="async">Controls whether the API call is perform asynchronously. Default value if true.</param>
		/// <param name="resultId">This parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.</param>
		/// <param name="filter">Filters the results of the Events API call so that only those records that match the filter criteria are included.
		/// The following filter criterias are supported:
		/// 
		///   - Id, Supported operations: in.
		///   - RegistrationEnabled, Supported operations: eq, ne.
		///   - IsUpcoming, Supported operations: eq, ne.
		///   - Tags, Supported operations: in.
		///   - StartDate, Supported operations: eq, ne, gt, ge, lt, le.
		///   - EndDate, Supported operations: eq, ne, gt, ge, lt, le.
		///   - Name, Supported operations: eq, ne, substringof.
		///   - TextIndex, Supported operations: substringof.</param>
		/// <param name="sort">This parameter can be used to sort list of IDs or list of events. Possible values are
		/// 
		///   - ByStartDate asc - sort events by their Start date. Ascending order.
		///   - ByStartDate desc - sort events by their Start date. Descending order.
		///   - ByStartSession asc - sort events by start of their sessions (if exists). All past events ignored
		/// 
		///   Example: $sort=ByStartDate asc</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <param name="count">Specifies that result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.</param>
		/// <param name="idsOnly">When idsOnly specified, the API returns only a list of identifiers matching criteria.</param>
		/// <returns>A wrapper object, which contains a list of events, event identifiers or events count.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EventsResponse> GetEventsListAsync(double accountId, bool? async = null, string resultId = null, string filter = null, string sort = null, int? skip = null, int? top = null, bool? count = null, bool? idsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/events?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (async != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$async") + "=").Append(System.Uri.EscapeDataString(ConvertToString(async, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (resultId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("resultId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resultId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (sort != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (count != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventsResponse>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Create a new event record</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="@event">Event description</param>
		/// <returns>Returns created event record id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<double> CreateEventAsync(double accountId, EventEditParams @event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (@event == null)
				throw new System.ArgumentNullException("@event");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/events");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@event, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<double>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific event</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">Unique event identifier</param>
		/// <returns>information about specific event</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Event> GetEventDetailsAsync(double accountId, int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/events/{eventId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Event>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update information about existing event</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">Unique event identifier</param>
		/// <returns>Updated version of event information.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Event> UpdateEventAsync(double accountId, int eventId, EventEditParams @event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			if (@event == null)
				throw new System.ArgumentNullException("@event");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/events/{eventId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@event, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Event>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">Unique event identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteEventAsync(double accountId, int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/events/{eventId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Clone existed event.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created event id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> CloneEventAsync(double accountId, CloneEvent cloneEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (cloneEvent == null)
				throw new System.ArgumentNullException("cloneEvent");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/CloneEvent");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(cloneEvent, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Event registration types list</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventId">event identifier</param>
		/// <returns>List of event registration types</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRegistrationType>> GetEventRegistrationTypesListAsync(double accountId, int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventId == null)
				throw new System.ArgumentNullException("eventId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EventRegistrationTypes?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventRegistrationType>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new event registration type.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Created event registration type ID</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> CreateEventRegistrationTypeAsync(double accountId, EventRegistrationTypeEditParams eventRegistrationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventRegistrationType == null)
				throw new System.ArgumentNullException("eventRegistrationType");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EventRegistrationTypes");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(eventRegistrationType, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Event registration type details</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="typeId">Unique event registration type identifier</param>
		/// <returns>Information about specific event registration type</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EventRegistrationType> GetEventRegistrationTypeDetailsAsync(double accountId, double typeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (typeId == null)
				throw new System.ArgumentNullException("typeId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EventRegistrationTypes/{typeId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{typeId}", System.Uri.EscapeDataString(ConvertToString(typeId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistrationType>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update information about existing event registration type</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="typeId">Unique event registration type identifier</param>
		/// <returns>No information returned on successful update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UpdateEventRegistrationTypeAsync(double accountId, double typeId, EventRegistrationTypeEditParams @event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (typeId == null)
				throw new System.ArgumentNullException("typeId");

			if (@event == null)
				throw new System.ArgumentNullException("@event");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EventRegistrationTypes/{typeId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{typeId}", System.Uri.EscapeDataString(ConvertToString(typeId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@event, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="typeId">Unique event registration type identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteEventRegistrationTypeAsync(double accountId, int typeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (typeId == null)
				throw new System.ArgumentNullException("typeId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EventRegistrationTypes/{typeId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{typeId}", System.Uri.EscapeDataString(ConvertToString(typeId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Event Registrations list</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">contact identifier</param>
		/// <param name="eventId">event identifier</param>
		/// <param name="filter">Filters the results of the Events API call so that only those records that match the filter criteria are included. The following filter criterias are supported:
		///   - Id, Supported operations: in.
		///     example: ?$filter=id in [1,2,3,4….]</param>
		/// <param name="includeDetails">If false, registration form data is not retrieved</param>
		/// <param name="includeWaitlist">Defines if waitlist records should be included in result</param>
		/// <returns>List of event registrations</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRegistration>> GetEventRegistrationsListAsync(double accountId, int? contactId = null, int? eventId = null, string filter = null, bool? includeDetails = null, bool? includeWaitlist = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/eventregistrations?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (contactId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (eventId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (includeDetails != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("includeDetails") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDetails, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (includeWaitlist != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("includeWaitlist") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWaitlist, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventRegistration>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new event registration.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Event registration created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EventRegistration> CreateEventRegistrationAsync(double accountId, EventRegistrationPost eventRegistration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventRegistration == null)
				throw new System.ArgumentNullException("eventRegistration");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/eventregistrations");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(eventRegistration, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Event Registration Details</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="event_registration_id">event registration identifier</param>
		/// <returns>List of Event Registrations</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EventRegistration> GetEventRegistrationDetailsAsync(double accountId, double event_registration_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (event_registration_id == null)
				throw new System.ArgumentNullException("event_registration_id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/eventregistrations/{event_registration_id}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{event_registration_id}", System.Uri.EscapeDataString(ConvertToString(event_registration_id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Event registration</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="event_registration_id">event registration identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteEventRegistrationAsync(double accountId, double event_registration_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (event_registration_id == null)
				throw new System.ArgumentNullException("event_registration_id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/eventregistrations/{event_registration_id}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{event_registration_id}", System.Uri.EscapeDataString(ConvertToString(event_registration_id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update event registration.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="event_registration_id">event registration identifier</param>
		/// <returns>Event registration created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EventRegistration> UpdateEventRegistrationAsync(double accountId, double event_registration_id, EventRegistrationPut eventRegistration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (event_registration_id == null)
				throw new System.ArgumentNullException("event_registration_id");

			if (eventRegistration == null)
				throw new System.ArgumentNullException("eventRegistration");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/eventregistrations/{event_registration_id}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{event_registration_id}", System.Uri.EscapeDataString(ConvertToString(event_registration_id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(eventRegistration, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Mark event attendee as checked-in (or remove check-in flag).</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task CheckInEventAttendeeAsync(double accountId, CheckInParams checkInParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (checkInParams == null)
				throw new System.ArgumentNullException("checkInParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/CheckInEventAttendee");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(checkInParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Add waitlisted person as event attendee</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Event registration created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EventRegistration> RegisterFromWaitlistAsync(double accountId, RegisterFromWaitlistParams registerFromWaitlistParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (registerFromWaitlistParams == null)
				throw new System.ArgumentNullException("registerFromWaitlistParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/RegisterFromWaitlist");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(registerFromWaitlistParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EventRegistration>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of invoices by criteria.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Identifier of contact to whom the invoice is assigned.</param>
		/// <param name="eventId">Identifier of event. When specified API returns collection of invoices associated with event registrations for the event.</param>
		/// <param name="eventRegistrationId">Identifier of event registration. When specified API returns invoice related to the registration. Usually a single invoice.</param>
		/// <param name="unpaidOnly">When set to true, API returns only unpaid invoices.</param>
		/// <param name="paidOnly">When set to true, API returns only paid invoices.</param>
		/// <param name="includeVoided">When set to true, API also returns voided invoices.</param>
		/// <param name="idsOnly">When set to true, API returns only collection of identifiers instead of collection of invoices.</param>
		/// <param name="startDate">Limits result to invoices created since StartDate.</param>
		/// <param name="endDate">Limits result to invoices created before EndDate.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <returns>Collection of invoices that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<InvoicesResponse> GetInvoicesListAsync(double accountId, int? contactId = null, int? eventId = null, int? eventRegistrationId = null, bool? unpaidOnly = null, bool? paidOnly = null, bool? includeVoided = null, bool? idsOnly = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/invoices?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (contactId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (eventId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (eventRegistrationId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("eventRegistrationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventRegistrationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (unpaidOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("unpaidOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unpaidOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (paidOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("paidOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paidOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (includeVoided != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("includeVoided") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeVoided, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (startDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (endDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<InvoicesResponse>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new invoice.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Created invoice ID</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> CreateInvoiceAsync(double accountId, CreateInvoiceParams invoice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoice == null)
				throw new System.ArgumentNullException("invoice");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/invoices");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(invoice, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific invoice</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="invoiceId">Unique invoice identifier</param>
		/// <returns>information about specific invoice</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Invoice> GetInvoiceDetailsAsync(double accountId, int invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/invoices/{invoiceId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{invoiceId}", System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update existing invoice information</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UpdateInvoiceAsync(double accountId, int invoiceId, UpdateInvoiceParams invoice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			if (invoice == null)
				throw new System.ArgumentNullException("invoice");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/invoices/{invoiceId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{invoiceId}", System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(invoice, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Delete existing invoice</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful invoice deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteInvoiceAsync(double accountId, int invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/invoices/{invoiceId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{invoiceId}", System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Generate or update invoice for pending membership.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Contact ID with pending membership</param>
		/// <param name="updateIfExists">update the invoice items if already exists</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task GenerateInvoiceForPendingMembershipAsync(double accountId, int contactId, bool? updateIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (contactId == null)
				throw new System.ArgumentNullException("contactId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/GenerateInvoiceForPendingMembership?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (updateIfExists != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("updateIfExists") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateIfExists, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Generate or update invoice for existing event registration.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="eventRegistrationId">Event registration ID with pending membership</param>
		/// <param name="updateIfExists">If set to true and invoice already exists, API will update the invoice items.</param>
		/// <returns>created or updated invoice</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Invoice> GenerateInvoiceForEventRegistrationAsync(double accountId, int eventRegistrationId, bool? updateIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (eventRegistrationId == null)
				throw new System.ArgumentNullException("eventRegistrationId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/GenerateInvoiceForEventRegistration?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("eventRegistrationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventRegistrationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (updateIfExists != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("updateIfExists") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateIfExists, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Void active invoice.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="invoiceId">invoiceId ID to void</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task VoidInvoiceAsync(double accountId, int invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (invoiceId == null)
				throw new System.ArgumentNullException("invoiceId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/VoidInvoice?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("invoiceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of payments by criteria.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Identifier of contact who made the payment.</param>
		/// <param name="eventId">Identifier of event. When specified API returns collection of payments settled to invoices associated with event registrations for the event.</param>
		/// <param name="idsOnly">When set to true, API returns only collection of identifiers instead of collection of payments.</param>
		/// <param name="startDate">Limits result to payments created since StartDate.</param>
		/// <param name="endDate">Limits result to payments created before EndDate.</param>
		/// <param name="paimentType">Limits result to payment type.</param>
		/// <param name="unsettledOnly">When set to true, API returns only unsettled payments.</param>
		/// <param name="ids">You can filter the payments by specifying a set of payment IDs.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <returns>Collection of payments that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<PaymentsResponse> GetPaymentsListAsync(double accountId, int? contactId = null, int? eventId = null, bool? idsOnly = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, string paimentType = null, bool? unsettledOnly = null, string ids = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (contactId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (eventId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (startDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (endDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (paimentType != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("paimentType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paimentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (unsettledOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("unsettledOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unsettledOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (ids != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<PaymentsResponse>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new payment.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Payment created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Payment> CreatePaymentAsync(double accountId, CreatePaymentModel payment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (payment == null)
				throw new System.ArgumentNullException("payment");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payment, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Payment>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific payment</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>information about specific payment</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Payment> GetPaymentDetailsAsync(double accountId, int paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{paymentId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Payment>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update existing payment information</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UpdatePaymentAsync(double accountId, int paymentId, UpdatePaymentParams payment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (payment == null)
				throw new System.ArgumentNullException("payment");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{paymentId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payment, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Delete existing payment</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful payment deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeletePaymentAsync(double accountId, int paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{paymentId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Allocate invoice to specific payment</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task AllocateInvoiceAsync(double accountId, int paymentId, AllocateInvoiceParams allocateInvoiceParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (allocateInvoiceParams == null)
				throw new System.ArgumentNullException("allocateInvoiceParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{paymentId}/AllocateInvoice");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(allocateInvoiceParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Allocate refund to specific payment</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task AllocateRefundToPaymentAsync(double accountId, int paymentId, RefundParam refundParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (refundParam == null)
				throw new System.ArgumentNullException("refundParam");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{paymentId}/AllocateRefundToPayment");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(refundParam, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Allocate refund to specific donation</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationId">Unique donation identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task AllocateRefundToDonationAsync(double accountId, int donationId, RefundParam refundParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			if (refundParam == null)
				throw new System.ArgumentNullException("refundParam");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{donationId}/AllocateRefundToDonation");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{donationId}", System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(refundParam, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Unallocate finance document from specific payment</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="paymentId">Unique payment identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UnallocateFinanceDocumentFromPaymentAsync(double accountId, int paymentId, DocumentParam documentParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (paymentId == null)
				throw new System.ArgumentNullException("paymentId");

			if (documentParam == null)
				throw new System.ArgumentNullException("documentParam");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{paymentId}/UnallocateFromPayment");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(documentParam, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Unallocate finance document from specific donation</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationId">Unique donation identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UnallocateFinanceDocumentFromDonationAsync(double accountId, int donationId, DocumentParam documentParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			if (documentParam == null)
				throw new System.ArgumentNullException("documentParam");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/payments/{donationId}/UnallocateFromDonation");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{donationId}", System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(documentParam, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list describing how payments are allocated among invoices.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="invoiceId">Identifier of invoice.</param>
		/// <param name="paymentId">Identifier of payment.</param>
		/// <param name="refundId">Identifier of refund.</param>
		/// <returns>Collection of allocations.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentAllocation>> GetPaymentAllocationsListAsync(double accountId, int? invoiceId = null, int? paymentId = null, int? refundId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/paymentAllocations?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (invoiceId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("InvoiceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (paymentId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("PaymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (refundId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("RefundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PaymentAllocation>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of refunds by criteria.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="contactId">Identifier of contact to whom the refund was made.</param>
		/// <param name="eventId">Identifier of event. When specified API returns collection of refunds settled to invoices associated with event registrations for the event.</param>
		/// <param name="idsOnly">When set to true, API returns only collection of identifiers instead of collection of refunds.</param>
		/// <param name="startDate">Limits result to refunds created since StartDate.</param>
		/// <param name="endDate">Limits result to refunds created before EndDate.</param>
		/// <param name="unsettledOnly">When set to true, API returns only unsettled refunds.</param>
		/// <param name="ids">You can filter the refunds by specifying a set of refund IDs.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <returns>Collection of refunds that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<RefundsResponse> GetRefundsListAsync(double accountId, int? contactId = null, int? eventId = null, bool? idsOnly = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, bool? unsettledOnly = null, string ids = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/refunds?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (contactId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("contactId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (eventId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (startDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (endDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (unsettledOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("unsettledOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unsettledOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (ids != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<RefundsResponse>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new refund.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Refund created</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Refund> CreateRefundAsync(double accountId, CreateRefundParams refund, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refund == null)
				throw new System.ArgumentNullException("refund");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/refunds");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(refund, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Refund>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific refund</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="refundId">Unique refund identifier</param>
		/// <returns>information about specific refund</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Refund> GetRefundDetailsAsync(double accountId, int refundId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refundId == null)
				throw new System.ArgumentNullException("refundId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/refunds/{refundId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{refundId}", System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Refund>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update existing refund information</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UpdateRefundAsync(double accountId, int refundId, UpdateRefundParams refund, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refundId == null)
				throw new System.ArgumentNullException("refundId");

			if (refund == null)
				throw new System.ArgumentNullException("refund");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/refunds/{refundId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{refundId}", System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(refund, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Delete existing refund</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful refund deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteRefundAsync(double accountId, int refundId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (refundId == null)
				throw new System.ArgumentNullException("refundId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/refunds/{refundId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{refundId}", System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of tenders.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Collection of tenders.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Tender>> GetTendersListAsync(double accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/tenders");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Tender>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new tender.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Tenderscreated</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Tender> CreateTenderAsync(double accountId, Tender tender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tender == null)
				throw new System.ArgumentNullException("tender");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/tenders");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(tender, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Tender>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific tender</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="tenderId">Unique tender identifier</param>
		/// <returns>information about specific tender</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Tender> GetTenderDetailsAsync(double accountId, int tenderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tenderId == null)
				throw new System.ArgumentNullException("tenderId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/tenders/{tenderId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{tenderId}", System.Uri.EscapeDataString(ConvertToString(tenderId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Tender>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update existing tender information</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UpdateTenderAsync(double accountId, int tenderId, Tender tender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tenderId == null)
				throw new System.ArgumentNullException("tenderId");

			if (tender == null)
				throw new System.ArgumentNullException("tender");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/tenders/{tenderId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{tenderId}", System.Uri.EscapeDataString(ConvertToString(tenderId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(tender, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Delete existing tender</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful tender deletion</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteTenderAsync(double accountId, int tenderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (tenderId == null)
				throw new System.ArgumentNullException("tenderId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/tenders/{tenderId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{tenderId}", System.Uri.EscapeDataString(ConvertToString(tenderId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>List of Audit log items.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="filterObjectType">Kind of object for audit log filter</param>
		/// <param name="filterObjectId">Unique identifyer of type filterObjectType</param>
		/// <param name="startDate">Limits result to log items created since StartDate.</param>
		/// <param name="endDate">Limits result to log items created before EndDate.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <returns>An array of audit log item descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<AuditItemsListResult> GetAuditLogItemsAsync(double accountId, FilterObjectType? filterObjectType = null, int? filterObjectId = null, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/auditLogItems?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (filterObjectType != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("filterObjectType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterObjectType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filterObjectId != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("FilterObjectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterObjectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (startDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (endDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<AuditItemsListResult>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Single audit log item.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="itemId">Audit log item identifier</param>
		/// <returns>Audit log item description</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<AuditLogItem> GetAuditLogItemAsync(double accountId, int itemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (itemId == null)
				throw new System.ArgumentNullException("itemId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/auditLogItems/{itemId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{itemId}", System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<AuditLogItem>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>List of custom fields related to donations.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="showSectionDividers">Default value is false. Specifies whether section dividers also should be presented in the response.</param>
		/// <returns>An array of donation field descriptions</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntityFieldDescription>> DonationfieldsAllAsync(double accountId, bool? showSectionDividers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donationfields?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (showSectionDividers != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("showSectionDividers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSectionDividers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntityFieldDescription>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Creates a new donation field</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created field identifier</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> DonationfieldsAsync(double accountId, CreateEntityFieldParams donationField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationField == null)
				throw new System.ArgumentNullException("donationField");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donationfields");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(donationField, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Updates an existing donation field</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationFieldId">donation field identifier</param>
		/// <returns>return true if field was updated successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<bool> Donationfields2Async(double accountId, int donationFieldId, EditEntityFieldParams donationField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationFieldId == null)
				throw new System.ArgumentNullException("donationFieldId");

			if (donationField == null)
				throw new System.ArgumentNullException("donationField");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donationfields/{donationFieldId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{donationFieldId}", System.Uri.EscapeDataString(ConvertToString(donationFieldId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(donationField, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationFieldId">donation field identifier</param>
		/// <returns>return true if field was removed successfully</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<bool> Donationfields3Async(double accountId, int donationFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationFieldId == null)
				throw new System.ArgumentNullException("donationFieldId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donationfields/{donationFieldId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{donationFieldId}", System.Uri.EscapeDataString(ConvertToString(donationFieldId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get list of donations by criteria.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="startDate">Limits result to donations created since StartDate.</param>
		/// <param name="endDate">Limits result to donations created before EndDate.</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <returns>Collection of donations that match criteria.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<DonationListResponse> GetDonationsListAsync(double accountId, System.DateTimeOffset? startDate = null, System.DateTimeOffset? endDate = null, int? skip = null, int? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donations?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (startDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (endDate != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<DonationListResponse>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Retrieve information about specific donation</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="donationId">Unique donation identifier</param>
		/// <returns>information about specific donation</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Donation> GetDonationDetailsAsync(double accountId, int donationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donations/{donationId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{donationId}", System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Donation>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Update existing donation information</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>Returns 200 on successful data update</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task UpdateDonationAsync(double accountId, int donationId, Donation donation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (donationId == null)
				throw new System.ArgumentNullException("donationId");

			if (donation == null)
				throw new System.ArgumentNullException("donation");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/donations/{donationId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{donationId}", System.Uri.EscapeDataString(ConvertToString(donationId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(donation, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("On invalid parameters. See error details in response body.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <param name="idsOnly">To get only a list of email identifiers as a result of search request.</param>
		/// <param name="filter">Allowed filter fields (**allowed operations**):
		///   - *SentDate* (**ge**, **le**),
		///   - *SenderId* (**eq**) - ID of sender,
		///   - *OriginType* (**eq**) - see SentEmail.Origin.OriginType,
		///   - *SendingType* (**eq**) -SentEmail.SendingType (Automatic or Manual)
		/// 
		///   only AND boolean operator supported
		///   - ...&amp;$filter=SentDate ge 2018-05-01 - will return records sent on or after May 1st, 2018</param>
		/// <returns>Contains a list of sent emails or list of identifiers, depending on idsOnly parameter value.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EmailLog> GetSentEmailsLogAsync(double accountId, int? skip = null, int? top = null, bool? idsOnly = null, string filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/SentEmails?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailLog>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="emailId">Email unique Id</param>
		/// <returns>Email details</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EmailLogRecord> GetSentEmailDetailsAsync(double accountId, int emailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailId == null)
				throw new System.ArgumentNullException("emailId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/SentEmails/{emailId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{emailId}", System.Uri.EscapeDataString(ConvertToString(emailId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailLogRecord>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <param name="idsOnly">Should be set to true in order to get only a list of email identifiers as a result of search request.</param>
		/// <param name="filter">Allowed filter fields (**allowed operations**):
		///   - *LastChangedDate* (**ge**, **le**),
		///   - *CreatorId* (**eq**),
		///   - *IsScheduled* (**eq**),
		///   - *EventId* (**eq**)
		/// 
		///   only AND boolean operator supported
		///   - ...&amp;$filter=LastChangedDate ge 2018-05-01 - will return records updated on or after May 1st, 2018
		///   - ...&amp;$filter=LastChangedDate ge 2010-05-01 AND CreatorId eq 123456 - will return records updated on or after May 1st, 2010 and create by a user with Contact ID 123456
		///   - ...&amp;$filter=IsScheduled eq true - will return scheduled drafts only</param>
		/// <returns>A wrapper object, which contains a list of sent emails. also contains EmailDraftIdentifiersResult if idsOnly parameter is true</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EmailDraftListResult> GetEmailDraftsListAsync(double accountId, int? skip = null, int? top = null, bool? idsOnly = null, string filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EmailDrafts?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (idsOnly != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("idsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailDraftListResult>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 428) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="draftId">Email draft Id</param>
		/// <returns>Email draft</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EmailDraft> GetEmailDraftAsync(double accountId, int draftId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (draftId == null)
				throw new System.ArgumentNullException("draftId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EmailDrafts/{draftId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{draftId}", System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailDraft>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="draftId">Email draft Id</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteEmailDraftAsync(double accountId, int draftId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (draftId == null)
				throw new System.ArgumentNullException("draftId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/EmailDrafts/{draftId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{draftId}", System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 404) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Requested item not found.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="emailId">sent email Id (from email Log)</param>
		/// <param name="skip">'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'
		/// - ...&amp;$top=100 - will return records from 0 to 99 - ...?$skip=100&amp;top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end</param>
		/// <param name="top">this parameter specifies the maximum number of entries to be returned</param>
		/// <param name="loadLinks">load clicked links information</param>
		/// <param name="delivered">load delivered or not delivered only</param>
		/// <param name="opened">load opened or not opened only</param>
		/// <returns>Contains a list of sent email recipients.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<SentEmailRecipientsRecords> SentEmailRecipientListAsync(double accountId, int emailId, int? skip = null, int? top = null, bool? loadLinks = null, bool? delivered = null, bool? opened = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailId == null)
				throw new System.ArgumentNullException("emailId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/SentEmailRecipients?");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Append(System.Uri.EscapeDataString("emailId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (skip != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (top != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("$top") + "=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (loadLinks != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("LoadLinks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loadLinks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (delivered != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("Delivered") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delivered, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (opened != null) {
				urlBuilder_.Append(System.Uri.EscapeDataString("Opened") + "=").Append(System.Uri.EscapeDataString(ConvertToString(opened, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<SentEmailRecipientsRecords>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("oAuth token was not provided, invalid or does not provide access to requested URL.", status_, responseText_, headers_, null);
						}
						else
						if (status_ == 429) {
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("Too many requests from same account. Wait for a minute and try again.", status_, responseText_, headers_, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Pause or resume scheduled draft.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task SetEmailDraftScheduleAsync(double accountId, EmailScheduleParams emailScheduleParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailScheduleParams == null)
				throw new System.ArgumentNullException("emailScheduleParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/SetEmailDraftSchedule");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailScheduleParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							return;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get preview version of email.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>email preview subject and body</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<EmailDraftPreview> GetEmailDraftPreviewAsync(double accountId, SendDraftParams sendDraft, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (sendDraft == null)
				throw new System.ArgumentNullException("sendDraft");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/GetEmailDraftPreview");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendDraft, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<EmailDraftPreview>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Send draft.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created sent email id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> SendEmailDraftAsync(double accountId, SendDraftParams sendDraft, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (sendDraft == null)
				throw new System.ArgumentNullException("sendDraft");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/SendEmailDraft");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendDraft, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Send draft.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>created sent email id</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> SendEmailAsync(double accountId, SendEmailParams sendEmailParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (sendEmailParams == null)
				throw new System.ArgumentNullException("sendEmailParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/SendEmail");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendEmailParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get count of real email recipients (unique addresses).</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> GetUniqueEmailRecipientsCountAsync(double accountId, EmailRecipientsParams emailRecipientsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailRecipientsParams == null)
				throw new System.ArgumentNullException("emailRecipientsParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/CountUniqueAddressesForEmailRecipients");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailRecipientsParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get count of real email recipients (unique addresses).</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<int> GetUniqueEmailRecipientsCountForDraftAsync(double accountId, int emailDraftId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailDraftId == null)
				throw new System.ArgumentNullException("emailDraftId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/CountUniqueAddressesForEmailDraft");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailDraftId, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get unique addresses of real email recipients.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmailRecipient>> GetUniqueAddressesForEmailRecipientsAsync(double accountId, EmailRecipientsParams emailRecipientsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailRecipientsParams == null)
				throw new System.ArgumentNullException("emailRecipientsParams");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/GetUniqueAddressesForEmailRecipients");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailRecipientsParams, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EmailRecipient>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get unique addresses of real email recipients.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <returns>OK</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmailRecipient>> GetUniqueAddressesForEmailDraftAsync(double accountId, int emailDraftId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (emailDraftId == null)
				throw new System.ArgumentNullException("emailDraftId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rpc/{accountId}/email/GetUniqueAddressesForEmailDraft");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailDraftId, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EmailRecipient>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400) {
							var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new WildApricotException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get information about feature availability for specific account.</summary>
		/// <param name="accountId">Your account identifier</param>
		/// <param name="featureId">feature identifier</param>
		/// <returns>Feature availability status.</returns>
		/// <exception cref="WildApricotException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Feature> GetFeatureAvailabilityAsync(double accountId, int featureId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (accountId == null)
				throw new System.ArgumentNullException("accountId");

			if (featureId == null)
				throw new System.ArgumentNullException("featureId");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{accountId}/features/{featureId}");
			urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{featureId}", System.Uri.EscapeDataString(ConvertToString(featureId, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Feature>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new WildApricotException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new WildApricotException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
		{
			if (response == null || response.Content == null) {
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString) {
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try {
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception) {
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new WildApricotException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else {
				try {
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader)) {
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception) {
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new WildApricotException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null) {
				return "";
			}

			if (value is System.Enum) {
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null) {
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null) {
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null) {
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool) {
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[]) {
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value.GetType().IsArray) {
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	/// <summary>Information about Wild Apricot account</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Account
	{
		/// <summary>Account unique identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; }

		/// <summary>The account name. This corresponds to the organization name as it appears on the Organization details screen.</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>The primary domain name for the account.</summary>
		[Newtonsoft.Json.JsonProperty("PrimaryDomainName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string PrimaryDomainName { get; set; }

		[Newtonsoft.Json.JsonProperty("IsFreeAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsFreeAccount { get; set; }

		/// <summary>Collection of account-related resources.</summary>
		[Newtonsoft.Json.JsonProperty("Resources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Resource> Resources { get; set; }

		[Newtonsoft.Json.JsonProperty("ContactLimitInfo", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public ContactLimitInfo ContactLimitInfo { get; set; } = new ContactLimitInfo();

		[Newtonsoft.Json.JsonProperty("TimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public TimeZone TimeZone { get; set; }

		[Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Currency Currency { get; set; } = new Currency();

		[Newtonsoft.Json.JsonProperty("Localization", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Localization Localization { get; set; } = new Localization();

		[Newtonsoft.Json.JsonProperty("SquareRegisterSettings", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public SquareRegisterSettings SquareRegisterSettings { get; set; } = new SquareRegisterSettings();

		[Newtonsoft.Json.JsonProperty("PaymentSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public PaymentSettings PaymentSettings { get; set; }

		[Newtonsoft.Json.JsonProperty("BillingPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public BillingPlan BillingPlan { get; set; }


	}

	/// <summary>Current account billing plan.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class BillingPlan
	{
		/// <summary>Billing plan name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Monthly price</summary>
		[Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Price { get; set; }


	}

	/// <summary>Details about limits on the number of contacts.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactLimitInfo
	{
		/// <summary>Number of contacts currently in database (archived excluded)</summary>
		[Newtonsoft.Json.JsonProperty("CurrentContactsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CurrentContactsCount { get; set; }

		/// <summary>Maximum number of contacts allowed by billing plan.</summary>
		[Newtonsoft.Json.JsonProperty("BillingPlanContactsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BillingPlanContactsLimit { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Currency
	{
		/// <summary>Currency code according to ISO4217</summary>
		[Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Code { get; set; }

		/// <summary>Human-readable currency name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Currency symbol like $ or €</summary>
		[Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Symbol { get; set; }


	}

	/// <summary>Information about specific feature availability</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Feature
	{
		/// <summary>Feature identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Id { get; set; }

		/// <summary>Indicates whether the feature is allowed</summary>
		[Newtonsoft.Json.JsonProperty("Allowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? Allowed { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Localization
	{
		/// <summary>Date format like "d MMM yyyy"</summary>
		[Newtonsoft.Json.JsonProperty("DateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DateFormat { get; set; }

		/// <summary>Time format like "h:mm tt"</summary>
		[Newtonsoft.Json.JsonProperty("TimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string TimeFormat { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PaymentSettings
	{
		/// <summary>General payment instructions (shown on the Invoices &amp; Payments page and Manual invoices)</summary>
		[Newtonsoft.Json.JsonProperty("GeneralPaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string GeneralPaymentInstructions { get; set; }

		/// <summary>For event registrations (can be changed for each event)</summary>
		[Newtonsoft.Json.JsonProperty("EventPaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EventPaymentInstructions { get; set; }

		/// <summary>For membership applications, renewals and level changes</summary>
		[Newtonsoft.Json.JsonProperty("MembershipPaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string MembershipPaymentInstructions { get; set; }


	}

	/// <summary>Settings for Square Register integration, used for mobile app</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SquareRegisterSettings
	{
		/// <summary>Is integration enabled in admin UI.</summary>
		[Newtonsoft.Json.JsonProperty("IntegrationEnabled", Required = Newtonsoft.Json.Required.Always)]
		public bool IntegrationEnabled { get; set; }

		/// <summary>(optional) Square client Id</summary>
		[Newtonsoft.Json.JsonProperty("ClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ClientId { get; set; }


	}

	/// <summary>Details about account time zone</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class TimeZone
	{
		/// <summary>Time zone id, i.e. "Arabic Standard Time"</summary>
		[Newtonsoft.Json.JsonProperty("ZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ZoneId { get; set; }

		/// <summary>Time zone name, i.e. "(UTC+03:00) Baghdad"</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Offcet from UTC Time in minutes, i.e. "180"</summary>
		[Newtonsoft.Json.JsonProperty("UtcOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? UtcOffset { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreateEntityFieldParams : EntityFieldDescription
	{
		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CustomFieldType FieldType { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EditEntityFieldParams : EntityFieldDescription
	{
		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CustomFieldType FieldType { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EntityFieldDescription
	{
		/// <summary>Field name title, could be displayed in user interface. Field name could be changed by account administrator.</summary>
		[Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string FieldName { get; set; }

		/// <summary>System-defined code associated with field. It does not change even if FieldName is edited in admin backend.</summary>
		[Newtonsoft.Json.JsonProperty("SystemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SystemCode { get; set; }

		/// <summary>Optional hint, which tells how to display and edit field. It appears for String and Choice fields.</summary>
		[Newtonsoft.Json.JsonProperty("DisplayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayType { get; set; }

		/// <summary>Field is system-defined and could not be deleted. However, field name could be changed by account administrator.</summary>
		[Newtonsoft.Json.JsonProperty("IsSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsSystem { get; set; }

		/// <summary>System-defined description of the field. Empty for custom fields.</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Description { get; set; }

		/// <summary>Admin-defined comment for the field. Shown as a tip when members or visitors fill in forms.</summary>
		[Newtonsoft.Json.JsonProperty("FieldInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FieldInstructions { get; set; }

		/// <summary>If field value is limited to set of predefined values, this contains list of allowed values. Normally, AllowedValues appear for MultipleChoice and Choice fields.</summary>
		[Newtonsoft.Json.JsonProperty("AllowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OptionsListItem> AllowedValues { get; set; }

		/// <summary>Sorting order to display the field in UI</summary>
		[Newtonsoft.Json.JsonProperty("Order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Order { get; set; }

		[Newtonsoft.Json.JsonProperty("RulesAndTermsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RulesAndTermsInfo RulesAndTermsInfo { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EntityFieldDescriptionWithExtraCharge : EditEntityFieldParams
	{
		[Newtonsoft.Json.JsonProperty("ExtraCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExtraCharge ExtraCharge { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Error
	{
		/// <summary>Error code, like Validation / Search / ...</summary>
		[Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Code { get; set; }

		/// <summary>An explanation of why this error occured</summary>
		[Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Message { get; set; }

		/// <summary>More information about the error. Data structure is specific for each kind of error.</summary>
		[Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object Details { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class FieldValue
	{
		/// <summary>Field title. Custom field names are defined by account adinistrator. System field names are predefined by Wild Apricot system.</summary>
		[Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FieldName { get; set; }

		/// <summary>The system code is a unique field identifier that can be used instead of the field name to identify the field. While field name could be changed by administrators, system codes are defined by the system and cannot be changed.</summary>
		[Newtonsoft.Json.JsonProperty("SystemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SystemCode { get; set; }

		/// <summary>Field value could be an integer / string / date in ISO8601 format / boolean / an object consisting of Id and Label or array of such objects. The content format depends on custom field description.</summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object Value { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class LinkedResource
	{
		/// <summary>unique item identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>API url to get item details</summary>
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class LinkedResourceWithName : LinkedResource
	{
		/// <summary>Resource name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Resource
	{
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Url { get; set; }

		/// <summary>Name of resource</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		/// <summary>Text description of the resource</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		/// <summary>Collection of allowed operations for this resource. Possible values are
		/// GET - Resource can be requested
		/// POST - Resource can be created
		/// PUT - Resource can be updated
		/// DELETE - Resource can be deleted
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AllowedOperations", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> AllowedOperations { get; set; } = new System.Collections.ObjectModel.Collection<string>();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class AttachmentData
	{
		/// <summary>attachment name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>http ContentType (MIME type)</summary>
		[Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string MimeType { get; set; }

		/// <summary>uploading file data</summary>
		[Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object Data { get; set; }


	}

	/// <summary>list of uploading files</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class AttachmentDataList : System.Collections.ObjectModel.Collection<AttachmentData>
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Bundle
	{
		/// <summary>Unique bundle identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Email of bundle administrator.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>The number of members in the bundle.</summary>
		[Newtonsoft.Json.JsonProperty("ParticipantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ParticipantsCount { get; set; }

		[Newtonsoft.Json.JsonProperty("Administrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Administrator Administrator { get; set; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel2 MembershipLevel { get; set; }

		/// <summary>If bundle size is limited, then this field indicates number of vacant spaces left in the bundle.</summary>
		[Newtonsoft.Json.JsonProperty("SpacesLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SpacesLeft { get; set; }

		/// <summary>Collection of links to members of the bundle.</summary>
		[Newtonsoft.Json.JsonProperty("Members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> Members { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact
	{
		/// <summary>Unique contact identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Shortcut for custom field value with system code 'FirstName'</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Shortcut for custom field value with system code 'LastName'</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>Shortcut for custom field value with system code 'Organization'</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.</summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		/// <summary>Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact.</summary>
		[Newtonsoft.Json.JsonProperty("ProfileLastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? ProfileLastUpdated { get; set; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel3 MembershipLevel { get; set; }

		/// <summary>Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member.</summary>
		[Newtonsoft.Json.JsonProperty("MembershipEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MembershipEnabled { get; set; }

		/// <summary>The status of the contact's membership. The status is only included in the results if the contact is a member.</summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactStatus? Status { get; set; }

		/// <summary>Indicates if the contact is an account administrator.</summary>
		[Newtonsoft.Json.JsonProperty("IsAccountAdministrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsAccountAdministrator { get; set; }

		/// <summary>Indicates if the contact already accepted Wild Apricot's terms of use.</summary>
		[Newtonsoft.Json.JsonProperty("TermsOfUseAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TermsOfUseAccepted { get; set; }

		/// <summary>For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.</summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ContactFieldValue> FieldValues { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactExtendedMembershipInfo
	{
		/// <summary>Unique contact identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Shortcut for custom field value with system code 'FirstName'</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Shortcut for custom field value with system code 'LastName'</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>Shortcut for custom field value with system code 'Organization'</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.</summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		/// <summary>Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact.</summary>
		[Newtonsoft.Json.JsonProperty("ProfileLastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? ProfileLastUpdated { get; set; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel4 MembershipLevel { get; set; }

		/// <summary>Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member.</summary>
		[Newtonsoft.Json.JsonProperty("MembershipEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MembershipEnabled { get; set; }

		/// <summary>The status of the contact's membership. The status is only included in the results if the contact is a member.</summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactExtendedMembershipInfoStatus? Status { get; set; }

		[Newtonsoft.Json.JsonProperty("ExtendedMembershipInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExtendedMembershipInfo ExtendedMembershipInfo { get; set; }

		/// <summary>Indicates if the contact is an account administrator.</summary>
		[Newtonsoft.Json.JsonProperty("IsAccountAdministrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsAccountAdministrator { get; set; }

		/// <summary>Indicates if the contact already accepted Wild Apricot's terms of use.</summary>
		[Newtonsoft.Json.JsonProperty("TermsOfUseAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TermsOfUseAccepted { get; set; }

		/// <summary>For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.</summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ContactFieldValue> FieldValues { get; set; }


	}

	/// <summary>
	/// Indicates who is allowed to view the field value. - **Public** - value is visible to anyone who has access to members directory - **Members** - value is visible only to members - **Nobody* - value is visible only to account administrators
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ContactFieldAccessLevel
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Public")]
		Public = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Members")]
		Members = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Nobody")]
		Nobody = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactFieldDescription : EntityFieldDescriptionWithExtraCharge
	{
		/// <summary>Unique field identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactFieldAccessLevel? Access { get; set; }

		/// <summary>Indicates that the field is accessible only by administrators.</summary>
		[Newtonsoft.Json.JsonProperty("AdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AdminOnly { get; set; }

		/// <summary>If field is defined for specific levels only, this contains list of membership levels.</summary>
		[Newtonsoft.Json.JsonProperty("ExistsInLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> ExistsInLevels { get; set; }

		[Newtonsoft.Json.JsonProperty("MemberAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MemberFieldAccess? MemberAccess { get; set; }

		/// <summary>Indicates whether the field is a membership field.</summary>
		[Newtonsoft.Json.JsonProperty("MemberOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MemberOnly { get; set; }

		/// <summary>The field is a built-in system field, it cannot be edited or deleted.</summary>
		[Newtonsoft.Json.JsonProperty("IsBuiltIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsBuiltIn { get; set; }

		/// <summary>Indicates that this field can be used in $filter expression in contact search.</summary>
		[Newtonsoft.Json.JsonProperty("SupportSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SupportSearch { get; set; }

		/// <summary>Indicates that the field's value can be changed with create/update requests. Otherwise value can’t be edited through API. If non-editable field value is provided in create/update contact request, the value is ignored by API.</summary>
		[Newtonsoft.Json.JsonProperty("IsEditable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsEditable { get; set; }

		[Newtonsoft.Json.JsonProperty("RulesAndTermsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RulesAndTermsInfo RulesAndTermsInfo { get; set; }

		[Newtonsoft.Json.JsonProperty("RenewalPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RenewalPolicy RenewalPolicy { get; set; }

		/// <summary>If the field has associated cost, this indicates if the cost should be prorated over a partial period of time.</summary>
		[Newtonsoft.Json.JsonProperty("ProrateInApplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ProrateInApplication { get; set; }

		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CustomFieldType? FieldType { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactFieldValue : FieldValue
	{
		[Newtonsoft.Json.JsonProperty("CustomAccessLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactFieldAccessLevel? CustomAccessLevel { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactIdsResponse
	{
		/// <summary>List of contact identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("ContactIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> ContactIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactsAsyncResponse
	{
		/// <summary>Unique result identifier.</summary>
		[Newtonsoft.Json.JsonProperty("ResultId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ResultId { get; set; }

		/// <summary>URL to check async result availability. We expect that client application will check this URL with some small delay (every 5 sec) until API returns a list of contacts or ProcessingState==Failed.</summary>
		[Newtonsoft.Json.JsonProperty("ResultUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ResultUrl { get; set; }

		/// <summary>Date and time when the request was queued for processing.</summary>
		[Newtonsoft.Json.JsonProperty("Requested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Requested { get; set; }

		/// <summary>Date and time when the request was processed.</summary>
		[Newtonsoft.Json.JsonProperty("Processed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Processed { get; set; }

		/// <summary>Asynchronous request state. It starts from Waiting, then server process it. Request may end in one of final states: Complete or Failed.</summary>
		[Newtonsoft.Json.JsonProperty("ProcessingState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactsAsyncResponseProcessingState? ProcessingState { get; set; }

		[Newtonsoft.Json.JsonProperty("InitialQuery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public InitialQuery InitialQuery { get; set; }

		/// <summary>In case of error, provides description of error occured.</summary>
		[Newtonsoft.Json.JsonProperty("ErrorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ErrorDetails { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactsCountResponse
	{
		/// <summary>Number of contacts that match request criteria. This field appears only if $count parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactsListResponse
	{
		/// <summary>List of contacts that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Contact> Contacts { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactsMe
	{
		/// <summary>Contact unique identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.</summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		/// <summary>Shortcut for custom field value with system code 'FirstName'</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Shortcut for custom field value with system code 'LastName'</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>Shortcut for custom field value with system code 'Organization'</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>The status of the contact's membership. The status is only included in the results if the contact is a member.</summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactsMeStatus? Status { get; set; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel5 MembershipLevel { get; set; }

		/// <summary>Indicates if the contact is an account administrator.</summary>
		[Newtonsoft.Json.JsonProperty("IsAccountAdministrator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsAccountAdministrator { get; set; }

		/// <summary>Indicates if the contact already accepted Wild Apricot's terms of use.</summary>
		[Newtonsoft.Json.JsonProperty("TermsOfUseAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? TermsOfUseAccepted { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactsResponse : ContactsAsyncResponse
	{
		/// <summary>List of contact identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("ContactIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> ContactIdentifiers { get; set; }

		/// <summary>Number of contacts that match request criteria. This field appears only if $count parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; set; }

		/// <summary>List of contacts that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Contact> Contacts { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreateContactFieldParams : EditContactFieldParams
	{
		/// <summary>Field data type.</summary>
		[Newtonsoft.Json.JsonProperty("FieldType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CreateContactFieldParamsFieldType FieldType { get; set; }

		/// <summary>Indicates whether a field is available only to members.</summary>
		[Newtonsoft.Json.JsonProperty("MemberOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MemberOnly { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreateContactParams
	{
		/// <summary>Shortcut for custom field with system code 'FirstName'</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Shortcut for custom field with system code 'LastName'</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>Shortcut for custom field with system code 'Organization'</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>Contact primary email, shortcut for custom field with system code 'Email'. Should be unique in account.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		[Newtonsoft.Json.JsonProperty("MembershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipLevel6 MembershipLevel { get; set; }

		/// <summary>Indicates whether the contact has membership. False means that the contact is a not a member or the membership is suspended.</summary>
		[Newtonsoft.Json.JsonProperty("MembershipEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MembershipEnabled { get; set; }

		/// <summary>The status of the membership. The status is only included in the results if the contact is a member.</summary>
		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CreateContactParamsStatus? Status { get; set; }

		/// <summary>New password to assign. If you don't want to change password, just skip this field.</summary>
		[Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Password { get; set; }

		/// <summary>An array of field values to assign to contact.</summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue> FieldValues { get; set; }

		/// <summary>Indicates whether to create invoice is required. Default value is **TRUE**</summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; set; }


	}

	/// <summary>Custom field data type.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum CustomFieldType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"String")]
		String = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
		DateTime = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
		Boolean = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Choice")]
		Choice = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleChoice")]
		MultipleChoice = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Number")]
		Number = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"SectionDivider")]
		SectionDivider = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"CalculatedExtraCharge")]
		CalculatedExtraCharge = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Picture")]
		Picture = 8,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EditContactFieldParams
	{
		/// <summary>New field name. Must be unique.</summary>
		[Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string FieldName { get; set; }

		/// <summary>Indicates whether a field has to be filled before the form is submitted. This limitation affects member-facing functionality only, admin always can submit form even without required fields.</summary>
		[Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsRequired { get; set; }

		/// <summary>Indicates that the field is accessible only by administrators.</summary>
		[Newtonsoft.Json.JsonProperty("AdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AdminOnly { get; set; } = false;

		[Newtonsoft.Json.JsonProperty("Access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ContactFieldAccessLevel? Access { get; set; }

		/// <summary>Shown as a tip when members or visitors fill in forms. Max length is 250 characters.</summary>
		[Newtonsoft.Json.JsonProperty("FieldInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FieldInstructions { get; set; }

		/// <summary>Sorting order to display the field in UI.</summary>
		[Newtonsoft.Json.JsonProperty("Order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Order { get; set; }

		/// <summary>List of allowed values for this field. This data is used for Choice and MultipleChoice fields, otherwise it will be ignored.</summary>
		[Newtonsoft.Json.JsonProperty("AllowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OptionsListItem> AllowedValues { get; set; }

		[Newtonsoft.Json.JsonProperty("RulesAndTermsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RulesAndTermsInfo RulesAndTermsInfo { get; set; }

		/// <summary>Collection of membership levels where the field exists. If empty collection provided, it means the field would be available for all levels.</summary>
		[Newtonsoft.Json.JsonProperty("ExistsInLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ExistsInLevels> ExistsInLevels { get; set; }

		[Newtonsoft.Json.JsonProperty("MemberAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MemberFieldAccess? MemberAccess { get; set; }

		[Newtonsoft.Json.JsonProperty("RenewalPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RenewalPolicy RenewalPolicy { get; set; }

		/// <summary>Whether the cost should be prorated over a partial period of time. Used only by fields with an associated cost.</summary>
		[Newtonsoft.Json.JsonProperty("ProrateInApplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ProrateInApplication { get; set; }

		[Newtonsoft.Json.JsonProperty("ExtraCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExtraCharge ExtraCharge { get; set; }


	}

	/// <summary>Readonly object </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ExtendedMembershipInfo
	{
		[Newtonsoft.Json.JsonProperty("PendingMembershipOrderStatusType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ExtendedMembershipInfoPendingMembershipOrderStatusType? PendingMembershipOrderStatusType { get; set; }

		[Newtonsoft.Json.JsonProperty("PendingMembershipInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public PendingMembershipInvoice PendingMembershipInvoice { get; set; }

		/// <summary>List of allowed actions related to contact. Each action is described with title and URL, which should be used in POST request.</summary>
		[Newtonsoft.Json.JsonProperty("AllowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResourceWithName> AllowedActions { get; set; }


	}

	/// <summary>This property appears for CalculatedExtraCharge fields only.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ExtraCharge
	{
		/// <summary>Indicates the type of multiplier field.
		///   ItemPrice multiplier specifies a price for each requested item.
		///   Percentage multiplier specifies a percent of field value to use as extra charge.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("MultiplierType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ExtraChargeMultiplierType MultiplierType { get; set; }

		/// <summary>value of multiplier for extra charge calculation</summary>
		[Newtonsoft.Json.JsonProperty("Multiplier", Required = Newtonsoft.Json.Required.Always)]
		public decimal Multiplier { get; set; }

		/// <summary>Minimal amount of items to request (minimal field value). For ItemPrice multiplier type only.</summary>
		[Newtonsoft.Json.JsonProperty("MinAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MinAmount { get; set; }

		/// <summary>Maximum amount of items to request (maximum field value). For ItemPrice multiplier type only.</summary>
		[Newtonsoft.Json.JsonProperty("MaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaxAmount { get; set; }

		/// <summary>Minimal extra charge. (minimal field value). For Percentage multiplier type only.</summary>
		[Newtonsoft.Json.JsonProperty("MinCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? MinCharge { get; set; }

		/// <summary>Maximum extra charge. (maximum field value). For Percentage multiplier type only.</summary>
		[Newtonsoft.Json.JsonProperty("MaxCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? MaxCharge { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class FileInfo
	{
		/// <summary>Unique attachment identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>attachment name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>http ContentType (MIME type)</summary>
		[Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ContentType { get; set; }

		/// <summary>File size</summary>
		[Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Size { get; set; }

		/// <summary>Date and time when the file has been uploaded.</summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string CreatedDate { get; set; }


	}

	/// <summary>Controls whether the member is allowed to view or modify this field. Only for member fields.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum MemberFieldAccess
	{
		[System.Runtime.Serialization.EnumMember(Value = @"EditInProfileAndInApplicationForm")]
		EditInProfileAndInApplicationForm = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"EditInProfile")]
		EditInProfile = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"EditInApplicationForm")]
		EditInApplicationForm = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"ViewOnly")]
		ViewOnly = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Nobody")]
		Nobody = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipGroupListItem
	{
		/// <summary>Unique group identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>group name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>group description</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipGroup : MembershipGroupListItem
	{
		/// <summary>Total count of group participants</summary>
		[Newtonsoft.Json.JsonProperty("ContactsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ContactsCount { get; set; }

		[Newtonsoft.Json.JsonProperty("ContactIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> ContactIds { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipLevel
	{
		/// <summary>Unique membership level identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>level name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>level description</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		/// <summary>Indicates if non-member can apply for membership with this level.</summary>
		[Newtonsoft.Json.JsonProperty("PublicCanApply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? PublicCanApply { get; set; }

		/// <summary>Indicates if membership level is individual or bundle.</summary>
		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MembershipLevelType? Type { get; set; }

		/// <summary>Maximum number of bundle members. Empty for individuals.</summary>
		[Newtonsoft.Json.JsonProperty("BundleMembersLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? BundleMembersLimit { get; set; }

		/// <summary>Price of being a member with this level of membership. Price is for RenewalPeriod.</summary>
		[Newtonsoft.Json.JsonProperty("MembershipFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? MembershipFee { get; set; }

		/// <summary>Member can switch from current level to one of levels from this list.</summary>
		[Newtonsoft.Json.JsonProperty("MemberCanChangeToLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> MemberCanChangeToLevels { get; set; }

		[Newtonsoft.Json.JsonProperty("RenewalPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MembershipRenewalPeriod RenewalPeriod { get; set; }


	}

	/// <summary>Describes membership renewal period.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipRenewalPeriod
	{
		/// <summary>Period of renewal.</summary>
		[Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MembershipRenewalPeriodKind? Kind { get; set; }

		/// <summary>Indicates if renewal period starts from join date. Otherwise, starts from dates specified in Dates field.</summary>
		[Newtonsoft.Json.JsonProperty("StartFromJoinDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartFromJoinDate { get; set; }

		/// <summary>Collection of renewal dates during a year.</summary>
		[Newtonsoft.Json.JsonProperty("Dates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Dates> Dates { get; set; }

		/// <summary>Indicates if recurring payments will be charged automatically.</summary>
		[Newtonsoft.Json.JsonProperty("AutomaticRecurringPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AutomaticRecurringPayments { get; set; }

		/// <summary>Application approval policy</summary>
		[Newtonsoft.Json.JsonProperty("ApplicationReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ApplicationReview ApplicationReview { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class OptionsListItem
	{
		/// <summary>Item identifier unique in the list</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Human-readable text label.</summary>
		[Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Label { get; set; }

		/// <summary>Option position among other options.</summary>
		[Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Position { get; set; }

		/// <summary>Indicates whether this option would be selected on form if user did not select another option.</summary>
		[Newtonsoft.Json.JsonProperty("SelectedByDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SelectedByDefault { get; set; }

		/// <summary>Extra price for selecting this option. Used only by fields with an associated cost.</summary>
		[Newtonsoft.Json.JsonProperty("ExtraCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? ExtraCost { get; set; }


	}

	/// <summary>Defines how system manages field during renewal process. Used only by multichoice fields with an associated cost.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RenewalPolicy
	{
		/// <summary>Indicates if the field should be shown in renewal form.</summary>
		[Newtonsoft.Json.JsonProperty("IncludeInRenewals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IncludeInRenewals { get; set; }

		/// <summary>Indicates whether field value can be changed during renual process. Can be set to TRUE only if IncludeInRenewals is set to TRUE.</summary>
		[Newtonsoft.Json.JsonProperty("AllowedToChangeInRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AllowedToChangeInRenewal { get; set; }


	}

	/// <summary>Additional info for fields with rules / terms conditions. Not present for other field types.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RulesAndTermsInfo
	{
		/// <summary>Terms of use label.</summary>
		[Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Text { get; set; }

		/// <summary>Url of the rules and terms document.</summary>
		[Newtonsoft.Json.JsonProperty("Link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Link { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SavedSearchListItem
	{
		/// <summary>Unique search identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Saved search name</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Save search description</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SavedSearch : SavedSearchListItem
	{
		[Newtonsoft.Json.JsonProperty("ContactIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> ContactIds { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdateContactFieldParams : EditContactFieldParams
	{
		/// <summary>Unique identifier of existing field.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdateContactParams : CreateContactParams
	{
		/// <summary>Unique contact identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ClickedLink
	{
		/// <summary>Link address.</summary>
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>the link is clicked at least once</summary>
		[Newtonsoft.Json.JsonProperty("Clicked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? Clicked { get; set; }

		/// <summary>Total number of link clicks (by all recipients).</summary>
		[Newtonsoft.Json.JsonProperty("ClicksCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ClicksCount { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CloneEvent
	{
		/// <summary>Identifier of existing event you want to clone.</summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; set; }

		/// <summary>Prefix to be added to the event title to form the new title. For example if you are cloning the event "Annual meetup" and the prefix is "yet another ", then the new event will have the title "yet another Annual meetup".</summary>
		[Newtonsoft.Json.JsonProperty("TitlePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string TitlePrefix { get; set; }


	}

	/// <summary>Email delivery status.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum DeliveryStatus
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Queued")]
		Queued = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Delivered")]
		Delivered = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Failed")]
		Failed = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailDraft
	{
		/// <summary>Unique email draft identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Date and time when the draft was created.</summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string CreatedDate { get; set; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EmailDraftType? Type { get; set; }

		/// <summary>Value for email subject. It may contain macros, which will be replaced before delivery.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Subject { get; set; }

		/// <summary>Value for email body. Usually it is HTML content with macros, which will be replaced before delivery.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Body { get; set; }

		/// <summary>Display name for reply to</summary>
		[Newtonsoft.Json.JsonProperty("ReplyToName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ReplyToName { get; set; }

		/// <summary>Email address to use as reply to.</summary>
		[Newtonsoft.Json.JsonProperty("ReplyToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ReplyToAddress { get; set; }

		/// <summary>Event identifier for which the draft has been started (if any).</summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; set; }

		[Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ShortContact Creator { get; set; }

		/// <summary>Indicates if email tracking is enabled for this email.</summary>
		[Newtonsoft.Json.JsonProperty("IsLinkTrackingAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsLinkTrackingAllowed { get; set; }

		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipients Recipients { get; set; }

		/// <summary>Date and time when the draft was last modified.</summary>
		[Newtonsoft.Json.JsonProperty("LastChangedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastChangedDate { get; set; }

		[Newtonsoft.Json.JsonProperty("Modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ShortContact Modifier { get; set; }

		/// <summary>Indicates if draft delivery is scheduled for a particular date. See ScheduledDate value.</summary>
		[Newtonsoft.Json.JsonProperty("IsScheduled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsScheduled { get; set; }

		/// <summary>Date and time when the draft will be sent.</summary>
		[Newtonsoft.Json.JsonProperty("ScheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ScheduledDate { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailDraftListResult
	{
		/// <summary>Collection of email drafts.</summary>
		[Newtonsoft.Json.JsonProperty("Emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EmailDraft> Emails { get; set; }


	}

	/// <summary>Describes how email will look like when all macros are applied.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailDraftPreview
	{
		/// <summary>Email subject with macros applied.</summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Subject { get; set; }

		/// <summary>Email body HTML with mosros applied.</summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Body { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EmailDraftType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
		Unknown = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"ContactBlast")]
		ContactBlast = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"EventAttendees")]
		EventAttendees = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventWaitlistPersons")]
		EventWaitlistPersons = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailLog : EmailLogRecords
	{
		/// <summary>A collection of email log record identifiers.</summary>
		[Newtonsoft.Json.JsonProperty("EmailsIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> EmailsIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailLogIdentifiers
	{
		/// <summary>A collection of email log record identifiers.</summary>
		[Newtonsoft.Json.JsonProperty("EmailsIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> EmailsIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailLogRecord
	{
		/// <summary>Unique email identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Date when email sending was started.</summary>
		[Newtonsoft.Json.JsonProperty("SentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SentDate { get; set; }

		/// <summary>Email subject.</summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Subject { get; set; }

		/// <summary>Email body.</summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Body { get; set; }

		[Newtonsoft.Json.JsonProperty("ReplyToName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ReplyToName { get; set; }

		[Newtonsoft.Json.JsonProperty("ReplyToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ReplyToAddress { get; set; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EmailType? Type { get; set; }

		[Newtonsoft.Json.JsonProperty("IsTrackingAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsTrackingAllowed { get; set; }

		[Newtonsoft.Json.JsonProperty("IsCopySentToAdmins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCopySentToAdmins { get; set; }

		[Newtonsoft.Json.JsonProperty("SenderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SenderId { get; set; }

		[Newtonsoft.Json.JsonProperty("SenderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SenderName { get; set; }

		[Newtonsoft.Json.JsonProperty("SendingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InitializationSourceType? SendingType { get; set; }

		[Newtonsoft.Json.JsonProperty("Origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailOrigin Origin { get; set; }

		[Newtonsoft.Json.JsonProperty("SubOriginId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SubOriginId { get; set; }

		[Newtonsoft.Json.JsonProperty("RecipientCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RecipientCount { get; set; }

		[Newtonsoft.Json.JsonProperty("ReadCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ReadCount { get; set; }

		[Newtonsoft.Json.JsonProperty("UniqueLinkClickCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? UniqueLinkClickCount { get; set; }

		[Newtonsoft.Json.JsonProperty("SuccessfullySentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? SuccessfullySentCount { get; set; }

		[Newtonsoft.Json.JsonProperty("RecipientsThatClickedAnyLinkCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RecipientsThatClickedAnyLinkCount { get; set; }

		[Newtonsoft.Json.JsonProperty("FailedCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? FailedCount { get; set; }

		[Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? InProgress { get; set; }

		/// <summary>only if email has a single recipient</summary>
		[Newtonsoft.Json.JsonProperty("Recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipient Recipient { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailLogRecords
	{
		/// <summary>Collection of email log records.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EmailLogRecord> Emails { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailOrigin
	{
		[Newtonsoft.Json.JsonProperty("OriginType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EmailOriginType? OriginType { get; set; }

		/// <summary>Unique origin identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }


	}

	/// <summary>Email origin type.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EmailOriginType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"System")]
		System = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Contact")]
		Contact = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipLevel")]
		MembershipLevel = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Event")]
		Event = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"WebPage")]
		WebPage = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"ForumTopicSubscription")]
		ForumTopicSubscription = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"FinancialDocument")]
		FinancialDocument = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"NewPasswordEmail")]
		NewPasswordEmail = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStoreOrder")]
		OnlineStoreOrder = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"PollStartAnnouncement")]
		PollStartAnnouncement = 10,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailRecipient
	{
		/// <summary>If email was sent to individual recipient, this field contains contact identifier.
		/// If email was sent to all recipients from some saved search, this field contains saved search identifier.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Recipient group type.</summary>
		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Type { get; set; }

		/// <summary>Display name of recipient or name of saved search.</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>recipient email. for IndividualRecipient and SentEmailRecipient types only</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }


	}

	/// <summary>Collection of recipients.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailRecipients : System.Collections.ObjectModel.Collection<EmailRecipient>
	{

	}

	/// <summary>list of email recipient groups</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailRecipientsParams
	{
		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EmailRecipient> Recipients { get; set; }

		/// <summary>context event identifier. not required. for Event related recipient types only</summary>
		[Newtonsoft.Json.JsonProperty("ContextEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ContextEventId { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmailScheduleParams
	{
		/// <summary>Unique email draft identifier.</summary>
		[Newtonsoft.Json.JsonProperty("DraftId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DraftId { get; set; }

		/// <summary>Date and time scheduled for sending.</summary>
		[Newtonsoft.Json.JsonProperty("ScheduleDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ScheduleDate { get; set; }

		/// <summary>Indicates if draft is scheduled for delivery. Set False to pause.</summary>
		[Newtonsoft.Json.JsonProperty("IsScheduled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsScheduled { get; set; }


	}

	/// <summary>The reason why the email was sent.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EmailType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
		Unknown = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_ActivationEmail")]
		MemberApplication_ActivationEmail = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_InitiationEmail")]
		MemberApplication_InitiationEmail = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_BundleMember_ActivationEmail")]
		MemberApplication_BundleMember_ActivationEmail = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberApplication_BundleAdmin_ActivationEmail")]
		MemberApplication_BundleAdmin_ActivationEmail = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_FreeRenewal")]
		MemberRenewal_FreeRenewal = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalPending")]
		MemberRenewal_RenewalPending = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalConfirmed")]
		MemberRenewal_RenewalConfirmed = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalCanceledByMember")]
		MemberRenewal_RenewalCanceledByMember = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_MemberRenewal_RecurringRenewalFailed")]
		MemberRenewal_MemberRenewal_RecurringRenewalFailed = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_Online_PaymentSuccessfull")]
		MemberRenewal_Online_PaymentSuccessfull = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_AdvanceRenewalReminder1")]
		MemberRenewal_AdvanceRenewalReminder1 = 11,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_AdvanceRenewalReminder2")]
		MemberRenewal_AdvanceRenewalReminder2 = 12,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_RenewalDateNotice")]
		MemberRenewal_RenewalDateNotice = 13,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_GracePeriod")]
		MemberRenewal_GracePeriod = 14,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberRenewal_Lapsed")]
		MemberRenewal_Lapsed = 15,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberLevelChange_InitiationEmail")]
		MemberLevelChange_InitiationEmail = 16,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberLevelChange_ActivationEmail")]
		MemberLevelChange_ActivationEmail = 17,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation_Confirmation")]
		Donation_Confirmation = 18,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OfflinePayment_FreeLevelConfirmationEmail")]
		EventRegistration_OfflinePayment_FreeLevelConfirmationEmail = 19,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OfflinePayment_PaidLevelConfirmationEmail")]
		EventRegistration_OfflinePayment_PaidLevelConfirmationEmail = 20,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OfflinePayment_PaidLevelPendingEmail")]
		EventRegistration_OfflinePayment_PaidLevelPendingEmail = 21,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_NewWaitlistEntryEmail")]
		EventRegistration_NewWaitlistEntryEmail = 22,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_CanceledEmail")]
		EventRegistration_CanceledEmail = 23,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_OnlinePayment_PaidLevelConfirmationEmail")]
		EventRegistration_OnlinePayment_PaidLevelConfirmationEmail = 24,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Reminder1")]
		EventRegistration_Reminder1 = 25,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Reminder2")]
		EventRegistration_Reminder2 = 26,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Reminder3")]
		EventRegistration_Reminder3 = 27,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Announcement1")]
		EventRegistration_Announcement1 = 28,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Announcement2")]
		EventRegistration_Announcement2 = 29,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration_Announcement3")]
		EventRegistration_Announcement3 = 30,

		[System.Runtime.Serialization.EnumMember(Value = @"EmailBlast_Members")]
		EmailBlast_Members = 31,

		[System.Runtime.Serialization.EnumMember(Value = @"EmailBlast_Registrations")]
		EmailBlast_Registrations = 32,

		[System.Runtime.Serialization.EnumMember(Value = @"EmailBlast_WaitlistPersons")]
		EmailBlast_WaitlistPersons = 33,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_Invoice")]
		Finances_Invoice = 34,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_PaymentReceipt")]
		Finances_PaymentReceipt = 35,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_DonationReceipt")]
		Finances_DonationReceipt = 36,

		[System.Runtime.Serialization.EnumMember(Value = @"Finances_RefundNote")]
		Finances_RefundNote = 37,

		[System.Runtime.Serialization.EnumMember(Value = @"Contact_Password")]
		Contact_Password = 38,

		[System.Runtime.Serialization.EnumMember(Value = @"SubscriptionForm_Confirmation")]
		SubscriptionForm_Confirmation = 39,

		[System.Runtime.Serialization.EnumMember(Value = @"Public_MemberToMemberEmail")]
		Public_MemberToMemberEmail = 40,

		[System.Runtime.Serialization.EnumMember(Value = @"Poll_Announcement_Notification")]
		Poll_Announcement_Notification = 41,

		[System.Runtime.Serialization.EnumMember(Value = @"ForgottenPasswordRequest")]
		ForgottenPasswordRequest = 42,

		[System.Runtime.Serialization.EnumMember(Value = @"ForumNotification")]
		ForumNotification = 43,

		[System.Runtime.Serialization.EnumMember(Value = @"ForumTopicNotification")]
		ForumTopicNotification = 44,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStore_Order")]
		OnlineStore_Order = 45,

	}

	/// <summary>Email initialization source type.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InitializationSourceType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
		Automatic = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Manual")]
		Manual = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SendDraftParams
	{
		/// <summary>Unique email draft identifier.</summary>
		[Newtonsoft.Json.JsonProperty("DraftId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DraftId { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SendEmailParams
	{
		/// <summary>Subject of email message. May contain macros.</summary>
		[Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Subject { get; set; }

		/// <summary>Email body in HTML format. May contain macros.</summary>
		[Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Body { get; set; }

		/// <summary>Email ReplyTo address.</summary>
		[Newtonsoft.Json.JsonProperty("ReplyToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ReplyToAddress { get; set; }

		/// <summary>Email ReplyTo display name.</summary>
		[Newtonsoft.Json.JsonProperty("ReplyToName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ReplyToName { get; set; }

		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EmailRecipients Recipients { get; set; }

		/// <summary>Unique event identifier. Required if email should be sent to event-related recipients, e.g. all attendees.
		///   See EmailRecipient description for details.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SentEmailRecipient
	{
		/// <summary>Contact identifier with used email address.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("ContactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ContactId { get; set; }

		/// <summary>Event regisration Id if the email was sent to an event attendee.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("EventRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventRegistrationId { get; set; }

		/// <summary>first name of recipient.</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>last name of recipient.</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>organization of recipient.</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>recipient email.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>display name of recipient (Last, First names (if set) or Organization).</summary>
		[Newtonsoft.Json.JsonProperty("RecipientName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RecipientName { get; set; }

		/// <summary>email has been successfully sent.</summary>
		[Newtonsoft.Json.JsonProperty("IsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsDelivered { get; set; }

		/// <summary>email has been opened/viewed.</summary>
		[Newtonsoft.Json.JsonProperty("IsOpened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsOpened { get; set; }

		[Newtonsoft.Json.JsonProperty("ClickedLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ClickedLink> ClickedLinks { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SentEmailRecipientsRecords
	{
		/// <summary>Collection of email recipients.</summary>
		[Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<SentEmailRecipient> Recipients { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ShortContact
	{
		/// <summary>Unique contact identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Contact first name</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Contact last name</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistration
	{
		/// <summary>Unique identifier of event registration</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Url { get; set; }

		[Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Always)]
		public EventStub Event { get; set; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public LinkedResourceWithName Contact { get; set; }

		[Newtonsoft.Json.JsonProperty("RegistrationType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public LinkedResourceWithName RegistrationType { get; set; }

		/// <summary>Unique identifier of event registration type</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypeId", Required = Newtonsoft.Json.Required.Always)]
		public int RegistrationTypeId { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public GuestRegistrationsSummary GuestRegistrationsSummary { get; set; }

		/// <summary>Contact display name.</summary>
		[Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string DisplayName { get; set; }

		/// <summary>Contact display name.</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Organization { get; set; }

		/// <summary>Indicates if registrant is already checked in for event.</summary>
		[Newtonsoft.Json.JsonProperty("IsCheckedIn", Required = Newtonsoft.Json.Required.Always)]
		public bool IsCheckedIn { get; set; } = false;

		/// <summary>The fee for this registration including all extra charges and taxes.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFee", Required = Newtonsoft.Json.Required.Always)]
		public decimal RegistrationFee { get; set; }

		/// <summary>The sum that the registrant has already paid for the registration.</summary>
		[Newtonsoft.Json.JsonProperty("PaidSum", Required = Newtonsoft.Json.Required.Always)]
		public decimal PaidSum { get; set; }

		/// <summary>Indicates if the registrant has already paid for the registration.</summary>
		[Newtonsoft.Json.JsonProperty("IsPaid", Required = Newtonsoft.Json.Required.Always)]
		public bool IsPaid { get; set; } = false;

		/// <summary>A collection of registration fields values</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue> RegistrationFields { get; set; }

		/// <summary>Indicates whether this registration can be shown to other event registrants.</summary>
		[Newtonsoft.Json.JsonProperty("ShowToPublic", Required = Newtonsoft.Json.Required.Always)]
		public bool ShowToPublic { get; set; } = false;

		/// <summary>Date and time when registration was created. (Account local time)</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string RegistrationDate { get; set; }

		/// <summary>Some additional notes about this registration.</summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Memo { get; set; }

		/// <summary>Boolean. True if this is a guest registration, otherwise false.</summary>
		[Newtonsoft.Json.JsonProperty("IsGuestRegistration", Required = Newtonsoft.Json.Required.Always)]
		public bool IsGuestRegistration { get; set; } = false;

		/// <summary>Indicates if event registration is in waitlist.</summary>
		[Newtonsoft.Json.JsonProperty("OnWaitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? OnWaitlist { get; set; } = false;

		/// <summary>Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.</summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; set; } = false;

		[Newtonsoft.Json.JsonProperty("ParentRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResource ParentRegistration { get; set; }

		[Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationStatus? Status { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationPost
	{
		/// <summary>Unique identifier of event registration</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		[Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Event2 Event { get; set; } = new Event2();

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Contact2 Contact { get; set; } = new Contact2();

		/// <summary>Unique identifier of event registration type</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypeId", Required = Newtonsoft.Json.Required.Always)]
		public int RegistrationTypeId { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public GuestRegistrationsSummary GuestRegistrationsSummary { get; set; }

		/// <summary>Indicates if registrant is already checked in on event.</summary>
		[Newtonsoft.Json.JsonProperty("IsCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCheckedIn { get; set; } = false;

		/// <summary>A collection of registration fields values</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue> RegistrationFields { get; set; }

		/// <summary>Indicates whether this registration can be shown to other event registrants.</summary>
		[Newtonsoft.Json.JsonProperty("ShowToPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ShowToPublic { get; set; } = false;

		/// <summary>Date and time when registration was created. (Account local time)</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationDate { get; set; }

		/// <summary>Some additional notes about this registration.</summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Memo { get; set; }

		/// <summary>Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.</summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; set; } = false;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationPut
	{
		/// <summary>Unique identifier of event registration</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; }

		/// <summary>Unique identifier of event registration type</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RegistrationTypeId { get; set; }

		/// <summary>Indicates if registrant is already checked in on event.</summary>
		[Newtonsoft.Json.JsonProperty("IsCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCheckedIn { get; set; }

		/// <summary>A collection of registration fields values</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue> RegistrationFields { get; set; }

		/// <summary>Indicates whether this registration can be shown to other event registrants.</summary>
		[Newtonsoft.Json.JsonProperty("ShowToPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ShowToPublic { get; set; }

		/// <summary>Some additional notes about this registration.</summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Memo { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public GuestRegistrationsSummary GuestRegistrationsSummary { get; set; }

		/// <summary>Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.</summary>
		[Newtonsoft.Json.JsonProperty("RecreateInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RecreateInvoice { get; set; }


	}

	/// <summary>List of event registrations that matches request criteria.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationsResponse : System.Collections.ObjectModel.Collection<EventRegistration>
	{

	}

	/// <summary>Describes event registration status
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventRegistrationStatus
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Paid")]
		Paid = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Unpaid")]
		Unpaid = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PartiallyPaid")]
		PartiallyPaid = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Canceled")]
		Canceled = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Free")]
		Free = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"NoInvoice")]
		NoInvoice = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"OnWaitlist")]
		OnWaitlist = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventStub
	{
		/// <summary>Event identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Event Url to get event details from API.</summary>
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Event title.</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Date and time when the event is scheduled to start.</summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string StartDate { get; set; }

		/// <summary>Date and time when the event is scheduled to end. Could be empty.</summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EndDate { get; set; }

		/// <summary>Location where the event will take place.</summary>
		[Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Location { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class GuestRegistrationsSummary
	{
		/// <summary>Number of guests registered along with the registrant. If event registration type requires guests registration with details (contact information, etc.), this value is 0.</summary>
		[Newtonsoft.Json.JsonProperty("NumberOfGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NumberOfGuests { get; set; }

		/// <summary>Number of guests who already checked in. If event registration type requires guests registration with details (contact information, etc.), this value is null.</summary>
		[Newtonsoft.Json.JsonProperty("NumberOfGuestsCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NumberOfGuestsCheckedIn { get; set; }

		/// <summary>List of guest registrations links. If event registration type expects guest registration by number (without contact information), this value is null. This value cannot be saved or updated using API.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("GuestRegistrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> GuestRegistrations { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventEditParams
	{
		/// <summary>Unique identifier of event. This field should be provided only when updating existing event.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Event title</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		/// <summary>Indicates if event is simple (RSVP) or regular.</summary>
		[Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventEditParamsEventType EventType { get; set; }

		/// <summary>Date and time when the event is scheduled to start. If no time offset is specified, counts as UTC and will be converted into event timezone.</summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string StartDate { get; set; }

		/// <summary>Indicates if event start time is specified. False means that StartDate contains only date component.</summary>
		[Newtonsoft.Json.JsonProperty("StartTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartTimeSpecified { get; set; }

		/// <summary>Date and time when the event is scheduled to end. Could be empty. If no time offset is specified, counts as UTC and will be converted into event timezone.</summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EndDate { get; set; }

		/// <summary>Indicates if event end time is specified. False means that EndDate contains only date component.</summary>
		[Newtonsoft.Json.JsonProperty("EndTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EndTimeSpecified { get; set; }

		/// <summary>Location where the event will take place.</summary>
		[Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Location { get; set; }

		/// <summary>Indicates that registration to this event is enabled</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RegistrationEnabled { get; set; }

		/// <summary>A collection of tags associated with the event.</summary>
		[Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string> Tags { get; set; }

		[Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventDetailsEditParams Details { get; set; }

		/// <summary>Collection of event sessions. Exist in multisessions events only.</summary>
		[Newtonsoft.Json.JsonProperty("Sessions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventSesssion> Sessions { get; set; }

		/// <summary>Maximum number of registrations for this event.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RegistrationsLimit { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventDetailsEditParams
	{
		/// <summary>Full event description in HTML format.</summary>
		[Newtonsoft.Json.JsonProperty("DescriptionHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DescriptionHtml { get; set; }

		/// <summary>A description how attendee can pay for attendance in this event. Payment instructions for this event only.</summary>
		[Newtonsoft.Json.JsonProperty("PaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PaymentInstructions { get; set; }

		[Newtonsoft.Json.JsonProperty("TimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public TimeZone TimeZone { get; set; }

		[Newtonsoft.Json.JsonProperty("AccessControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAccessControl AccessControl { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventGuestRegistrationSettings GuestRegistrationSettings { get; set; }

		/// <summary>Link to contact, who is set as organizer for this event.</summary>
		[Newtonsoft.Json.JsonProperty("Organizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Organizer Organizer { get; set; }

		[Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventPaymentMethodType? PaymentMethod { get; set; }

		/// <summary>Additional event information to be inserted in registration confirmation email</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationConfirmationExtraInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationConfirmationExtraInfo { get; set; }

		/// <summary>This text will be shown above Register button on Event details</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationMessage { get; set; }

		/// <summary>Indicates if email copy should be sent according to email routing setting.</summary>
		[Newtonsoft.Json.JsonProperty("SendEmailCopy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SendEmailCopy { get; set; }

		/// <summary>Indicates if waitlist feature is enabled to the event.</summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; set; }

		[Newtonsoft.Json.JsonProperty("WaitlistSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventWaitlistSettings WaitlistSettings { get; set; }

		/// <summary>Indicates if it is allowed to have multiple registrations for the same contact.</summary>
		[Newtonsoft.Json.JsonProperty("MultipleRegistrationAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MultipleRegistrationAllowed { get; set; }

		[Newtonsoft.Json.JsonProperty("AttendeesDisplaySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAttendeesDisplaySettings AttendeesDisplaySettings { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CheckInParams
	{
		/// <summary>Event registration Id.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationId", Required = Newtonsoft.Json.Required.Always)]
		public int RegistrationId { get; set; }

		/// <summary>Check in (true) or check out (false).</summary>
		[Newtonsoft.Json.JsonProperty("CheckedIn", Required = Newtonsoft.Json.Required.Always)]
		public bool CheckedIn { get; set; }

		/// <summary>For event registrations with anonymous guests (guests as number), sets number of checked-in guests.</summary>
		[Newtonsoft.Json.JsonProperty("CheckedInGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CheckedInGuests { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Event
	{
		/// <summary>Unique event identifier</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Url { get; set; }

		/// <summary>Event title</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		/// <summary>Indicates if event is simple (RSVP) or regular.</summary>
		[Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventType EventType { get; set; }

		/// <summary>Date and time when the event is scheduled to start.</summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string StartDate { get; set; }

		/// <summary>Indicates if event start time is specified. False means that StartDate contains only date component.</summary>
		[Newtonsoft.Json.JsonProperty("StartTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartTimeSpecified { get; set; }

		/// <summary>Date and time when the event is scheduled to end. Could be empty.</summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EndDate { get; set; }

		/// <summary>Indicates if event end time is specified. False means that EndDate contains only date component.</summary>
		[Newtonsoft.Json.JsonProperty("EndTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EndTimeSpecified { get; set; }

		/// <summary>Location where the event will take place.</summary>
		[Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Location { get; set; }

		/// <summary>Indicates whether registration to this event is enabled</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? RegistrationEnabled { get; set; }

		/// <summary>Indicates that at least one registration type is enabled for this event.</summary>
		[Newtonsoft.Json.JsonProperty("HasEnabledRegistrationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? HasEnabledRegistrationTypes { get; set; }

		[Newtonsoft.Json.JsonProperty("AccessLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventAccessLevel? AccessLevel { get; set; }

		/// <summary>A collection of tags associated with the event.</summary>
		[Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string> Tags { get; set; }

		[Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventDetails Details { get; set; }

		/// <summary>Collection of event sessions. Exist in multisessions events only.</summary>
		[Newtonsoft.Json.JsonProperty("Sessions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventSesssion> Sessions { get; set; }

		/// <summary>Maximum number of registrations for this event.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationsLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RegistrationsLimit { get; set; }

		[Newtonsoft.Json.JsonProperty("InviteeStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventInviteeStatistics InviteeStat { get; set; }

		/// <summary>Number of participants already registered for this event but not confirmed yet.</summary>
		[Newtonsoft.Json.JsonProperty("PendingRegistrationsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PendingRegistrationsCount { get; set; }

		/// <summary>Number of participants already registered for this event and already confirmed.</summary>
		[Newtonsoft.Json.JsonProperty("ConfirmedRegistrationsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? ConfirmedRegistrationsCount { get; set; }

		/// <summary>Number of attendees already checked in on this event.</summary>
		[Newtonsoft.Json.JsonProperty("CheckedInAttendeesNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CheckedInAttendeesNumber { get; set; }


	}

	/// <summary>Describes event availability.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventAccessControl
	{
		[Newtonsoft.Json.JsonProperty("AccessLevel", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventAccessLevel AccessLevel { get; set; }

		/// <summary>If AccessLevel is Restricted, then indicates if the event is available to any member on any level.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableForAnyLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AvailableForAnyLevel { get; set; }

		/// <summary>Event is available to members who are on these levels.
		/// This field appears only if AccessLevel is Restricted and AvailableForAnyLevel is false.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableForLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> AvailableForLevels { get; set; }

		/// <summary>If AccessLevel is Restricted, then indicates if the event is available to any member in any membership group.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableForAnyGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AvailableForAnyGroup { get; set; }

		/// <summary>Event is available to members who are any of these groups.
		/// This field appears only if AccessLevel is Restricted and AvailableForAnyGroup is false.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableForGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> AvailableForGroups { get; set; }


	}

	/// <summary>
	/// Event accessability.
	///   - Public means event accessible for everyone
	///   - AdminOnly means event accessible for administrators only
	///   - Restricted means event accessible for specific membership levels or groups.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventAccessLevel
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Public")]
		Public = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"AdminOnly")]
		AdminOnly = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Restricted")]
		Restricted = 2,

	}

	/// <summary>Settings for section "List of event registrants" on UI.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventAttendeesDisplaySettings
	{
		[Newtonsoft.Json.JsonProperty("VisibleTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ContactFieldAccessLevel VisibleTo { get; set; }

		/// <summary>Indicates if pending registrants should be included in the list of registrants.</summary>
		[Newtonsoft.Json.JsonProperty("ShowPendingAttendees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ShowPendingAttendees { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventDetails
	{
		/// <summary>Full event description in HTML format. Important - Links to images can be relative.</summary>
		[Newtonsoft.Json.JsonProperty("DescriptionHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DescriptionHtml { get; set; }

		/// <summary>A description how registrant can pay for attendance to this event. Payment instructions for this event only.</summary>
		[Newtonsoft.Json.JsonProperty("PaymentInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PaymentInstructions { get; set; }

		[Newtonsoft.Json.JsonProperty("TimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public TimeZone TimeZone { get; set; }

		/// <summary>Collection of configured registration types for the event.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventRegistrationType> RegistrationTypes { get; set; }

		/// <summary>Collection of fields registrant should fill during registration process.</summary>
		[Newtonsoft.Json.JsonProperty("EventRegistrationFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EventRegistrationFieldDescription> EventRegistrationFields { get; set; }

		/// <summary>Total sum paid for all registrations to this event. This is a read-only property.</summary>
		[Newtonsoft.Json.JsonProperty("TotalPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? TotalPaid { get; set; }

		/// <summary>Total sum due, but not necessarily paid yet for all registrations related to this event. This is a read-only property.</summary>
		[Newtonsoft.Json.JsonProperty("TotalDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? TotalDue { get; set; }

		[Newtonsoft.Json.JsonProperty("AccessControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAccessControl AccessControl { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventGuestRegistrationSettings GuestRegistrationSettings { get; set; }

		[Newtonsoft.Json.JsonProperty("Organizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Organizer2 Organizer { get; set; }

		[Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventPaymentMethodType? PaymentMethod { get; set; }

		/// <summary>Additional event information to be inserted in registration confirmation email</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationConfirmationExtraInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationConfirmationExtraInfo { get; set; }

		/// <summary>This text will be shown above Register button on Event details</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationMessage { get; set; }

		/// <summary>Indicates if email copy should be sent according to email routing settings.</summary>
		[Newtonsoft.Json.JsonProperty("SendEmailCopy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? SendEmailCopy { get; set; }

		/// <summary>Indicates if waitlist feature is enabled for the event.</summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; set; }

		[Newtonsoft.Json.JsonProperty("WaitlistSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventWaitlistSettings WaitlistSettings { get; set; }

		/// <summary>Indicates if multiple registrations are allowed for the same contact.</summary>
		[Newtonsoft.Json.JsonProperty("MultipleRegistrationAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? MultipleRegistrationAllowed { get; set; }

		[Newtonsoft.Json.JsonProperty("AttendeesDisplaySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventAttendeesDisplaySettings AttendeesDisplaySettings { get; set; }


	}

	/// <summary>Describes how guests are registered. Allowed values are
	/// - Disabled - guest registration is not allowed - NumberOfGuests - number of guests should be specified. - CollectContactDetails - contact information should be collected for each guest. - CollectFullInfo - full registration info should be collected for each guest.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventGuestRegistrationPolicy
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
		Disabled = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"NumberOfGuests")]
		NumberOfGuests = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CollectContactDetails")]
		CollectContactDetails = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"CollectFullInfo")]
		CollectFullInfo = 3,

	}

	/// <summary>Control how system works with guest registrations for specific event.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventGuestRegistrationSettings
	{
		/// <summary>Indicates if guest registrations are allowed.</summary>
		[Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? Enabled { get; set; }

		/// <summary>Indicates whether guests are automatically added to database after the main registrant confirms the registration</summary>
		[Newtonsoft.Json.JsonProperty("CreateContactMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventGuestRegistrationSettingsCreateContactMode? CreateContactMode { get; set; }


	}

	/// <summary>Statistics related to invitees to RSVP events.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventInviteeStatistics
	{
		/// <summary>Number of invitees who did not respond yet.</summary>
		[Newtonsoft.Json.JsonProperty("NotResponded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NotResponded { get; set; }

		/// <summary>Number of invitees who answered NO to the invite.</summary>
		[Newtonsoft.Json.JsonProperty("NotAttended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? NotAttended { get; set; }

		/// <summary>Number of invitees who answered YES to the invite.</summary>
		[Newtonsoft.Json.JsonProperty("Attended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Attended { get; set; }

		/// <summary>Number of invitees who answered MAY BE to the invite.</summary>
		[Newtonsoft.Json.JsonProperty("MaybeAttended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaybeAttended { get; set; }


	}

	/// <summary>How attendees can pay for the ticket.
	/// 
	///   - OnlineAndOffline
	///   - OfflineOnly
	///   - OnlineOnly</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventPaymentMethodType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineAndOffline")]
		OnlineAndOffline = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"OfflineOnly")]
		OfflineOnly = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineOnly")]
		OnlineOnly = 3,

	}

	/// <summary>Indicates if it is possible for attendee to self-cancel event registration.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventRegistrationCancellationBehavior
	{
		[System.Runtime.Serialization.EnumMember(Value = @"DoNotAllow")]
		DoNotAllow = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"AllowUpToPeriodBeforeEvent")]
		AllowUpToPeriodBeforeEvent = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Allow")]
		Allow = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationFieldDescription : EntityFieldDescriptionWithExtraCharge
	{
		/// <summary>Indicated is the field is common for all contacts or custom for the event.</summary>
		[Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationFieldDescriptionKind? Kind { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationType
	{
		/// <summary>Unique event registration type identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Indicates whether this registration type is enabled</summary>
		[Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsEnabled { get; set; }

		/// <summary>Identifier of event related to the registration type.</summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? EventId { get; set; }

		/// <summary>Registraton type title.</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Plain text description for the event registration type.</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		/// <summary>Base price registrant pays for this registration type.</summary>
		[Newtonsoft.Json.JsonProperty("BasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? BasePrice { get; set; }

		/// <summary>Price for each additional guest.</summary>
		[Newtonsoft.Json.JsonProperty("GuestPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? GuestPrice { get; set; }

		/// <summary>Indicates whether account tax scope settings should be used to calculate final price.</summary>
		[Newtonsoft.Json.JsonProperty("UseTaxScopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? UseTaxScopeSettings { get; set; }

		[Newtonsoft.Json.JsonProperty("Availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationTypeAvailability? Availability { get; set; }

		/// <summary>Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationCode { get; set; }

		/// <summary>Which membership levels can apply for event. This property has value only if Availability is MembersOnly.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableForMembershipLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> AvailableForMembershipLevels { get; set; }

		/// <summary>This registration type is available starting from this date. Can be null.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AvailableFrom { get; set; }

		/// <summary>This registration type is available until this date. Can be null.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableThrough", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AvailableThrough { get; set; }

		/// <summary>Maximum number of registrants for this registration type.</summary>
		[Newtonsoft.Json.JsonProperty("MaximumRegistrantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaximumRegistrantsCount { get; set; }

		/// <summary>Current number of registrants for this registration type.</summary>
		[Newtonsoft.Json.JsonProperty("CurrentRegistrantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CurrentRegistrantsCount { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventGuestRegistrationPolicy? GuestRegistrationPolicy { get; set; }

		[Newtonsoft.Json.JsonProperty("UnavailabilityPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationUnavailabilityPolicy? UnavailabilityPolicy { get; set; }

		[Newtonsoft.Json.JsonProperty("CancellationBehaviour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationCancellationBehavior? CancellationBehaviour { get; set; }

		/// <summary>In case if CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field indicates the minimum number of days before the event that cancellations are allowed.</summary>
		[Newtonsoft.Json.JsonProperty("CancellationDaysBeforeEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CancellationDaysBeforeEvent { get; set; }

		/// <summary>Indicated if registrant should be added to waitlist if registrations have reached their limit.</summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; set; }


	}

	/// <summary>Indicates who the registration type is available to.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventRegistrationTypeAvailability
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Everyone")]
		Everyone = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MembersOnly")]
		MembersOnly = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CodeRequired")]
		CodeRequired = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationTypeEditParams
	{
		/// <summary>Unique event identifier. This field should be provided only when updating existing event registration type</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Identifier of event related to the registration type.</summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Always)]
		public int EventId { get; set; }

		/// <summary>Registraton type title. This field should be provided only when creating new registration type
		/// </summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Indicates whether this registration type is enabled</summary>
		[Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsEnabled { get; set; }

		/// <summary>Plain text description for the event registration type.</summary>
		[Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		/// <summary>Base price registrant pays with this registration type.</summary>
		[Newtonsoft.Json.JsonProperty("BasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? BasePrice { get; set; }

		/// <summary>Price for each additional guest.</summary>
		[Newtonsoft.Json.JsonProperty("GuestPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? GuestPrice { get; set; }

		/// <summary>Indicates whether account tax scope settings should be used to calculate final price. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to default value
		/// </summary>
		[Newtonsoft.Json.JsonProperty("UseTaxScopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? UseTaxScopeSettings { get; set; } = false;

		[Newtonsoft.Json.JsonProperty("Availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationTypeAvailability? Availability { get; set; }

		/// <summary>Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired.</summary>
		[Newtonsoft.Json.JsonProperty("RegistrationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RegistrationCode { get; set; }

		/// <summary>Which membership levels can apply for event. This property has value only if Availability is MembersOnly.</summary>
		[Newtonsoft.Json.JsonProperty("AvailableForMembershipLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> AvailableForMembershipLevels { get; set; }

		/// <summary>This registration type is available starting from this date. Can be null. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AvailableFrom { get; set; }

		/// <summary>This registration type is available until this date. Can be null. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null
		/// </summary>
		[Newtonsoft.Json.JsonProperty("AvailableThrough", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string AvailableThrough { get; set; }

		/// <summary>Maximum number of registrants for this registration type.</summary>
		[Newtonsoft.Json.JsonProperty("MaximumRegistrantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaximumRegistrantsCount { get; set; }

		[Newtonsoft.Json.JsonProperty("GuestRegistrationPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventGuestRegistrationPolicy? GuestRegistrationPolicy { get; set; }

		[Newtonsoft.Json.JsonProperty("UnavailabilityPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationUnavailabilityPolicy? UnavailabilityPolicy { get; set; }

		[Newtonsoft.Json.JsonProperty("CancellationBehaviour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventRegistrationCancellationBehavior? CancellationBehaviour { get; set; }

		/// <summary>If CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field contains minimum number of days before the event that cancellations are allowed</summary>
		[Newtonsoft.Json.JsonProperty("CancellationDaysBeforeEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? CancellationDaysBeforeEvent { get; set; }

		/// <summary>Indicated whether registrant should be placed on waitlist if registrations have reached their limit.</summary>
		[Newtonsoft.Json.JsonProperty("IsWaitlistEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsWaitlistEnabled { get; set; }


	}

	/// <summary>List of event registration types that match the request criteria.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistrationTypeResponse : System.Collections.ObjectModel.Collection<EventRegistrationType>
	{

	}

	/// <summary>Indicates what is displayed if the registration type is not available for a particular visitor.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventRegistrationUnavailabilityPolicy
	{
		[System.Runtime.Serialization.EnumMember(Value = @"ShowDisabled")]
		ShowDisabled = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Hide")]
		Hide = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventSesssion
	{
		/// <summary>Unique event session identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>Automatically generated session title.</summary>
		[Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Title { get; set; }

		/// <summary>Date and time when the event session is scheduled to start.</summary>
		[Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string StartDate { get; set; }

		/// <summary>Indicates if session start time is specified. False means that StartDate contains only date component.</summary>
		[Newtonsoft.Json.JsonProperty("StartTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? StartTimeSpecified { get; set; }

		/// <summary>Date and time when the event session is scheduled to end. Could be empty.</summary>
		[Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EndDate { get; set; }

		/// <summary>Indicates if session end time is specified. False means that EndDate contains only date component.</summary>
		[Newtonsoft.Json.JsonProperty("EndTimeSpecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? EndTimeSpecified { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventsCountResponse
	{
		/// <summary>Number of events that match request criteria. This field appears only if $count parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventsListResponse
	{
		/// <summary>List of events that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Event> Events { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventIdsResponse
	{
		/// <summary>List of event identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("EventsIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> EventsIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventsResponse : EventIdsResponse
	{
		/// <summary>List of events that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Event> Events { get; set; }

		/// <summary>Number of events that match request criteria. This field appears only if $count parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Count { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventWaitlistSettings
	{
		/// <summary>Indicates how the waitlist works for the event.
		/// 
		///  - None - waitlist is not enabled
		///  - Manual - people can be added to a waitlist and then automatically registered in the order they were added, as sufficient spaces open up
		///  - Auto - people can be added to a waitlist and then manually registered by an administrator or by themselves once spaces become available</summary>
		[Newtonsoft.Json.JsonProperty("WaitlistType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventWaitlistSettingsWaitlistType? WaitlistType { get; set; }

		/// <summary>Indicates what information should be collected for people being added to the waitlist.</summary>
		[Newtonsoft.Json.JsonProperty("InformationToCollect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EventWaitlistSettingsInformationToCollect? InformationToCollect { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RegisterFromWaitlistParams
	{
		/// <summary>Event registration Id.</summary>
		[Newtonsoft.Json.JsonProperty("WaitlistRegistrationId", Required = Newtonsoft.Json.Required.Always)]
		public int WaitlistRegistrationId { get; set; }

		/// <summary>Event Id.</summary>
		[Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Always)]
		public int EventId { get; set; }

		/// <summary>Defines if invoice should be generated in case if registration is considered paid (registration fee &gt; 0 or any extra costs selected)</summary>
		[Newtonsoft.Json.JsonProperty("GenerateInvoice", Required = Newtonsoft.Json.Required.Always)]
		public bool GenerateInvoice { get; set; } = true;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class AllocateInvoiceParams
	{
		/// <summary>Unique invoice identifier.</summary>
		[Newtonsoft.Json.JsonProperty("InvoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? InvoiceId { get; set; }

		/// <summary>Allocating amount.</summary>
		[Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Amount { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class AuditItemsListResult
	{
		/// <summary>List of audit log items that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<AuditLogItem> Items { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class AuditLogItem
	{
		/// <summary>Unique identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		/// <summary>Item creation date.</summary>
		[Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? Timestamp { get; set; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact3 Contact { get; set; }

		/// <summary>Contact first name</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Contact last name</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>Contact organization</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>Contact primary email.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>Log item text.</summary>
		[Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Message { get; set; }

		/// <summary>Log item severity level.</summary>
		[Newtonsoft.Json.JsonProperty("Severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemSeverity? Severity { get; set; }

		/// <summary>The origin of the audit log entry.</summary>
		[Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemOrderType? OrderType { get; set; }

		/// <summary>Collection of audit log item properties that contains all technical information about transaction and other linked documents.</summary>
		[Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object Properties { get; set; }

		[Newtonsoft.Json.JsonProperty("Document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Document Document { get; set; }

		/// <summary>Related document type.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemDocumentType? DocumentType { get; set; }

		/// <summary>Action performed on related document type.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public AuditLogItemDocumentAction? DocumentAction { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreateFinanceDocument
	{
		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; set; }

		/// <summary>Document date.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; set; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact4 Contact { get; set; }

		/// <summary>Date and time when the document was created.</summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? CreatedDate { get; set; }

		[Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public CreatedBy CreatedBy { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreateInvoiceParams
	{
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; set; }

		/// <summary>Document date.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; set; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact5 Contact { get; set; }

		[Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public CreatedBy2 CreatedBy { get; set; }

		/// <summary>Date and time when the document was last modified.  Could be null.</summary>
		[Newtonsoft.Json.JsonProperty("UpdatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? UpdatedDate { get; set; }

		[Newtonsoft.Json.JsonProperty("UpdatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public UpdatedBy UpdatedBy { get; set; }

		/// <summary>Invoice number.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DocumentNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InvoiceOrderType? OrderType { get; set; }

		[Newtonsoft.Json.JsonProperty("OrderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OrderDetailRecord> OrderDetails { get; set; }

		/// <summary>Internal note on invoice. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Memo { get; set; }

		/// <summary>Comment on invoice. Visible to both administrators and the person being invoicec.</summary>
		[Newtonsoft.Json.JsonProperty("PublicMemo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicMemo { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreatePaymentModel
	{
		/// <summary>Payment amount.</summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; set; }

		/// <summary>Document date.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; set; }

		/// <summary>If not null or empty then invoices with these IDs will be settled to new payment.</summary>
		[Newtonsoft.Json.JsonProperty("Invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LinkedResource> Invoices { get; set; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact6 Contact { get; set; }

		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResource Tender { get; set; }

		/// <summary>Internal note on payment. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment to payor. Visible to both administrators and payor.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		[Newtonsoft.Json.JsonProperty("PaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? PaymentType { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreateRefundParams : CreateFinanceDocument
	{
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName Tender { get; set; }

		/// <summary>Internal note on refund. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment on refund. Visible to both administrators and the person being refunded.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		/// <summary>The previously settled amount of the payment.</summary>
		[Newtonsoft.Json.JsonProperty("SettledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? SettledValue { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DocumentParam
	{
		/// <summary>Unique finance document identifier.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DocumentId { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Donation
	{
		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact7 Contact { get; set; }

		[Newtonsoft.Json.JsonProperty("Payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Payment2 Payment { get; set; }

		/// <summary>Donation date.</summary>
		[Newtonsoft.Json.JsonProperty("DonationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DonationDate { get; set; }

		/// <summary>First name of the donor.</summary>
		[Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FirstName { get; set; }

		/// <summary>Last name of the donor.</summary>
		[Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LastName { get; set; }

		/// <summary>Email of the donor.</summary>
		[Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Email { get; set; }

		/// <summary>Organization of the donor.</summary>
		[Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Organization { get; set; }

		/// <summary>Phone of the donor.</summary>
		[Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Phone { get; set; }

		/// <summary>Internal note on donation. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment on donation. Visible to both administrators and donors.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		/// <summary>Donation amount.</summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; set; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public DonationType? Type { get; set; }

		/// <summary>For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this donation are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned.</summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue> FieldValues { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DonationListResponse
	{
		/// <summary>List of donations that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Donation> Payments { get; set; }


	}

	/// <summary>Donation type.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum DonationType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Online")]
		Online = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Manual")]
		Manual = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class FinanceDocument
	{
		/// <summary>Unique document identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		[Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Url { get; set; }

		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; set; }

		/// <summary>Document date.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? DocumentDate { get; set; }

		[Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Contact8 Contact { get; set; }

		/// <summary>Date and time when the document was created.</summary>
		[Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? CreatedDate { get; set; }

		[Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public CreatedBy3 CreatedBy { get; set; }

		/// <summary>Date and time when the document was last modified.  Could be null.</summary>
		[Newtonsoft.Json.JsonProperty("UpdatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? UpdatedDate { get; set; }

		[Newtonsoft.Json.JsonProperty("UpdatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public UpdatedBy2 UpdatedBy { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Invoice : FinanceDocument
	{
		/// <summary>Invoice number.</summary>
		[Newtonsoft.Json.JsonProperty("DocumentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DocumentNumber { get; set; }

		/// <summary>Indicates if the invoice is fully paid.</summary>
		[Newtonsoft.Json.JsonProperty("IsPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsPaid { get; set; }

		/// <summary>Sum already paid for this invoice.</summary>
		[Newtonsoft.Json.JsonProperty("PaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? PaidAmount { get; set; }

		[Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InvoiceOrderType? OrderType { get; set; }

		[Newtonsoft.Json.JsonProperty("EventRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public EventRegistration2 EventRegistration { get; set; }

		[Newtonsoft.Json.JsonProperty("OrderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OrderDetailRecord> OrderDetails { get; set; }

		/// <summary>Internal note on invoice. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Memo { get; set; }

		/// <summary>Comment on invoice. Visible to both administrators and the person being invoiced.</summary>
		[Newtonsoft.Json.JsonProperty("PublicMemo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicMemo { get; set; }

		/// <summary>When invoice is voided this field indicates date of void. Voided invoice does not affect balance. For regular invoices this field is null.</summary>
		[Newtonsoft.Json.JsonProperty("VoidedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? VoidedDate { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class InvoiceIdsResponse
	{
		/// <summary>List of invoices identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("InvoiceIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> InvoiceIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class InvoiceListResponse
	{
		/// <summary>List of invoices that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Invoice> Invoices { get; set; }


	}

	/// <summary>Type of invoice.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InvoiceOrderType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipApplication")]
		MembershipApplication = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipRenewal")]
		MembershipRenewal = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipLevelChange")]
		MembershipLevelChange = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStore")]
		OnlineStore = 6,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class InvoicesResponse : InvoiceIdsResponse
	{
		/// <summary>List of invoices that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Invoice> Invoices { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class OrderDetailRecord
	{
		/// <summary>Sum to pay for this item. Can be negative (discounts).</summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Value { get; set; }

		[Newtonsoft.Json.JsonProperty("OrderDetailType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public OrderDetailType? OrderDetailType { get; set; }

		/// <summary>Comment to order detail</summary>
		[Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Notes { get; set; }

		[Newtonsoft.Json.JsonProperty("Taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public SalesTaxInfo Taxes { get; set; }


	}

	/// <summary>Type of invoice detail item.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum OrderDetailType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
		Unspecified = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"GuestsNumber")]
		GuestsNumber = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"GuestCard")]
		GuestCard = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"ExtraCost")]
		ExtraCost = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"MemberLevel")]
		MemberLevel = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Prorate")]
		Prorate = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Discount")]
		Discount = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStoreProduct")]
		OnlineStoreProduct = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"OnlineStoreShipping")]
		OnlineStoreShipping = 10,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Payment : FinanceDocument
	{
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName Tender { get; set; }

		/// <summary>Internal note on payment. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment on payment. Visible to both administrators and payors.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		/// <summary>Total amount allocated to another finance documents (invoices or refunds).</summary>
		[Newtonsoft.Json.JsonProperty("AllocatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? AllocatedValue { get; set; }

		/// <summary>Amount of a refund assigned to the payment.</summary>
		[Newtonsoft.Json.JsonProperty("RefundedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal? RefundedAmount { get; set; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? Type { get; set; }

		/// <summary>Identifyer of Donation for payment of type DonationPayment.</summary>
		[Newtonsoft.Json.JsonProperty("DonationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DonationId { get; set; }

		/// <summary>For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this donation are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned.</summary>
		[Newtonsoft.Json.JsonProperty("FieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<FieldValue> FieldValues { get; set; }


	}

	/// <summary>Thhis object describes how payment is allocated among invoices.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PaymentAllocation
	{
		/// <summary>Unique identifier.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }

		/// <summary>allocated amount.</summary>
		[Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Value { get; set; }

		[Newtonsoft.Json.JsonProperty("Invoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Invoice2 Invoice { get; set; }

		/// <summary>Invoice date</summary>
		[Newtonsoft.Json.JsonProperty("InvoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? InvoiceDate { get; set; }

		/// <summary>Invoice number.</summary>
		[Newtonsoft.Json.JsonProperty("InvoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string InvoiceNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("Payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Payment3 Payment { get; set; }

		/// <summary>Payment date</summary>
		[Newtonsoft.Json.JsonProperty("PaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? PaymentDate { get; set; }

		[Newtonsoft.Json.JsonProperty("PaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? PaymentType { get; set; }

		[Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Refund2 Refund { get; set; }

		/// <summary>Refund date</summary>
		[Newtonsoft.Json.JsonProperty("RefundDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
		public System.DateTimeOffset? RefundDate { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PaymentIdsResponse
	{
		/// <summary>List of payment identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("PaymentIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> PaymentIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PaymentListResponse
	{
		/// <summary>List of payments that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Payment> Payments { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PaymentsResponse : PaymentIdsResponse
	{
		/// <summary>List of payments that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Payment> Payments { get; set; }


	}

	/// <summary>Payment type.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum PaymentType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
		Unknown = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoicePayment")]
		InvoicePayment = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"DonationPayment")]
		DonationPayment = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Refund : FinanceDocument
	{
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName Tender { get; set; }

		/// <summary>Internal note on refund. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment on refund. Visible to both administrators and person being refunded.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		/// <summary>Total amount allocated to another finance documents (payments or donations).</summary>
		[Newtonsoft.Json.JsonProperty("SettledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? SettledValue { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RefundIdsResponse
	{
		/// <summary>List of refund identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.</summary>
		[Newtonsoft.Json.JsonProperty("RefundIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<int> RefundIdentifiers { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RefundListResponse
	{
		/// <summary>List of refunds that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Refunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Refund> Refunds { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RefundParam
	{
		/// <summary>Unique refund identifier.</summary>
		[Newtonsoft.Json.JsonProperty("RefundId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? RefundId { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RefundsResponse : RefundIdsResponse
	{
		/// <summary>List of refunds that match request criteria.</summary>
		[Newtonsoft.Json.JsonProperty("Refunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Refund> Refunds { get; set; }


	}

	/// <summary>Taxes applied to the invoice according to account Tax Rules settings.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SalesTax
	{
		/// <summary>Internal account tax name.</summary>
		[Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>Public tax ID (displayed on invoices).</summary>
		[Newtonsoft.Json.JsonProperty("PublicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicId { get; set; }

		/// <summary>Tax rate value.</summary>
		[Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Rate { get; set; }


	}

	/// <summary>Describe taxes applied to this invoice item</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SalesTaxInfo
	{
		/// <summary>total gross amount including all taxes</summary>
		[Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Amount { get; set; }

		/// <summary>tax 1 amount</summary>
		[Newtonsoft.Json.JsonProperty("CalculatedTax1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? CalculatedTax1 { get; set; }

		/// <summary>tax 2 amount</summary>
		[Newtonsoft.Json.JsonProperty("CalculatedTax2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? CalculatedTax2 { get; set; }

		/// <summary>net amount from invoice items</summary>
		[Newtonsoft.Json.JsonProperty("NetAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? NetAmount { get; set; }

		/// <summary>rounded total amount including all taxes</summary>
		[Newtonsoft.Json.JsonProperty("RoundedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? RoundedAmount { get; set; }

		[Newtonsoft.Json.JsonProperty("Tax1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Tax1 Tax1 { get; set; }

		[Newtonsoft.Json.JsonProperty("Tax2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Tax2 Tax2 { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Tender : LinkedResourceWithName
	{
		/// <summary>Display position in UI.</summary>
		[Newtonsoft.Json.JsonProperty("DisplayPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? DisplayPosition { get; set; }

		/// <summary>Indicates that this tender is created by account admin, otherwise the tender is built-in.</summary>
		[Newtonsoft.Json.JsonProperty("IsCustom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCustom { get; set; }


	}

	/// <summary>Collection of tenders.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class TendersResponse : System.Collections.ObjectModel.Collection<Tender>
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdateInvoiceParams : CreateInvoiceParams
	{
		/// <summary>Identifier of the invoice to update</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdatePaymentParams : FinanceDocument
	{
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName Tender { get; set; }

		/// <summary>Internal note on payment. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment on payment. Visible to both administrators and payors.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		/// <summary>Total amount allocated to another finance documents (invoices or refunds).</summary>
		[Newtonsoft.Json.JsonProperty("AllocatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? AllocatedValue { get; set; }

		[Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public PaymentType? Type { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdateRefundParams : FinanceDocument
	{
		[Newtonsoft.Json.JsonProperty("Tender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public LinkedResourceWithName Tender { get; set; }

		/// <summary>Internal note on refund. Visible to administrators only.</summary>
		[Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		/// <summary>Comment on refund. Visible to both administrators and person being refunded.</summary>
		[Newtonsoft.Json.JsonProperty("PublicComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string PublicComment { get; set; }

		/// <summary>The previously settled amount of the payment.</summary>
		[Newtonsoft.Json.JsonProperty("SettledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? SettledValue { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum Size
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Original")]
		Original = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Small")]
		Small = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Medium")]
		Medium = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Medium1")]
		Medium1 = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Large")]
		Large = 4,

	}

	/// <summary>Kind of object for audit log filter</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum FilterObjectType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
		Undefined = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Contact")]
		Contact = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Event")]
		Event = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
		Invoice = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Payment")]
		Payment = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Refund")]
		Refund = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Response
	{
		/// <summary>Picture guid</summary>
		[Newtonsoft.Json.JsonProperty("picture0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Picture0 { get; set; }

		/// <summary>Picture guid</summary>
		[Newtonsoft.Json.JsonProperty("picture1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Picture1 { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Administrator : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipLevel2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipLevel3 : LinkedResourceWithName
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ContactStatus
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipLevel4 : LinkedResourceWithName
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ContactExtendedMembershipInfoStatus
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ContactsAsyncResponseProcessingState
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
		Waiting = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Processing")]
		Processing = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Complete")]
		Complete = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Failed")]
		Failed = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class InitialQuery
	{
		/// <summary>Object type which was requested. In this case it is always Contact.</summary>
		[Newtonsoft.Json.JsonProperty("ObjectType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ObjectType { get; set; }

		/// <summary>Value of $filter parameter passed into API.</summary>
		[Newtonsoft.Json.JsonProperty("FilterExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FilterExpression { get; set; }

		/// <summary>Value of $select parameter passed into API.</summary>
		[Newtonsoft.Json.JsonProperty("SelectExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SelectExpression { get; set; }

		/// <summary>Indicates if client requested only a list of identifiers, instead of full list of contacts.</summary>
		[Newtonsoft.Json.JsonProperty("ReturnIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? ReturnIds { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ContactsMeStatus
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipLevel5 : LinkedResourceWithName
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum CreateContactFieldParamsFieldType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Text")]
		Text = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MultilineText")]
		MultilineText = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleChoice")]
		MultipleChoice = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleChoiceWithExtraCharge")]
		MultipleChoiceWithExtraCharge = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"RadioButtons")]
		RadioButtons = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"RadioButtonsWithExtraCharge")]
		RadioButtonsWithExtraCharge = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Dropdown")]
		Dropdown = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Picture")]
		Picture = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"RulesAndTerms")]
		RulesAndTerms = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"Date")]
		Date = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"ExtraChargeCalculation")]
		ExtraChargeCalculation = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"SectionDivider")]
		SectionDivider = 11,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MembershipLevel6
	{
		/// <summary>ID of membership level to assign.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum CreateContactParamsStatus
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Active")]
		Active = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Lapsed")]
		Lapsed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNew")]
		PendingNew = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingRenewal")]
		PendingRenewal = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingUpgrade")]
		PendingUpgrade = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ExistsInLevels
	{
		/// <summary>Id of membership level</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ExtendedMembershipInfoPendingMembershipOrderStatusType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Invisible")]
		Invisible = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNoCorrespondingInvoice")]
		PendingNoCorrespondingInvoice = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"PendingNotPaidYet")]
		PendingNotPaidYet = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoicePaidManualApprovalRequired")]
		InvoicePaidManualApprovalRequired = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"FreeOrderManualApprovalRequired")]
		FreeOrderManualApprovalRequired = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoiceNotPaidButOperationApproved")]
		InvoiceNotPaidButOperationApproved = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleInvoiceNotPaidMemberActivated")]
		MultipleInvoiceNotPaidMemberActivated = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"MultipleInvoiceNotPaidMemberPending")]
		MultipleInvoiceNotPaidMemberPending = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PendingMembershipInvoice : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ExtraChargeMultiplierType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"ItemPrice")]
		ItemPrice = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Percentage")]
		Percentage = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum MembershipLevelType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Individual")]
		Individual = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Bundle")]
		Bundle = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum MembershipRenewalPeriodKind
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Never")]
		Never = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
		Monthly = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
		Quarterly = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"TwiceAYear")]
		TwiceAYear = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"EveryNYears")]
		EveryNYears = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Dates
	{
		/// <summary>Month of a year, 1-12</summary>
		[Newtonsoft.Json.JsonProperty("Month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public int? Month { get; set; }

		/// <summary>Day of a month</summary>
		[Newtonsoft.Json.JsonProperty("Day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public int? Day { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ApplicationReview
	{
		/// <summary>If true, membership fee should be received in full before application is activated. Else, approved memberships activate immediately, regardless of payment status.</summary>
		[Newtonsoft.Json.JsonProperty("PrepayRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? PrepayRequired { get; set; }

		/// <summary>
		/// Indicates that account administrator should approve membership application.
		/// False means that all applications are considered approved when they are submitted.</summary>
		[Newtonsoft.Json.JsonProperty("AdminApprovalRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? AdminApprovalRequired { get; set; }


	}

	// This enum is fucked, because they declared it janky in the swagger file. defined as an integer enum, but probably supposed to be string.
	//[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	//public enum EmailRecipientType
	//{
	//	_IndividualContactRecipient = IndividualContactRecipient,

	//	_IndividualEventRegistrationRecipient = IndividualEventRegistrationRecipient,

	//	_EventAttendees_CheckedIn = EventAttendees_CheckedIn,

	//	_EventAttendees_NotCheckedIn = EventAttendees_NotCheckedIn,

	//	_EventAttendees_Paid = EventAttendees_Paid,

	//	_EventAttendees_NotPaid = EventAttendees_NotPaid,

	//	_EventAttendees_All = EventAttendees_All,

	//	_EventAttendees_Selected = EventAttendees_Selected,

	//	_Contacts_All = Contacts_All,

	//	_Contacts_Selected = Contacts_Selected,

	//	_Contacts_SavedSearch = Contacts_SavedSearch,

	//	_Members_All = Members_All,

	//	_Members_SavedSearch = Members_SavedSearch,

	//	_SentEmailRecipient = SentEmailRecipient,

	//	_EventWaitlist_All = EventWaitlist_All,

	//	_EventWaitlist_Selected = EventWaitlist_Selected,

	//}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Event2
	{
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact2
	{
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventEditParamsEventType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Reqular")]
		Reqular = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RSVP")]
		RSVP = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Organizer
	{
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Reqular")]
		Reqular = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RSVP")]
		RSVP = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Organizer2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventGuestRegistrationSettingsCreateContactMode
	{
		[System.Runtime.Serialization.EnumMember(Value = @"NeverCreateContact")]
		NeverCreateContact = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"CreateContactForAllGuests")]
		CreateContactForAllGuests = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CreateContactForGuestsWithEmail")]
		CreateContactForGuestsWithEmail = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventRegistrationFieldDescriptionKind
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Common")]
		Common = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Custom")]
		Custom = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventWaitlistSettingsWaitlistType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"None")]
		None = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Manual")]
		Manual = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Auto")]
		Auto = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EventWaitlistSettingsInformationToCollect
	{
		[System.Runtime.Serialization.EnumMember(Value = @"None")]
		None = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"NameAndEmail")]
		NameAndEmail = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"ContactInformation")]
		ContactInformation = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"RegistrationInformation")]
		RegistrationInformation = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact3 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum AuditLogItemSeverity
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Verbose")]
		Verbose = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Information")]
		Information = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"AttentionRequired")]
		AttentionRequired = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Warning")]
		Warning = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Error")]
		Error = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Critical")]
		Critical = 5,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum AuditLogItemOrderType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"MembershipApplication")]
		MembershipApplication = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipRenewal")]
		MembershipRenewal = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"MembershipLevelChange")]
		MembershipLevelChange = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"EventRegistration")]
		EventRegistration = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Donation")]
		Donation = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"ChangeBillingPlan")]
		ChangeBillingPlan = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"ChangeBillingInfo")]
		ChangeBillingInfo = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"LockInPlan")]
		LockInPlan = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"AssociationRenewal")]
		AssociationRenewal = 8,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Document : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum AuditLogItemDocumentType
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
		Invoice = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Payment")]
		Payment = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"CreditMemo")]
		CreditMemo = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Refund")]
		Refund = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Adjustment")]
		Adjustment = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"DonationPayment")]
		DonationPayment = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"InvoicePayment")]
		InvoicePayment = 6,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum AuditLogItemDocumentAction
	{
		[System.Runtime.Serialization.EnumMember(Value = @"Created")]
		Created = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Changed")]
		Changed = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
		Deleted = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Voided")]
		Voided = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Custom")]
		Custom = 4,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact4 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreatedBy : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact5
	{
		/// <summary>ID of contact to whom the invoice is assigned.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreatedBy2
	{
		/// <summary>ID of contact who created the document. Could be null.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdatedBy
	{
		/// <summary>ID of contact who modified the document. Could be null.</summary>
		[Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Id { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact6 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact7 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Payment2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contact8 : LinkedResourceWithName
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CreatedBy3 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UpdatedBy2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EventRegistration2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Invoice2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Payment3 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Refund2 : LinkedResource
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Tax1 : SalesTax
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Tax2 : SalesTax
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v12.0.0.0)")]
	internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
	{
		public DateFormatConverter()
		{
			DateTimeFormat = "yyyy-MM-dd";
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class FileParameter
	{
		public FileParameter(System.IO.Stream data)
			: this(data, null, null)
		{
		}

		public FileParameter(System.IO.Stream data, string fileName)
			: this(data, fileName, null)
		{
		}

		public FileParameter(System.IO.Stream data, string fileName, string contentType)
		{
			Data = data;
			FileName = fileName;
			ContentType = contentType;
		}

		public System.IO.Stream Data { get; private set; }

		public string FileName { get; private set; }

		public string ContentType { get; private set; }
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class FileResponse : System.IDisposable
	{
		private System.IDisposable _client;
		private System.IDisposable _response;

		public int StatusCode { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public System.IO.Stream Stream { get; private set; }

		public bool IsPartial
		{
			get { return StatusCode == 206; }
		}

		public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
		{
			StatusCode = statusCode;
			Headers = headers;
			Stream = stream;
			_client = client;
			_response = response;
		}

		public void Dispose()
		{
			Stream.Dispose();
			if (_response != null)
				_response.Dispose();
			if (_client != null)
				_client.Dispose();
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class WildApricotException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public WildApricotException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class WildApricotException<TResult> : WildApricotException
	{
		public TResult Result { get; private set; }

		public WildApricotException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
