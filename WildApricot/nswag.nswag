{
  "runtime": "Net90",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "openapi: 3.1.0\ninfo:\n  title: Wild Apricot Admin API\n  description: |2\n\n    This is Wild Apricot's API for administrators. You can use it if you already have a Wild Apricot account (typically with a website on  *.wildapricot.org). Otherwise, please use https://register.wildapricot.com to create a new account.\n\n    If you have any questions about this API, please contact our support team at support@wildapricot.com.\n  version: 8.13.0-oas3\nservers:\n- url: https://api.wildapricot.org/v2.3\n\nsecurity:\n  - OAuth2_autorizationCode: []\n  - OAuth2_password: []\n  - OAuth2_clientCredentials: []\n\npaths:\n\n  /:\n    get:\n      operationId: GetApiResources\n      summary: Base URL for specific API version.\n      description: base URL for specific API version. It provides a list of resources that can be directly accessible by URL without providing any additional\n        information like account ID etc.\n      responses:\n        '200':\n          description: Array of resources\n          content:\n           '*/*':\n             schema:\n               type: array\n               items:\n                 $ref: '#/components/schemas/Resource'\n\n  '/accounts':\n    get:\n      operationId: GetAccountsList\n      summary: List of available accounts\n      description: |\n        List of accounts available with current oAuth token. Typicaly here would\n        be only one record in an array\n      tags:\n        - Accounts\n      responses:\n        '200':\n          description: An array of accounts\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        \"401\":\n          $ref: '#/components/responses/unauthorized'\n        \"429\":\n          $ref: '#/components/responses/tooManyRequests'\n  /accounts/{accountId}:\n    get:\n      operationId: GetAccount\n      summary: Details for specific account\n      description: |\n        Details for specific account\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      tags:\n        - Accounts\n      responses:\n        \"200\":\n          description: Account details\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Account'\n        \"401\":\n          $ref: '#/components/responses/unauthorized'\n        \"404\":\n          $ref: '#/components/responses/notFound'\n        \"429\":\n          $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/contacts:\n      get:\n        tags:\n        - Contacts\n        summary: Contacts list\n        description: |2\n  \n          Contacts search can be executed in synchronous and asynchronous manner. It depends on $async query string parameters.\n            # Synchronous call\n            When API call is processing synchronously, then response is just an array of contacts.\n            To make a synchronous contacts search, client application should make a request with query string parameter **$async=false**.\n  \n            `GET https://api.wildapricot.org/v2/accounts/{account_id}/contacts?$async=false&OTHER_QUERY_PARAMS`\n  \n            # Asynchronous call\n            Contacts search is processed asynchronously by default. So if client application specifies $async=true, or does not specify this parameter at all, the request is processed as described below. In this case contacts search is a two-step action.\n            - **Search request**. Client specifies search conditions and receives resultId. See $filter and $select parameters for filtering.\n            - **Retrieve result**. Client passes resultId and receives request processing status and contacts list if request is already processed\n  \n          ![async contact search diagramm](http://localhost:8019/Content/swagger/WAFiles/ContactListAsyncCall.png)\n        operationId: GetContactsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: $async\n          in: query\n          description: |2\n  \n            Controls whether the API call is perform asynchronously. Default value if true.\n          schema:\n            type: boolean\n        - name: resultId\n          in: query\n          description: |2\n  \n            This parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.\n          schema:\n            type: string\n        - name: $filter\n          in: query\n          description: |2\n  \n            Filters the results of the Contacts API call so that only those records that match the filter criteria are included.\n            See [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.\n          schema:\n            type: string\n        - name: $select\n          in: query\n          description: |\n            Controls which fields are returned in the Contacts API call.  The field names correspond to the fields returned by the [ContactFields API call](#/Contacts.CustomFields/GetContactFieldDefinitions), not the field names that appear in Wild Apricot. Multiple field names are separated by commas, and field names with spaces or special characters are enclosed in single quotation marks.\n          schema:\n            type: string\n        - name: $sort\n          in: query\n          description: |2\n  \n            Ordering expression. There are 2 sorting options - **Name** and  **MemberSince**. And also 2 direction modifiers - **asc** and **desc**.\n            ---\n            Example of valid expression - MemberSince asc\n          schema:\n            type: string\n        - name: simpleQuery\n          in: query\n          description: \"\\nsimpleQuery is a parameter which allows you to search for\\\n            \\ contacts by matching a substring in first name, last name, organization,\\\n            \\ email or phone. This is simpler than using $filter parameter. \\n\"\n          schema:\n            type: string\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - name: $count\n          in: query\n          description: |2\n  \n            Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.\n          schema:\n            type: boolean\n        - name: idsOnly\n          in: query\n          description: |2\n  \n            When idsOnly specified, the API returns only a list of identifiers matching criteria.\n          schema:\n            type: boolean\n        responses:\n          \"200\":\n            description: \"A wrapper object, which contains a list of contacts, contact\\\n              \\ identifiers, contacts count or information about asynchronous search\\\n              \\ request.\"\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ContactsResponse'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/ContactsResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Contacts\n        summary: Create a new contact or member record\n        operationId: CreateContact\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          description: |2\n  \n            - Values for read-only or unrecognized fields will be ignored.\n            - In order to **assign membership**\n              - set MembershipEnabled=true\n              - set MembershipLevel.Id to id of desired level\n  \n            - In order to **assign bundle** membership\n              - set MembershipEnabled=true\n              - set MembershipLevel.Id to id of some bundle level\n              - set 'Member role' field value to json '{ \"Label\": \"ROLE\" }' where ROLE is \"Bundle coordinator\" or \"Bundle member\"\n              - For bundle member set field 'Bundle ID' to value of bundle identifier. The bundle ID is returned by the [Bundles API call](https://gethelp.wildapricot.com/en/articles/504) when using it to retrieve bundle information for a particular membership level.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CreateContactParams'\n          required: true\n        responses:\n          \"200\":\n            description: Returns created contact record.\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/contactExtendedMembershipInfo'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/contactExtendedMembershipInfo'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/contacts/me:\n      get:\n        tags:\n        - Contacts\n        summary: Retrieve information about current contact\n        operationId: GetCurrentContactInfo\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        responses:\n          \"200\":\n            description: information about current contact\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ContactsMe'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/ContactsMe'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /accounts/{accountId}/contacts/{contactId}:\n      get:\n        tags:\n        - Contacts\n        summary: Retrieve information about specific member or contact\n        operationId: GetContactDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: path\n          description: Unique contact identifier\n          required: true\n          schema:\n            type: integer\n        - name: getExtendedMembershipInfo\n          in: query\n          description: |2\n  \n            When GetExtendedMembershipInfo specified the API returns the information about membership order status, membership invoice and allowed actions for current member status.\n          schema:\n            type: boolean\n        responses:\n          \"200\":\n            description: information about specific member or contact\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/contactExtendedMembershipInfo'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/contactExtendedMembershipInfo'\n          \"401\":\n            description: \"oAuth token was not provided, invalid or does not provide\\\n              \\ access to requested URL.\"\n            content: {}\n          \"404\":\n            description: Requested item not found.\n            content: {}\n          \"429\":\n            description: Too many requests from same account. Wait for a minute and\n              try again.\n            content: {}\n      put:\n        tags:\n        - Contacts\n        summary: Update information about existing member or contact\n        description: |\n          In order to update contact details it is recommended to provide only the custom fields you want to modify. See POST .../contacts for more details.\n        operationId: UpdateContactDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: path\n          description: Unique contact identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UpdateContactParams'\n          required: true\n        responses:\n          \"200\":\n            description: |\n              Updated version of contact information.\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/contactExtendedMembershipInfo'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/contactExtendedMembershipInfo'\n          \"401\":\n            description: \"oAuth token was not provided, invalid or does not provide\\\n              \\ access to requested URL.\"\n            content: {}\n          \"404\":\n            description: Requested item not found.\n            content: {}\n          \"429\":\n            description: Too many requests from same account. Wait for a minute and\n              try again.\n            content: {}\n        x-codegen-request-body-name: contact\n      delete:\n        tags:\n        - Contacts\n        description: Delete an archived contact\n        operationId: DeleteContact\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: path\n          description: Unique contact identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /rpc/{accountId}/AcceptTermsOfUse:\n      post:\n        tags:\n        - Contacts\n        summary: Accepts Terms of Use.\n        description: |\n          Accepts Wild Apricot Terms of Use for currently loged in user. Does nothing if accepted already.\n        operationId: AcceptTermsOfUse\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /rpc/{accountId}/Send2FACode:\n      post:\n        tags:\n        - Contacts\n        summary: Send 2FA code to current user email.\n        description: |\n          Send 2FA code to current user email..\n        operationId: Send2FACode\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: method\n          in: query\n          description: Type of invoice.\n          schema:\n            type: string\n            enum:\n            - Undefined\n            - Email\n            - Sms\n        responses:\n          \"200\":\n            description: OK\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/Verify2FACode:\n      post:\n        tags:\n        - Contacts\n        summary: Verify 2FA code from user email.\n        description: |\n          Verify 2FA code from user email\n        operationId: Verify2FACode\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: code\n          in: query\n          description: Verification code\n          required: true\n          schema:\n            type: string\n        - name: method\n          in: query\n          description: Type of invoice.\n          schema:\n            type: string\n            enum:\n            - Undefined\n            - Email\n            - Sms\n        responses:\n          \"200\":\n            description: OK\n            content:\n              application/json:\n                schema:\n                  type: boolean\n              application/xml:\n                schema:\n                  type: boolean\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/contactfields:\n      get:\n        tags:\n        - Contacts.CustomFields\n        summary: List of custom fields related to contacts and members.\n        description: |2\n  \n          This list contains a list of fields of 2 different types.\n           - System fields are defined by Wild Apricot system and cannot be removed.\n           - Custom fields can be defined by administrator to store some data specific to your account.\n        operationId: GetContactFieldDefinitions\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: showSectionDividers\n          in: query\n          description: Default value is false. Specifies whether section dividers also\n            should be included in the response.\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: An array of contact field descriptions\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ContactFieldDescription'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Contacts.CustomFields\n        summary: Creates a new contact / membership field\n        operationId: CreateContactFieldDefinition\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CreateContactFieldParams'\n          required: true\n        responses:\n          \"200\":\n            description: created field identifier\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  #Done\n  /accounts/{accountId}/contactfields/{contactFieldId}:\n      put:\n        tags:\n        - Contacts.CustomFields\n        summary: Updates an existing contact / membership field\n        description: \"Limitations: field type cannot be changed; contact field cannot\\\n          \\ be transformed to membership field or vice versa\"\n        operationId: UpdateContactFieldDefinition\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactFieldId\n          in: path\n          description: contact field identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UpdateContactFieldParams'\n          required: true\n        responses:\n          \"200\":\n            description: return true if field was updated successfully\n            content:\n              '*/*':\n                schema:\n                  type: boolean\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n      delete:\n        tags:\n        - Contacts.CustomFields\n        description: removes existing field by id\n        operationId: DeleteContactFieldDefinition\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactFieldId\n          in: path\n          description: contact field identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: return true if field was removed successfully\n            content:\n              '*/*':\n                schema:\n                  type: boolean\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/savedsearches:\n      get:\n        tags:\n        - Contacts.SavedSearch\n        summary: List of Saved Searches.\n        operationId: GetSavedSearchesList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        responses:\n          \"200\":\n            description: An array of saved search descriptions\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/SavedSearchListItem'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /accounts/{accountId}/savedsearches/{savedSearchId}:\n      get:\n        tags:\n        - Contacts.SavedSearch\n        summary: Saved Search and found contacts.\n        operationId: GetSavedSearchDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: savedSearchId\n          in: path\n          description: Saved Search identifier\n          required: true\n          schema:\n            type: integer\n        - name: excludeArchived\n          in: query\n          description: exclude archived contacts from found ContactIDs.\n          schema:\n            type: boolean\n            default: false\n        - name: $filter\n          in: query\n          description: |2\n  \n            Filters the results of the Contacts API call so that only those records that match the filter criteria are included.\n            See [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.\n          schema:\n            type: string\n        responses:\n          \"200\":\n            description: Saved Search description and found contact IDs\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/SavedSearch'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/pictures/{pictureId}:\n      get:\n        tags:\n        - Pictures\n        summary: Download picture\n        description: Picture available for specific account.\n        operationId: GetPictureContent\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: pictureId\n          in: path\n          description: Picture identifier\n          required: true\n          schema:\n            type: string\n        - name: fullSize\n          in: query\n          description: \"Full size picture will be returned. If full size picture does\\\n            \\ not exist, thumbnail will be returned.\"\n          schema:\n            type: boolean\n            default: false\n        - name: asBase64\n          in: query\n          description: Base64 encoded image will be returned.\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: Response is common HttpResponseMessage with content set to\n              picture binary data.\n            content:\n              '*/*':\n                schema:\n                  type: string\n                  format: binary\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/pictures:\n      post:\n        tags:\n        - Pictures\n        summary: Upload pictures\n        description: |\n          Picture can be uploaded using multipart/form-data POST request (contains Content-Type header set to 'multipart/form-data'). A multipart/form-data request contains a series of parts, each representing a picture. Each part is expected to contain a \"Content-Disposition\" header whose value is \"form-data\". One of its properties (Name, FileName) must be set and have unique value. In case of similar values, only one of those part will be used, others will be dropped. For example, you have uploaded 2 pictures with same Name set to \"name\". If they have different FileName set, it's ok, but if FileName properties are same as well, only one of those pictures will be saved and available for further processing. Keep this in mind.\n          Limitations:\n            - Maximum size for one uploaded picture is 10mb.\n            - Maximum request length is 10mb. It means that you can upload one 10mb picture or 10 pictures 1mb each.\n            - Maximum dimensions for uploaded picture are not set, but each picture will be resized to 110px after uploading.\n            - Supported picture types are: png, jpeg, bmp. Bmp pictures will be converted to png format.\n            - Time period after uploading when picture would be available for use is 30 minutes.\n            - Each uploaded picture can be used only once. After first usage it will be removed permanently.\n            - Mime type must be 'image' and must correlate to picture type. If you upload the 'png' with 'image/bmp' mime type set, this picture will be dropped.\n            - In case of uploading several pictures in one request either 'Name' or 'FileName' property of Content-Disposition header must be set. Otherwise the picture will be dropped.\n        operationId: UploadPicture\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            multipart/form-data:\n              schema:\n                required:\n                - picture0\n                type: object\n                properties:\n                  picture0:\n                    type: string\n                    description: The uploaded picture0 data\n                    format: binary\n                  picture1:\n                    type: string\n                    description: The uploaded picture1 data\n                    format: binary\n          required: true\n        responses:\n          \"200\":\n            description: Response is simple json object which contains picture guids\n              (see example)\n            content:\n              '*/*':\n                schema:\n                  type: object\n                  properties:\n                    picture0:\n                      type: string\n                      description: Picture guid\n                      examples:\n                        - cldyhbc3.jpeg\n                    picture1:\n                      type: string\n                      description: Picture guid\n                      examples:\n                        - kxdtilz4.jpeg\n  \n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/attachments/{attachmentId}:\n      get:\n        tags:\n        - Attachments\n        summary: Download attachment\n        description: \"Attachment, available for specific account.\"\n        operationId: GetAttachmentContent\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: attachmentId\n          in: path\n          description: Attachment identifier\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          schema:\n            type: string\n            enum:\n            - Original\n            - Small\n            - Medium\n            - Medium1\n            - Large\n        - name: asBase64\n          in: query\n          description: Base64 encoded image will be returned.\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: Response is common HttpResponseMessage with content set to\n              attachment binary data.\n            content:\n              application/json:\n                schema:\n                  type: string\n                  format: binary\n              application/xml:\n                schema:\n                  type: string\n                  format: binary\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/attachments/GetInfos:\n      get:\n        tags:\n        - Attachments\n        summary: Get attachments infos\n        description: \"Attachment infos, available for specific account.\"\n        operationId: GetAttachmentInfos\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: attachmentIds\n          in: query\n          description: list of comma separated Attachment identifiers\n          required: true\n          schema:\n            type: string\n        responses:\n          \"200\":\n            description: An array of attachment descriptions\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/FileInfo'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /accounts/{accountId}/attachments/Upload:\n      post:\n        tags:\n        - Attachments\n        summary: Upload attachments\n        description: |\n          Upload attachments data and get their identifiers to use for contact values.  Attachment not used for any Contact field value will be deleted in 30 minutes.\n        operationId: UploadAttachments\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AttachmentDataList'\n          required: true\n        responses:\n          \"200\":\n            description: An array of attachment descriptions\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/FileInfo'\n          \"400\":\n              $ref: '#/components/responses/badRequest'\n          \"404\":\n              $ref: '#/components/responses/notFound'\n          \"401\":\n              $ref: '#/components/responses/unauthorized'\n          \"429\":\n              $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/membershiplevels:\n      get:\n        tags:\n        - Membership.Levels\n        summary: Get list of all membership levels.\n        operationId: GetMembershipLevelsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        - name: idsOnly\n          in: query\n          description: |\n            To get only a list of membership level identifiers as a result.\n          schema:\n            type: boolean\n        - name: ids\n          in: query\n          description: You can filter by specifying a set of level IDs. E.g. `ids=1,2,3`\n          schema:\n            type: string\n        responses:\n          \"200\":\n            description: Collection of membership levels.\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/MembershipLevel'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/membershiplevels/{levelId}:\n      get:\n        tags:\n        - Membership.Levels\n        summary: Retrieve information about specific membership level\n        operationId: GetMembershipLevelDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: levelId\n          in: path\n          description: Unique membership level identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific membership level\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/MembershipLevel'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/MembershipLevel'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/bundles:\n      get:\n        tags:\n        - Membership.Bundles\n        summary: Get list of membership bundles.\n        operationId: GetMembershipBundlesList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: levelId\n          in: query\n          description: Provide this parameter to get only bundles related to specific\n            membership level.\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: List of bundles matching query parameters.\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Bundle'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /accounts/{accountId}/bundles/{bundleId}:\n      get:\n        tags:\n        - Membership.Bundles\n        summary: Get membership bundle details.\n        operationId: GetMembershipBundle\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: bundleId\n          in: path\n          description: Unique bundle identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Bundle description.\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/Bundle'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/Bundle'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/membergroups:\n      get:\n        tags:\n        - Membership.Groups\n        summary: List of Ad Hoc member groups.\n        operationId: GetMembershipGroups\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        - name: idsOnly\n          in: query\n          description: |\n            To get only a list of member group identifiers as a result.\n          schema:\n            type: boolean\n        - name: ids\n          in: query\n          description: You can filter by specifying a set of group IDs. E.g. `ids=1,2,3`\n          schema:\n            type: string\n        responses:\n          \"200\":\n            description: An array of member group descriptions\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/MembershipGroupListItem'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/membergroups/{memberGroupId}:\n      get:\n        tags:\n        - Membership.Groups\n        summary: Ad Hoc member group.\n        operationId: GetMembershipGroupDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: memberGroupId\n          in: path\n          description: member group identifier\n          required: true\n          schema:\n            type: integer\n        - name: includeArchivedMembers\n          in: query\n          description: include archived contacts in ContactIds list. Default - true.\n          schema:\n            type: boolean\n            default: true\n        responses:\n          \"200\":\n            description: member group description\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/MembershipGroup'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n           $ref: '#/components/responses/tooManyRequests'\n\n  /rpc/{accountId}/ApprovePendingMembership:\n      post:\n        tags:\n        - Membership.Operations\n        summary: Approve pending membership.\n        description: |2\n  \n          Availability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.\n        operationId: ApprovePendingMembership\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: Contact ID to approve membership\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /rpc/{accountId}/RejectPendingMembership:\n      post:\n        tags:\n        - Membership.Operations\n        summary: Reject pending membership.\n        description: |2\n  \n          Availability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.\n        operationId: RejectPendingMembership\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: Contact ID to reject membership\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n            content: {}\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/events:\n      get:\n        tags:\n        - Events\n        summary: Events list\n        operationId: GetEventsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: $async\n          in: query\n          description: |2\n  \n            Controls whether the API call is perform asynchronously. Default value if true.\n          schema:\n            type: boolean\n        - name: resultId\n          in: query\n          description: |2\n  \n            This parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.\n          schema:\n            type: string\n        - name: $filter\n          in: query\n          description: |2\n  \n            Filters the results of the Events API call so that only those records that match the filter criteria are included.\n            The following filter criterias are supported:\n  \n              - Id, Supported operations: in.\n              - RegistrationEnabled, Supported operations: eq, ne.\n              - IsUpcoming, Supported operations: eq, ne.\n              - Tags, Supported operations: in.\n              - StartDate, Supported operations: eq, ne, gt, ge, lt, le.\n              - EndDate, Supported operations: eq, ne, gt, ge, lt, le.\n              - Name, Supported operations: eq, ne, substringof.\n              - TextIndex, Supported operations: substringof.\n          schema:\n            type: string\n        - name: $sort\n          in: query\n          description: |2-\n  \n            This parameter can be used to sort list of IDs or list of events. Possible values are\n  \n              - ByStartDate asc - sort events by their Start date. Ascending order.\n              - ByStartDate desc - sort events by their Start date. Descending order.\n              - ByStartSession asc - sort events by start of their sessions (if exists). All past events ignored\n  \n              Example: $sort=ByStartDate asc\n          schema:\n            type: string\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - name: $count\n          in: query\n          description: |2\n  \n            Specifies that result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.\n          schema:\n            type: boolean\n        - name: idsOnly\n          in: query\n          description: |2\n  \n            When idsOnly specified, the API returns only a list of identifiers matching criteria.\n          schema:\n            type: boolean\n        responses:\n          \"200\":\n            description: \"A wrapper object, which contains a list of events, event identifiers\\\n              \\ or events count.\"\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventsResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Events\n        summary: Create a new event record\n        operationId: CreateEvent\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          description: Event description\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EventEditParams'\n          required: true\n        responses:\n          \"200\":\n            description: Returns created event record id\n            content:\n              application/json:\n                schema:\n                  type: number\n              application/xml:\n                schema:\n                  type: number\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /accounts/{accountId}/events/{eventId}:\n      get:\n        tags:\n        - Events\n        summary: Retrieve information about specific event\n        operationId: GetEventDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: eventId\n          in: path\n          description: Unique event identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific event\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/Event'\n              application/xml:\n                schema:\n                  $ref: '#/components/schemas/Event'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Events\n        summary: Update information about existing event\n        operationId: UpdateEvent\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: eventId\n          in: path\n          description: Unique event identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EventEditParams'\n          required: true\n        responses:\n          \"200\":\n            description: |\n              Updated version of event information.\n            content:\n              '*/*':\n                schema:\n                  type: boolean\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Events\n        description: Completely delete event from system.\n        operationId: DeleteEvent\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: eventId\n          in: path\n          description: Unique event identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  /rpc/{accountId}/CloneEvent:\n      post:\n        tags:\n        - Events\n        summary: Clone existed event.\n        operationId: CloneEvent\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CloneEvent'\n          required: true\n        responses:\n          \"200\":\n            description: created event id\n            content:\n              application/json:\n                schema:\n                  type: integer\n              application/xml:\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n\n  /accounts/{accountId}/EventRegistrationTypes:\n      get:\n        tags:\n        - Events.EventRegistrationTypes\n        summary: Event registration types list\n        operationId: getEventRegistrationTypesList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: eventId\n          in: query\n          description: event identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: List of event registration types\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistrationTypeResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Events.EventRegistrationTypes\n        summary: Creates a new event registration type.\n        operationId: CreateEventRegistrationType\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EventRegistrationTypeEditParams'\n          required: true\n        responses:\n          \"200\":\n            description: Created event registration type ID\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/EventRegistrationTypes/{typeId}:\n      get:\n        tags:\n        - Events.EventRegistrationTypes\n        summary: Event registration type details\n        operationId: GetEventRegistrationTypeDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: typeId\n          in: path\n          description: Unique event registration type identifier\n          required: true\n          schema:\n            type: number\n            format: integer\n        responses:\n          \"200\":\n            description: Information about specific event registration type\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistrationType'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Events.EventRegistrationTypes\n        summary: Update information about existing event registration type\n        operationId: UpdateEventRegistrationType\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: typeId\n          in: path\n          description: Unique event registration type identifier\n          required: true\n          schema:\n            type: number\n            format: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EventRegistrationTypeEditParams'\n          required: true\n        responses:\n          \"200\":\n            description: No information returned on successful update\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Events.EventRegistrationTypes\n        description: Completely delete event registration type from the system.\n        operationId: DeleteEventRegistrationType\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: typeId\n          in: path\n          description: Unique event registration type identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/eventregistrations:\n      get:\n        tags:\n        - Events.EventRegistrations\n        summary: Event Registrations list\n        description: |\n          ⚠ There are 3 parameters, which can be used simultaneously. Pagination is not applied if $filter or ids set.\n        operationId: GetEventRegistrationsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: contact identifier\n          schema:\n            type: integer\n        - name: eventId\n          in: query\n          description: event identifier\n          schema:\n            type: integer\n        - name: $filter\n          in: query\n          description: |\n            Filters the results of the Events API call so that only those records that match the filter criteria are included. The following filter criterias are supported:\n              - Id, Supported operations: in.\n                example: ?$filter=id in [1,2,3,4….]\n          schema:\n            type: string\n        - name: includeDetails\n          in: query\n          description: \"If false, registration form data is not retrieved\"\n          schema:\n            type: boolean\n            default: true\n        - name: includeWaitlist\n          in: query\n          description: Defines if waitlist records should be included in result\n          schema:\n            type: boolean\n            default: false\n        - name: $count\n          in: query\n          description: |2\n  \n            Specifies that result should contain only a total number of records matching criteria.\n          schema:\n            type: boolean\n            default: false\n        - name: idsOnly\n          in: query\n          description: |2\n  \n            When idsOnly specified, the API returns only a list of identifiers matching criteria.\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: List of event registrations\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistrationsResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Events.EventRegistrations\n        summary: Creates a new event registration.\n        operationId: CreateEventRegistration\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EventRegistrationPost'\n          required: true\n        responses:\n          \"200\":\n            description: Event registration created\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistration'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/eventregistrations/{event_registration_id}:\n      get:\n        tags:\n        - Events.EventRegistrations\n        summary: Event Registration Details\n        operationId: GetEventRegistrationDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: event_registration_id\n          in: path\n          description: event registration identifier\n          required: true\n          schema:\n            type: number\n            format: integer\n        responses:\n          \"200\":\n            description: List of Event Registrations\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistration'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Events.EventRegistrations\n        summary: Update event registration.\n        operationId: UpdateEventRegistration\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: event_registration_id\n          in: path\n          description: event registration identifier\n          required: true\n          schema:\n            type: number\n            format: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EventRegistrationPut'\n          required: true\n        responses:\n          \"200\":\n            description: Event registration created\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistration'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Events.EventRegistrations\n        summary: Event registration\n        operationId: DeleteEventRegistration\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: event_registration_id\n          in: path\n          description: event registration identifier\n          required: true\n          schema:\n            type: number\n            format: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/CheckInEventAttendee:\n      post:\n        tags:\n        - Events.EventRegistrations\n        summary: Mark event attendee as checked-in (or remove check-in flag).\n        operationId: CheckInEventAttendee\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CheckInParams'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/RegisterFromWaitlist:\n      post:\n        tags:\n        - Events.EventRegistrations\n        summary: Add waitlisted person as event attendee\n        operationId: RegisterFromWaitlist\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/RegisterFromWaitlistParams'\n          required: true\n        responses:\n          \"200\":\n            description: Event registration created\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EventRegistration'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/invoices:\n      get:\n        tags:\n        - Finances.Invoices\n        summary: Get list of invoices by criteria.\n        description: |2\n  \n          ⚠ There are 3 parameters, which cannot be used simultaneously. API uses only one parameter of contactId, eventId and eventRegistrationId exactly in this order. For example if request contains both contactId and eventId, then API uses only contactId to filter invoices.\n        operationId: GetInvoicesList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: Identifier of contact to whom the invoice is assigned.\n          schema:\n            type: integer\n        - name: eventId\n          in: query\n          description: Identifier of event. When specified API returns collection of\n            invoices associated with event registrations for the event.\n          schema:\n            type: integer\n        - name: eventRegistrationId\n          in: query\n          description: Identifier of event registration. When specified API returns\n            invoice related to the registration. Usually a single invoice.\n          schema:\n            type: integer\n        - name: unpaidOnly\n          in: query\n          description: \"When set to true, API returns only unpaid invoices.\"\n          schema:\n            type: boolean\n            default: false\n        - name: paidOnly\n          in: query\n          description: \"When set to true, API returns only paid invoices.\"\n          schema:\n            type: boolean\n            default: false\n        - name: includeVoided\n          in: query\n          description: \"When set to true, API also returns voided invoices.\"\n          schema:\n            type: boolean\n            default: false\n        - name: idsOnly\n          in: query\n          description: \"When set to true, API returns only collection of identifiers\\\n            \\ instead of collection of invoices.\"\n          schema:\n            type: boolean\n            default: false\n        - name: StartDate\n          in: query\n          description: Limits result to invoices created since StartDate.\n          schema:\n            type: string\n            format: date\n        - name: EndDate\n          in: query\n          description: Limits result to invoices created before EndDate.\n          schema:\n            type: string\n            format: date\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        responses:\n          \"200\":\n            description: Collection of invoices that match criteria.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/InvoicesResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Finances.Invoices\n        summary: Creates a new invoice.\n        operationId: CreateInvoice\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CreateInvoiceParams'\n          required: true\n        responses:\n          \"200\":\n            description: Created invoice ID\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/invoices/{invoiceId}:\n      get:\n        tags:\n        - Finances.Invoices\n        summary: Retrieve information about specific invoice\n        operationId: GetInvoiceDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: invoiceId\n          in: path\n          description: Unique invoice identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific invoice\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Invoice'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Finances.Invoices\n        summary: Update existing invoice information\n        operationId: UpdateInvoice\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: invoiceId\n          in: path\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UpdateInvoiceParams'\n          required: true\n        responses:\n          \"200\":\n            description: Returns 200 on successful data update\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Finances.Invoices\n        summary: Delete existing invoice\n        operationId: DeleteInvoice\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: invoiceId\n          in: path\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Returns 200 on successful invoice deletion\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/GenerateInvoiceForPendingMembership:\n      post:\n        tags:\n        - Membership.Operations\n        summary: Generate or update invoice for pending membership.\n        description: |2\n  \n          Availability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.\n        operationId: GenerateInvoiceForPendingMembership\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: Contact ID with pending membership\n          required: true\n          schema:\n            type: integer\n        - name: updateIfExists\n          in: query\n          description: update the invoice items if already exists\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/GenerateInvoiceForEventRegistration:\n      post:\n        tags:\n        - Finances.Invoices\n        summary: Generate or update invoice for existing event registration.\n        operationId: GenerateInvoiceForEventRegistration\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: eventRegistrationId\n          in: query\n          description: Event registration ID with pending membership\n          required: true\n          schema:\n            type: integer\n        - name: updateIfExists\n          in: query\n          description: \"If set to true and invoice already exists, API will update the\\\n            \\ invoice items.\"\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: created or updated invoice\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Invoice'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n  \n  /rpc/{accountId}/VoidInvoice:\n      post:\n        tags:\n        - Finances.Invoices\n        summary: Void active invoice.\n        description: See https://gethelp.wildapricot.com/en/articles/76#voiding for\n          details on invoice voiding\n        operationId: VoidInvoice\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: invoiceId\n          in: query\n          description: invoiceId ID to void\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/payments:\n      get:\n        tags:\n        - Finances.Payments\n        summary: Get list of payments by criteria.\n        operationId: GetPaymentsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: Identifier of contact who made the payment.\n          schema:\n            type: integer\n        - name: eventId\n          in: query\n          description: Identifier of event. When specified API returns collection of\n            payments settled to invoices associated with event registrations for the\n            event.\n          schema:\n            type: integer\n        - name: idsOnly\n          in: query\n          description: \"When set to true, API returns only collection of identifiers\\\n            \\ instead of collection of payments.\"\n          schema:\n            type: boolean\n            default: false\n        - name: StartDate\n          in: query\n          description: Limits result to payments created since StartDate.\n          schema:\n            type: string\n            format: date\n        - name: EndDate\n          in: query\n          description: Limits result to payments created before EndDate.\n          schema:\n            type: string\n            format: date\n        - name: paimentType\n          in: query\n          description: Limits result to payment type.\n          schema:\n            type: string\n        - name: unsettledOnly\n          in: query\n          description: \"When set to true, API returns only unsettled payments.\"\n          schema:\n            type: boolean\n            default: false\n        - name: ids\n          in: query\n          description: You can filter the payments by specifying a set of payment IDs.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        responses:\n          \"200\":\n            description: Collection of payments that match criteria.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/PaymentsResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Finances.Payments\n        summary: Creates a new payment.\n        operationId: CreatePayment\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CreatePaymentModel'\n          required: true\n        responses:\n          \"200\":\n            description: Payment created\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Payment'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/payments/{paymentId}:\n      get:\n        tags:\n        - Finances.Payments\n        summary: Retrieve information about specific payment\n        operationId: GetPaymentDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: paymentId\n          in: path\n          description: Unique payment identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific payment\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Payment'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Finances.Payments\n        summary: Update existing payment information\n        operationId: UpdatePayment\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: paymentId\n          in: path\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UpdatePaymentParams'\n          required: true\n        responses:\n          \"200\":\n            description: Returns 200 on successful data update\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Finances.Payments\n        summary: Delete existing payment\n        operationId: DeletePayment\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: paymentId\n          in: path\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Returns 200 on successful payment deletion\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/payments/{paymentId}/AllocateInvoice:\n      post:\n        tags:\n        - Finances.Payments\n        summary: Allocate invoice to specific payment\n        description: After this operation invoice will be marked as paid.\n        operationId: AllocateInvoice\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: paymentId\n          in: path\n          description: Unique payment identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AllocateInvoiceParams'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/payments/{paymentId}/AllocateRefundToPayment:\n      post:\n        tags:\n        - Finances.Payments\n        summary: Allocate refund to specific payment\n        operationId: AllocateRefundToPayment\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: paymentId\n          in: path\n          description: Unique payment identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/RefundParam'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/payments/{donationId}/AllocateRefundToDonation:\n      post:\n        tags:\n        - Finances.Payments\n        summary: Allocate refund to specific donation\n        operationId: AllocateRefundToDonation\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: donationId\n          in: path\n          description: Unique donation identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/RefundParam'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/payments/{paymentId}/UnallocateFromPayment:\n      post:\n        tags:\n        - Finances.Payments\n        summary: Unallocate finance document from specific payment\n        operationId: UnallocateFinanceDocumentFromPayment\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: paymentId\n          in: path\n          description: Unique payment identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/DocumentParam'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/payments/{donationId}/UnallocateFromDonation:\n      post:\n        tags:\n        - Finances.Payments\n        summary: Unallocate finance document from specific donation\n        operationId: UnallocateFinanceDocumentFromDonation\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: donationId\n          in: path\n          description: Unique donation identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/DocumentParam'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/paymentAllocations:\n      get:\n        tags:\n        - Finances.PaymentAllocations\n        summary: Get list describing how payments are allocated among invoices.\n        description: At least one parameter InvoiceId or PaymentId or RefundId should\n          be specified.\n        operationId: GetPaymentAllocationsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: InvoiceId\n          in: query\n          description: Identifier of invoice.\n          schema:\n            type: integer\n        - name: PaymentId\n          in: query\n          description: Identifier of payment.\n          schema:\n            type: integer\n        - name: RefundId\n          in: query\n          description: Identifier of refund.\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Collection of allocations.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/PaymentAllocation'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/refunds:\n      get:\n        tags:\n        - Finances.Refunds\n        summary: Get list of refunds by criteria.\n        operationId: GetRefundsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: contactId\n          in: query\n          description: Identifier of contact to whom the refund was made.\n          schema:\n            type: integer\n        - name: eventId\n          in: query\n          description: Identifier of event. When specified API returns collection of\n            refunds settled to invoices associated with event registrations for the\n            event.\n          schema:\n            type: integer\n        - name: idsOnly\n          in: query\n          description: \"When set to true, API returns only collection of identifiers\\\n            \\ instead of collection of refunds.\"\n          schema:\n            type: boolean\n            default: false\n        - name: StartDate\n          in: query\n          description: Limits result to refunds created since StartDate.\n          schema:\n            type: string\n            format: date\n        - name: EndDate\n          in: query\n          description: Limits result to refunds created before EndDate.\n          schema:\n            type: string\n            format: date\n        - name: unsettledOnly\n          in: query\n          description: \"When set to true, API returns only unsettled refunds.\"\n          schema:\n            type: boolean\n            default: false\n        - name: ids\n          in: query\n          description: You can filter the refunds by specifying a set of refund IDs.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        responses:\n          \"200\":\n            description: Collection of refunds that match criteria.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/RefundsResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Finances.Refunds\n        summary: Creates a new refund.\n        operationId: CreateRefund\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CreateRefundParams'\n          required: true\n        responses:\n          \"200\":\n            description: Refund created\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Refund'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/refunds/{refundId}:\n      get:\n        tags:\n        - Finances.Refunds\n        summary: Retrieve information about specific refund\n        operationId: GetRefundDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: refundId\n          in: path\n          description: Unique refund identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific refund\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Refund'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Finances.Refunds\n        summary: Update existing refund information\n        operationId: UpdateRefund\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: refundId\n          in: path\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UpdateRefundParams'\n          required: true\n        responses:\n          \"200\":\n            description: Returns 200 on successful data update\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Finances.Refunds\n        summary: Delete existing refund\n        operationId: DeleteRefund\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: refundId\n          in: path\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Returns 200 on successful refund deletion\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/tenders:\n      get:\n        tags:\n        - Finances.Tenders\n        summary: Get list of tenders.\n        operationId: GetTendersList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        responses:\n          \"200\":\n            description: Collection of tenders.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/TendersResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Finances.Tenders\n        summary: Creates a new tender.\n        operationId: CreateTender\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Tender'\n          required: true\n        responses:\n          \"200\":\n            description: Tenderscreated\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Tender'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/tenders/{tenderId}:\n      get:\n        tags:\n        - Finances.Tenders\n        summary: Retrieve information about specific tender\n        operationId: GetTenderDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: tenderId\n          in: path\n          description: Unique tender identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific tender\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Tender'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Finances.Tenders\n        summary: Update existing tender information\n        operationId: UpdateTender\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: tenderId\n          in: path\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Tender'\n          required: true\n        responses:\n          \"200\":\n            description: Returns 200 on successful data update\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Finances.Tenders\n        summary: Delete existing tender\n        operationId: DeleteTender\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: tenderId\n          in: path\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Returns 200 on successful tender deletion\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/auditLogItems:\n      get:\n        tags:\n        - Finances.AuditLog\n        summary: List of Audit log items.\n        description: |\n          List filter has limitations.\n           - if filterObjectType is set then FilterObjectId must be set too.\n           - empty filter not allowed (none of filterObjectType, FilterObjectId, StartDate and EndDate are set).\n        operationId: GetAuditLogItems\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: filterObjectType\n          in: query\n          description: Kind of object for audit log filter\n          schema:\n            type: string\n            enum:\n            - Undefined\n            - Contact\n            - Event\n            - EventRegistration\n            - Invoice\n            - Payment\n            - Refund\n            - Donation\n        - name: FilterObjectId\n          in: query\n          description: Unique identifyer of type filterObjectType\n          schema:\n            type: integer\n        - name: StartDate\n          in: query\n          description: Limits result to log items created since StartDate.\n          schema:\n            type: string\n            format: date\n        - name: EndDate\n          in: query\n          description: Limits result to log items created before EndDate.\n          schema:\n            type: string\n            format: date\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        responses:\n          \"200\":\n            description: An array of audit log item descriptions\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/AuditItemsListResult'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/auditLogItems/{itemId}:\n      get:\n        tags:\n        - Finances.AuditLog\n        summary: Single audit log item.\n        operationId: GetAuditLogItem\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: itemId\n          in: path\n          description: Audit log item identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Audit log item description\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/AuditLogItem'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/donationfields:\n      get:\n        tags:\n        - Donation.CustomFields\n        summary: List of custom fields related to donations.\n        description: |2\n  \n          This list contains a list of fields of 2 different types.\n           - System fields are defined by Wild Apricot system and could not be removed.\n           - Custom fields could be defined by administrator to store some data specific to your account.\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: showSectionDividers\n          in: query\n          description: Default value is false. Specifies whether section dividers also\n            should be presented in the response.\n          schema:\n            type: boolean\n            default: false\n        responses:\n          \"200\":\n            description: An array of donation field descriptions\n            content:\n              '*/*':\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/EntityFieldDescription'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      post:\n        tags:\n        - Donation.CustomFields\n        summary: Creates a new donation field\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/CreateEntityFieldParams'\n          required: true\n        responses:\n          \"200\":\n            description: created field identifier\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/donationfields/{donationFieldId}:\n      put:\n        tags:\n        - Donation.CustomFields\n        summary: Updates an existing donation field\n        description: \"Limitations: field type can not be changed\"\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: donationFieldId\n          in: path\n          description: donation field identifier\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EditEntityFieldParams'\n          required: true\n        responses:\n          \"200\":\n            description: return true if field was updated successfully\n            content:\n              '*/*':\n                schema:\n                  type: boolean\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Donation.CustomFields\n        description: removes existing field by id\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: donationFieldId\n          in: path\n          description: donation field identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: return true if field was removed successfully\n            content:\n              '*/*':\n                schema:\n                  type: boolean\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/donations:\n      get:\n        tags:\n        - Finances.Donations\n        summary: Get list of donations by criteria.\n        operationId: GetDonationsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: StartDate\n          in: query\n          description: Limits result to donations created since StartDate.\n          schema:\n            type: string\n            format: date\n        - name: EndDate\n          in: query\n          description: Limits result to donations created before EndDate.\n          schema:\n            type: string\n            format: date\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        - name: idsOnly\n          in: query\n          description: |\n            Should be set to true in order to get only a list of donation identifiers as a result of search request.\n          schema:\n            type: boolean\n        responses:\n          \"200\":\n            description: Collection of donations that match criteria.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/DonationListResponse'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/donations/{donationId}:\n      get:\n        tags:\n        - Finances.Donations\n        summary: Retrieve information about specific donation\n        operationId: GetDonationDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: donationId\n          in: path\n          description: Unique donation identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: information about specific donation\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Donation'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      put:\n        tags:\n        - Finances.Donations\n        summary: Update existing donation information\n        operationId: UpdateDonation\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: donationId\n          in: path\n          required: true\n          schema:\n            type: integer\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Donation'\n          required: true\n        responses:\n          \"200\":\n            description: Returns 200 on successful data update\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/SentEmails:\n      get:\n        tags:\n        - Emailing.SentEmails\n        description: Sent emails\n        operationId: GetSentEmailsLog\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        - name: idsOnly\n          in: query\n          description: |\n            To get only a list of email identifiers as a result of search request.\n          schema:\n            type: boolean\n        - name: $filter\n          in: query\n          description: |-\n            Allowed filter fields (**allowed operations**):\n              - *SentDate* (**ge**, **le**),\n              - *SenderId* (**eq**) - ID of sender,\n              - *OriginType* (**eq**) - see SentEmail.Origin.OriginType,\n              - *SendingType* (**eq**) -SentEmail.SendingType (Automatic or Manual)\n  \n              only AND boolean operator supported\n              - ...&$filter=SentDate ge 2018-05-01 - will return records sent on or after May 1st, 2018\n          schema:\n            type: string\n        responses:\n          \"200\":\n            description: \"Contains a list of sent emails or list of identifiers, depending\\\n              \\ on idsOnly parameter value.\"\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailLog'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/SentEmails/{emailId}:\n      get:\n        tags:\n        - Emailing.SentEmails\n        description: Sent email details\n        operationId: GetSentEmailDetails\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: emailId\n          in: path\n          description: Email unique Id\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Email details\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailLogRecord'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/EmailDrafts:\n      get:\n        tags:\n        - Emailing.Drafts\n        description: Email drafts\n        operationId: GetEmailDraftsList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        - name: idsOnly\n          in: query\n          description: |\n            Should be set to true in order to get only a list of email identifiers as a result of search request.\n          schema:\n            type: boolean\n        - name: $filter\n          in: query\n          description: \"Allowed filter fields (**allowed operations**):\\n  - *LastChangedDate*\\\n            \\ (**ge**, **le**),\\n  - *CreatorId* (**eq**),\\n  - *IsScheduled* (**eq**),\\n\\\n            \\  - *EventId* (**eq**)\\n\\n  only AND boolean operator supported\\n  - ...&$filter=LastChangedDate\\\n            \\ ge 2018-05-01 - will return records updated on or after May 1st, 2018\\n\\\n            \\  - ...&$filter=LastChangedDate ge 2010-05-01 AND CreatorId eq 123456 -\\\n            \\ will return records updated on or after May 1st, 2010 and create by a\\\n            \\ user with Contact ID 123456      \\n  - ...&$filter=IsScheduled eq true\\\n            \\ - will return scheduled drafts only\"\n          schema:\n            type: string\n        responses:\n          \"200\":\n            description: \"A wrapper object, which contains a list of sent emails. also\\\n              \\ contains EmailDraftIdentifiersResult if idsOnly parameter is true\"\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailDraftListResult'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /accounts/{accountId}/EmailDrafts/{draftId}:\n      get:\n        tags:\n        - Emailing.Drafts\n        description: Email draft details\n        operationId: GetEmailDraft\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: draftId\n          in: path\n          description: Email draft Id\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Email draft\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailDraft'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n      delete:\n        tags:\n        - Emailing.Drafts\n        description: Delete email draft\n        operationId: DeleteEmailDraft\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: draftId\n          in: path\n          description: Email draft Id\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: OK\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/SentEmailRecipients:\n      get:\n        tags:\n        - Emailing.SentEmailRecipients\n        description: Sent email recipients\n        operationId: SentEmailRecipientList\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/pagingSkip'\n        - $ref: '#/components/parameters/pagingTop'\n        - $ref: '#/components/parameters/pagingCount'\n        - name: idsOnly\n          in: query\n          description: |\n            Should be set to true in order to get only a list of contact/recipient identifiers as a result of search request.\n          schema:\n            type: boolean\n        - name: emailId\n          in: query\n          description: sent email Id (from email Log)\n          required: true\n          schema:\n            type: integer\n        - name: LoadLinks\n          in: query\n          description: load clicked links information\n          schema:\n            type: boolean\n        - name: Delivered\n          in: query\n          description: load delivered or not delivered only\n          schema:\n            type: boolean\n        - name: Opened\n          in: query\n          description: load opened or not opened only\n          schema:\n            type: boolean\n        responses:\n          \"200\":\n            description: Contains a list of sent email recipients.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/SentEmailRecipientsRecords'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /rpc/{accountId}/email/SetEmailDraftSchedule:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Pause or resume scheduled draft.\n        operationId: SetEmailDraftSchedule\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EmailScheduleParams'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n            content: {}\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n  \n  /rpc/{accountId}/email/GetEmailDraftPreview:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Get preview version of email.\n        operationId: GetEmailDraftPreview\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SendDraftParams'\n          required: true\n        responses:\n          \"200\":\n            description: email preview subject and body\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailDraftPreview'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/email/SendEmailDraft:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Send draft.\n        operationId: SendEmailDraft\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SendDraftParams'\n          required: true\n        responses:\n          \"200\":\n            description: created sent email id\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/email/SendEmail:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Send draft.\n        operationId: SendEmail\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SendEmailParams'\n          required: true\n        responses:\n          \"200\":\n            description: created sent email id\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/email/CountUniqueAddressesForEmailRecipients:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Get count of real email recipients (unique addresses).\n        operationId: GetUniqueEmailRecipientsCount\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EmailRecipientsParams'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/email/CountUniqueAddressesForEmailDraft:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Get count of real email recipients (unique addresses).\n        operationId: GetUniqueEmailRecipientsCountForDraft\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/emailDraftId'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n            content:\n              '*/*':\n                schema:\n                  type: integer\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/email/GetUniqueAddressesForEmailRecipients:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Get unique addresses of real email recipients.\n        operationId: GetUniqueAddressesForEmailRecipients\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/EmailRecipientsParams'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailRecipients'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n  \n  /rpc/{accountId}/email/GetUniqueAddressesForEmailDraft:\n      post:\n        tags:\n        - Emailing.Operations\n        summary: Get unique addresses of real email recipients.\n        operationId: GetUniqueAddressesForEmailDraft\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        requestBody:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/emailDraftId'\n          required: true\n        responses:\n          \"200\":\n            description: OK\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/EmailRecipients'\n          \"400\":\n            $ref: '#/components/responses/badRequest'\n          \"404\":\n            $ref: '#/components/responses/notFound'\n          \"401\":\n            $ref: '#/components/responses/unauthorized'\n          \"429\":\n            $ref: '#/components/responses/tooManyRequests'\n\n  /accounts/{accountId}/features/{featureId}:\n      get:\n        tags:\n        - Internal.Features\n        summary: Get information about feature availability for specific account.\n        description: |2\n  \n          There is no way to get full list of features, so api client should know feature identifier. For any invalid featureId API will return {\"Allowed\":true}.\n          This method is reserved **_for internal use only_** and not expected to be used by third party client applications.\n        operationId: GetFeatureAvailability\n        parameters:\n        - $ref: '#/components/parameters/accountId'\n        - name: featureId\n          in: path\n          description: feature identifier\n          required: true\n          schema:\n            type: integer\n        responses:\n          \"200\":\n            description: Feature availability status.\n            content:\n              '*/*':\n                schema:\n                  $ref: '#/components/schemas/Feature'\n\ncomponents:\n  schemas:\n\n   Account:\n     type: object\n     description: Information about Wild Apricot account\n     required:\n       - Id\n       - Name\n       - PrimaryDomainName\n       - ContactLimitInfo\n       - Currency\n       - Localization\n       - SquareRegisterSettings\n     properties:\n       Id:\n         type: integer\n         description: Account unique identifier.\n       Name:\n         type: string\n         description: The account name. This corresponds to the organization name as it appears on the Organization details screen.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       PrimaryDomainName:\n         type: string\n         description: The primary domain name for the account.\n       IsFreeAccount:\n         type: boolean\n       Resources:\n         type: array\n         items:\n           $ref: '#/components/schemas/Resource'\n         description: Collection of account-related resources.\n       ContactLimitInfo:\n         $ref: '#/components/schemas/ContactLimitInfo'\n       TimeZone:\n         $ref: '#/components/schemas/TimeZone'\n       Currency:\n         $ref: '#/components/schemas/Currency'\n       Localization:\n         $ref: '#/components/schemas/Localization'\n       SquareRegisterSettings:\n         $ref: '#/components/schemas/SquareRegisterSettings'\n       PaymentSettings:\n         $ref: '#/components/schemas/PaymentSettings'\n       BillingPlan:\n         $ref: '#/components/schemas/BillingPlan'\n\n   BillingPlan:\n     type: object\n     description: Current account billing plan.\n     properties:\n       Name:\n         type: string\n         description: Billing plan name\n       Price:\n         type: number\n         description: Monthly price\n\n   ContactLimitInfo:\n     type: object\n     description: Details about limits on the number of contacts.\n     properties:\n       CurrentContactsCount:\n         type: integer\n         description: Number of contacts currently in database (archived excluded)\n       BillingPlanContactsLimit:\n         type: integer\n         description: Maximum number of contacts allowed by billing plan.\n\n   Currency:\n     type: object\n     properties:\n       Code:\n         type: string\n         description: Currency code according to ISO4217\n       Name:\n         type: string\n         description: Human-readable currency name\n       Symbol:\n         type: string\n         description: Currency symbol like $ or €\n\n   Feature:\n     type: object\n     title: Feature\n     description: Information about specific feature availability\n     properties:\n       Id:\n         type: string\n         description: Feature identifier\n       Allowed:\n         type: boolean\n         description: Indicates whether the feature is allowed\n\n   Localization:\n     type: object\n     properties:\n       DateFormat:\n         type: string\n         description: Date format like \"d MMM yyyy\"\n       TimeFormat:\n         type: string\n         description: Time format like \"h:mm tt\"\n\n   PaymentSettings:\n     type: object\n     properties:\n       GeneralPaymentInstructions:\n         type: string\n         description: General payment instructions (shown on the Invoices & Payments page and Manual invoices)\n       EventPaymentInstructions:\n         type: string\n         description: For event registrations (can be changed for each event)\n       MembershipPaymentInstructions:\n         type: string\n         description: For membership applications, renewals and level changes\n\n   SquareRegisterSettings:\n     type: object\n     required:\n       - IntegrationEnabled\n     description: 'Settings for Square Register integration, used for mobile app'\n     properties:\n       IntegrationEnabled:\n         type: boolean\n         description: Is integration enabled in admin UI.\n       ClientId:\n         type: string\n         description: (optional) Square client Id\n\n   TimeZone:\n     type: object\n     description: Details about account time zone\n     properties:\n       ZoneId:\n         type: string\n         description: 'Time zone id, i.e. \"Arabic Standard Time\"'\n       Name:\n         type: string\n         description: 'Time zone name, i.e. \"(UTC+03:00) Baghdad\"'\n       UtcOffset:\n         type: integer\n         description: 'Offcet from UTC Time in minutes, i.e. \"180\"'\n\n   CreateEntityFieldParams:\n     allOf:\n       - $ref: '#/components/schemas/EntityFieldDescription'\n       - type: object\n         required:\n           - FieldType\n         properties:\n           FieldType:\n             $ref: '#/components/schemas/CustomFieldType'\n\n   EditEntityFieldParams:\n     allOf:\n       - $ref: '#/components/schemas/EntityFieldDescription'\n       - type: object\n         required:\n           - FieldType\n         properties:\n           FieldType:\n             $ref: '#/components/schemas/CustomFieldType'\n\n   EntityFieldDescription:\n     type: object\n     required:\n       - FieldName\n       - Description\n       - AdminOnly\n     properties:\n       FieldName:\n         type: string\n         description: >-\n           Field name title, could be displayed in user interface.\n           Field name could be changed by account administrator.\n       SystemCode:\n         type: string\n         description: >-\n           System-defined code associated with field. It does not change even if\n           FieldName is edited in admin backend.\n       DisplayType:\n         type: string\n         description: >-\n           Optional hint, which tells how to display and edit field. It appears\n           for String and Choice fields.\n       IsSystem:\n         type: boolean\n         description: >-\n           Field is system-defined and could not be deleted.\n           However, field name could be changed by account administrator.\n       Description:\n         type: string\n         description: System-defined description of the field. Empty for custom fields.\n       FieldInstructions:\n         type: string\n         description: Admin-defined comment for the field. Shown as a tip when members or visitors fill in forms.\n       AllowedValues:\n         type: array\n         description: >-\n           If field value is limited to set of predefined values, this contains list of allowed values.\n           Normally, AllowedValues appear for MultipleChoice and Choice fields.\n         items:\n           $ref: '#/components/schemas/OptionsListItem'\n       Order:\n         type: integer\n         description: Sorting order to display the field in UI\n       RulesAndTermsInfo:\n         $ref: '#/components/schemas/RulesAndTermsInfo'\n\n   EntityFieldDescriptionWithExtraCharge:\n     allOf:\n       - $ref: '#/components/schemas/EditEntityFieldParams'\n       - type: object\n         required:\n           - FieldType\n         properties:\n           ExtraCharge:\n             $ref: '#/components/schemas/ExtraCharge'\n\n   Error:\n     type: object\n     required:\n       - code\n       - message\n     properties:\n       code:\n         type: string\n         description: 'Error code, like Validation / Search / ...'\n       message:\n         type: string\n         description: An explanation of why this error occured\n       details:\n         type: object\n         description: |\n           More information about the error. Data structure is specific for each\n           kind of error.\n\n   FieldValue:\n     type: object\n     properties:\n       FieldName:\n         type: string\n         description: Field title. Custom field names are defined by account adinistrator. System field names are predefined by Wild Apricot system.\n       SystemCode:\n         type: string\n         description: The system code is a unique field identifier that can be used instead of the field name to identify the field. While field name could be changed by administrators, system codes are defined by the system and cannot be changed.\n       Value:\n         type: object\n         description: Field value could be an integer / string / date in ISO8601 format / boolean / an object consisting of Id and Label or array of such objects. The content format depends on custom field description.\n\n   LinkedResource:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: unique item identifier\n       Url:\n         type: string\n         description: API url to get item details\n\n   LinkedResourceWithName:\n     allOf:\n       - $ref: '#/components/schemas/LinkedResource'\n       - type: object\n         properties:\n           Name:\n             type: string\n             description: Resource name\n\n   Resource:\n     type: object\n     required:\n       - Name\n       - Url\n       - AllowedOperations\n     properties:\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Name:\n         type: string\n         description: Name of resource\n       Description:\n         type: string\n         description: Text description of the resource\n       AllowedOperations:\n         type: array\n         items:\n           type: string\n         description: |\n           Collection of allowed operations for this resource. Possible values are\n           GET - Resource can be requested\n           POST - Resource can be created\n           PUT - Resource can be updated\n           DELETE - Resource can be deleted\n\n   ResourceUrl:\n     description: Permanent resource URL in API.\n     schema:\n       type: string\n\n   AttachmentData:\n     type: object\n     properties:\n       Name:\n         type: string\n         description: attachment name\n       MimeType:\n         type: string\n         description: http ContentType (MIME type)\n       Data:\n         type: object\n         description: uploading file data\n   \n\n   AttachmentDataList:\n     description: list of uploading files\n     type: array\n     items:\n         $ref: '#/components/schemas/AttachmentData'\n     \n\n   Bundle:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique bundle identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Email:\n         type: string\n         description: Email of bundle coordinator.\n       ParticipantsCount:\n         type: integer\n         description: The number of members in the bundle.\n       Administrator:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to bundle coordinator.\n       MembershipLevel:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to membership level related to this bundle.\n       SpacesLeft:\n         type: integer\n         description: If bundle size is limited, then this field indicates number of\n           vacant spaces left in the bundle.\n       Members:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: Collection of links to members of the bundle.\n\n   Contact:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique contact identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       FirstName:\n         type: string\n         description: Shortcut for custom field value with system code 'FirstName'\n       LastName:\n         type: string\n         description: Shortcut for custom field value with system code 'LastName'\n       Organization:\n         type: string\n         description: Shortcut for custom field value with system code 'Organization'\n       Email:\n         type: string\n         description: Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.\n       DisplayName:\n         type: string\n         description: Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.\n       ProfileLastUpdated:\n         type: string\n         format: date\n         description: Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact.\n       MembershipLevel:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResourceWithName'\n           - description: Information about current membership level assigned to the contact. If the contact is not a member, then the MembershipLevel field is not included in the results.\n       MembershipEnabled:\n         type: boolean\n         description: Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member.\n       Status:\n         type: string\n         enum:\n           - Active\n           - Lapsed\n           - PendingNew\n           - PendingRenewal\n           - PendingUpgrade\n         description: The status of the contact's membership. The status is only included in the results if the contact is a member.\n       IsAccountAdministrator:\n         type: boolean\n         description: Indicates if the contact is an account administrator.\n       TermsOfUseAccepted:\n         type: boolean\n         description: Indicates if the contact already accepted Wild Apricot's terms of use.\n       FieldValues:\n         type: array\n         description: For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.\n         items:\n           $ref: '#/components/schemas/ContactFieldValue'\n\n   contactExtendedMembershipInfo:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique contact identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       FirstName:\n         type: string\n         description: Shortcut for custom field value with system code 'FirstName'\n       LastName:\n         type: string\n         description: Shortcut for custom field value with system code 'LastName'\n       Organization:\n         type: string\n         description: Shortcut for custom field value with system code 'Organization'\n       Email:\n         type: string\n         description: Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.\n       DisplayName:\n         type: string\n         description: Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.\n       ProfileLastUpdated:\n         type: string\n         format: date\n         description: Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact.\n       MembershipLevel:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResourceWithName'\n           - description: Information about current membership level assigned to the contact. If the contact is not a member, then the MembershipLevel field is not included in the results.\n       MembershipEnabled:\n         type: boolean\n         description: Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member.\n       Status:\n         type: string\n         enum:\n           - Active\n           - Lapsed\n           - PendingNew\n           - PendingRenewal\n           - PendingUpgrade\n         description: The status of the contact's membership. The status is only included in the results if the contact is a member.\n       ExtendedMembershipInfo:\n         $ref: '#/components/schemas/ExtendedMembershipInfo'\n       IsAccountAdministrator:\n         type: boolean\n         description: Indicates if the contact is an account administrator.\n       TermsOfUseAccepted:\n         type: boolean\n         description: Indicates if the contact already accepted Wild Apricot's terms of use.\n       FieldValues:\n         type: array\n         description: For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.\n         items:\n           $ref: '#/components/schemas/ContactFieldValue'\n\n   ContactFieldAccessLevel:\n     type: string\n     enum:\n       - Public\n       - Members\n       - Nobody\n     description: >\n   \n       Indicates who is allowed to view the field value.\n       - **Public** - value is visible to anyone who has access to members directory\n       - **Members** - value is visible only to members\n       - **Nobody* - value is visible only to account administrators\n\n   ContactFieldDescription:\n     allOf:\n       - $ref: '#/components/schemas/EntityFieldDescriptionWithExtraCharge'\n       - type: object\n       - required:\n         - Id\n         - Type\n         - Access\n         - AdminOnly\n         - MemberOnly\n       - properties:\n           Id:\n             type: integer\n             description: Unique field identifier.\n           Access:\n             $ref: '#/components/schemas/ContactFieldAccessLevel'\n           AdminOnly:\n             type: boolean\n             description: Indicates that the field is accessible only by administrators.\n           ExistsInLevels:\n             type: array\n             description: If field is defined for specific levels only, this contains list of membership levels.\n             items:\n               $ref: '#/components/schemas/LinkedResource'\n           MemberAccess:\n             $ref: '#/components/schemas/MemberFieldAccess'\n           MemberOnly:\n             type: boolean\n             description: Indicates whether the field is a membership field.\n           IsBuiltIn:\n             type: boolean\n             description: >-\n               The field is a built-in system field, it cannot be edited or\n               deleted.\n           SupportSearch:\n             type: boolean\n             description: >-\n               Indicates that this field can be used in $filter expression in contact search.\n           IsEditable:\n             type: boolean\n             description: >-\n               Indicates that the field's value can be changed with create/update requests. Otherwise\n               value can’t be edited through API. If non-editable field value is\n               provided in create/update contact request, the value is ignored by API.\n           RulesAndTermsInfo:\n             $ref: '#/components/schemas/RulesAndTermsInfo'\n           RenewalPolicy:\n             $ref: '#/components/schemas/RenewalPolicy'\n           ProrateInApplication:\n             type: boolean\n             description: >-\n               If the field has associated cost, this indicates if the cost should\n               be prorated over a partial period of time.\n           FieldType:\n             $ref: '#/components/schemas/CustomFieldType'\n\n   ContactFieldValue:\n     allOf:\n       - $ref: '#/components/schemas/FieldValue'\n       - type: object\n         properties:\n           CustomAccessLevel:\n             $ref: '#/components/schemas/ContactFieldAccessLevel'\n\n   ContactIdsResponse:\n     type: object\n     properties:\n       ContactIdentifiers:\n         type: array\n         items:\n           type: integer\n         description: >-\n           List of contact identifiers that match request criteria.\n           The field appears only if idsOnly parameter was passed in request.\n\n   ContactsAsyncResponse:\n     type: object\n     properties:\n       ResultId:\n         type: string\n         description: Unique result identifier.\n       ResultUrl:\n         type: string\n         description: >-\n           URL to check async result availability.\n           We expect that client application will check this URL with some small delay (every 5 sec) until API\n           returns a list of contacts or ProcessingState==Failed.\n       Requested:\n         type: string\n         format: datetime\n         description: Date and time when the request was queued for processing.\n       Processed:\n         type: string\n         format: datetime\n         description: Date and time when the request was processed.\n       ProcessingState:\n         type: string\n         enum:\n           - Waiting\n           - Processing\n           - Complete\n           - Failed\n         description: >-\n           Asynchronous request state. It starts from Waiting, then server process it.\n           Request may end in one of final states: Complete or Failed.\n       InitialQuery:\n         type: object\n         properties:\n           ObjectType:\n             type: string\n             description: Object type which was requested. In this case it is always Contact.\n           FilterExpression:\n             type: string\n             description: Value of $filter parameter passed into API.\n           SelectExpression:\n             type: string\n             description: Value of $select parameter passed into API.\n           ReturnIds:\n             type: boolean\n             description: >-\n               Indicates if client requested only a list of identifiers,\n               instead of full list of contacts.\n       ErrorDetails:\n         type: string\n         description: In case of error, provides description of error occured.\n\n   ContactsCountResponse:\n     type: object\n     properties:\n       Count:\n         type: integer\n         description: >-\n           Number of contacts that match request criteria.\n           This field appears only if $count parameter was passed in request.\n\n   ContactsListResponse:\n     type: object\n     properties:\n       Contacts:\n         type: array\n         items:\n           $ref: '#/components/schemas/Contact'\n         description: List of contacts that match request criteria.\n\n   ContactsMe:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Contact unique identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       DisplayName:\n         type: string\n         description: Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists.\n       FirstName:\n         type: string\n         description: Shortcut for custom field value with system code 'FirstName'\n       LastName:\n         type: string\n         description: Shortcut for custom field value with system code 'LastName'\n       Email:\n         type: string\n         description: Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account.\n       Organization:\n         type: string\n         description: Shortcut for custom field value with system code 'Organization'\n       Status:\n         type: string\n         enum:\n           - Active\n           - Lapsed\n           - PendingNew\n           - PendingRenewal\n           - PendingUpgrade\n         description: The status of the contact's membership. The status is only included in the results if the contact is a member.\n       MembershipLevel:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResourceWithName'\n           - description: Information about current membership level assigned to the contact. If the contact is not a member, then the MembershipLevel field is not included in the results.\n       IsAccountAdministrator:\n         type: boolean\n         description: Indicates if the contact is an account administrator.\n       TermsOfUseAccepted:\n         type: boolean\n         description: Indicates if the contact already accepted Wild Apricot's terms of use.\n\n   ContactsResponse:\n     allOf:\n       - $ref: '#/components/schemas/ContactsAsyncResponse'\n       - $ref: '#/components/schemas/ContactIdsResponse'\n       - $ref: '#/components/schemas/ContactsCountResponse'\n       - $ref: '#/components/schemas/ContactsListResponse'\n\n   CreateContactFieldParams:\n     allOf:\n       - $ref: '#/components/schemas/EditContactFieldParams'\n       - type: object\n         required:\n           - FieldType\n         properties:\n           FieldType:\n             type: string\n             enum:\n               - Text\n               - MultilineText\n               - MultipleChoice\n               - MultipleChoiceWithExtraCharge\n               - RadioButtons\n               - RadioButtonsWithExtraCharge\n               - Dropdown\n               - Picture\n               - RulesAndTerms\n               - Date\n               - ExtraChargeCalculation\n               - SectionDivider\n             description: Field data type.\n           MemberOnly:\n             type: boolean\n             description: Indicates whether a field is available only to members.\n\n   CreateContactParams:\n     type: object\n     properties:\n       FirstName:\n         type: string\n         description: Shortcut for custom field with system code 'FirstName'\n       LastName:\n         type: string\n         description: Shortcut for custom field with system code 'LastName'\n       Organization:\n         type: string\n         description: Shortcut for custom field with system code 'Organization'\n       Email:\n         type: string\n         description: >-\n           Contact primary email, shortcut for custom field with system code 'Email'.\n           Should be unique in account.\n       MembershipLevel:\n         type: object\n         properties:\n           Id:\n             type: integer\n             description: ID of membership level to assign.\n       MembershipEnabled:\n         type: boolean\n         description: >-\n           Indicates whether the contact has membership.\n           False means that the contact is a not a member or the membership is suspended.\n       Status:\n         type: string\n         enum:\n           - Active\n           - Lapsed\n           - PendingNew\n           - PendingRenewal\n           - PendingUpgrade\n         description: >-\n           The status of the membership.\n           The status is only included in the results if the contact is a member.\n   \n       Password:\n         type: string\n         description: New password to assign. If you don't want to change password, just skip this field.\n   \n       FieldValues:\n         type: array\n         description: An array of field values to assign to contact.\n         items:\n           $ref: '#/components/schemas/FieldValue'\n       RecreateInvoice:\n         type: boolean\n         description: Indicates whether to create invoice is required. Default value is **TRUE**\n\n   CustomFieldType:\n     type: string\n     enum:\n       - String\n       - DateTime\n       - Boolean\n       - Choice\n       - MultipleChoice\n       - Number\n       - SectionDivider\n       - CalculatedExtraCharge\n       - Picture\n     description: Custom field data type. \n\n   EditContactFieldParams:\n     type: object\n     required:\n       - FieldType\n       - FieldName\n     properties:\n       FieldName:\n         type: string\n         description: New field name. Must be unique.\n       IsRequired:\n         type: boolean\n         description: >-\n           Indicates whether a field has to be filled before the form is submitted.\n           This limitation affects member-facing functionality only,\n           admin always can submit form even without required fields.\n       AdminOnly:\n         type: boolean\n         default: false\n         description: Indicates that the field is accessible only by administrators.\n       Access:\n         $ref: '#/components/schemas/ContactFieldAccessLevel'\n       FieldInstructions:\n         type: string\n         description: >-\n           Shown as a tip when members or visitors fill in forms. Max length is 250 characters.\n       Order:\n         type: integer\n         description: Sorting order to display the field in UI.\n       AllowedValues:\n         type: array\n         description: >-\n           List of allowed values for this field.\n           This data is used for Choice and MultipleChoice fields, otherwise it will be ignored.\n         items:\n           $ref: '#/components/schemas/OptionsListItem'\n       RulesAndTermsInfo:\n         $ref: '#/components/schemas/RulesAndTermsInfo'\n       ExistsInLevels:\n         type: array\n         description: >-\n           Collection of membership levels where the field exists. If empty\n           collection provided, it means the field would be available for all\n           levels.\n         items:\n           type: object\n           properties:\n             Id:\n               type: integer\n               description: Id of membership level\n       MemberAccess:\n         $ref: '#/components/schemas/MemberFieldAccess'\n       RenewalPolicy:\n         $ref: '#/components/schemas/RenewalPolicy'\n       ProrateInApplication:\n         type: boolean\n         description: >-\n           Whether the cost should be prorated over a partial period of time.\n           Used only by fields with an associated cost.\n       ExtraCharge:\n         $ref: '#/components/schemas/ExtraCharge'\n\n   ExtendedMembershipInfo:\n     type: object\n     description: >-\n       Readonly object \n     properties:\n       PendingMembershipOrderStatusType:\n         type: string\n         enum:\n           - Invisible\n           - PendingNoCorrespondingInvoice\n           - PendingNotPaidYet\n           - InvoicePaidManualApprovalRequired\n           - FreeOrderManualApprovalRequired\n           - InvoiceNotPaidButOperationApproved\n           - MultipleInvoiceNotPaidMemberActivated\n           - MultipleInvoiceNotPaidMemberPending\n       PendingMembershipInvoice:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to unpaid invoice, related to pending membership application.\n       AllowedActions:\n         type: array\n         description: >-\n           List of allowed actions related to contact. Each action is described with title and URL,\n           which should be used in POST request.\n         items:\n           $ref: '#/components/schemas/LinkedResourceWithName'\n\n   ExtraCharge:\n     type: object\n     title: ExtraChargeOptions\n     description: This property appears for CalculatedExtraCharge fields only.\n     required:\n       - MultiplierType\n       - Multiplier\n     properties:\n       MultiplierType:\n         type: string\n         description: |\n           Indicates the type of multiplier field.\n             ItemPrice multiplier specifies a price for each requested item.\n             Percentage multiplier specifies a percent of field value to use as extra charge.\n         enum:\n           - ItemPrice\n           - Percentage\n       Multiplier:\n         type: number\n         format: decimal\n         description: value of multiplier for extra charge calculation\n       MinAmount:\n         type: integer\n         description: >-\n           Minimal amount of items to request (minimal field value). For\n           ItemPrice multiplier type only.\n       MaxAmount:\n         type: integer\n         description: >-\n           Maximum amount of items to request (maximum field value). For\n           ItemPrice multiplier type only.\n       MinCharge:\n         type: number\n         format: decimal\n         description: >-\n           Minimal extra charge. (minimal field value). For Percentage\n           multiplier type only.\n       MaxCharge:\n         type: number\n         format: decimal\n         description: >-\n           Maximum extra charge. (maximum field value). For Percentage\n           multiplier type only.\n\n   FileInfo:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique attachment identifier\n       Name:\n         type: string\n         description: attachment name\n       ContentType:\n         type: string\n         description: http ContentType (MIME type)\n       Size:\n         type: integer\n         description: File size\n       CreatedDate:\n         type: string\n         format: datetime\n         description: Date and time when the file has been uploaded.\n   \n\n   MemberFieldAccess:\n     type: string\n     title: MemberAccess\n     enum:\n       - EditInProfileAndInApplicationForm\n       - EditInProfile\n       - EditInApplicationForm\n       - ViewOnly\n       - Nobody\n     description: >-\n       Controls whether the member is allowed to view or modify this field. Only for member fields.\n\n   MembershipGroupListItem:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique group identifier\n       Name:\n         type: string\n         description: group name\n       Description:\n         type: string\n         description: group description\n   MembershipGroup:\n     allOf:\n       - $ref: '#/components/schemas/MembershipGroupListItem'\n       - type: object\n         properties:\n           ContactsCount:\n             type: integer\n             description: Total count of group participants\n           ContactIds:\n             type: array\n             items:\n               type: integer\n               description: Contact IDs of group participants.\n\n   MembershipLevel:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique membership level identifier\n       Name:\n         type: string\n         description: level name\n       Description:\n         type: string\n         description: level description\n       PublicCanApply:\n         type: boolean\n         description: Indicates if non-member can apply for membership with this level.\n       Type:\n         type: string\n         enum:\n           - Individual\n           - Bundle\n         description: Indicates if membership level is individual or bundle.\n       BundleMembersLimit:\n         type: integer\n         description: Maximum number of bundle members. Empty for individuals.\n       MembershipFee:\n         type: number\n         description: >-\n           Price of being a member with this level of membership.\n           Price is for RenewalPeriod.\n       MemberCanChangeToLevels:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: >-\n           Member can switch from current level to one of levels from this list.\n       RenewalPeriod:\n         $ref: '#/components/schemas/MembershipRenewalPeriod'\n\n   MembershipRenewalPeriod:\n     type: object\n     description: Describes membership renewal period.\n     properties:\n       Kind:\n         type: string\n         enum:\n           - Never\n           - Monthly\n           - Quarterly\n           - TwiceAYear\n           - EveryNYears\n         description: Period of renewal.\n       StartFromJoinDate:\n         type: boolean\n         description: >-\n           Indicates if renewal period starts from join date.\n           Otherwise, starts from dates specified in Dates field.\n       Dates:\n         type: array\n         description: Collection of renewal dates during a year.\n         items:\n           type: object\n           properties:\n             Month:\n               type: integer\n               description: Month of a year, 1-12\n               minimum: 1\n               maximum: 12\n             Day:\n               type: integer\n               description: Day of a month\n               minimum: 1\n               maximum: 31\n       AutomaticRecurringPayments:\n         type: boolean\n         description: Indicates if recurring payments will be charged automatically.\n       ApplicationReview:\n         type: object\n         description: Application approval policy\n         properties:\n           PrepayRequired:\n             type: boolean\n             description: >-\n               If true, membership fee should be received in full before application is activated.\n               Else, approved memberships activate immediately, regardless of payment status.\n           AdminApprovalRequired:\n             type: boolean\n             description: >-\n   \n               Indicates that account administrator should approve membership application.\n   \n               False means that all applications are considered approved when they are submitted.\n\n   OptionsListItem:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Item identifier unique in the list\n       Label:\n         type: string\n         description: Human-readable text label.\n       Position:\n         type: integer\n         description: Option position among other options.\n       SelectedByDefault:\n         type: boolean\n         description: Indicates whether this option would be selected on form if user did not select another option.\n       ExtraCost:\n         type: number\n         format: decimal\n         description: Extra price for selecting this option. Used only by fields with an associated cost.\n\n   RenewalPolicy:\n     type: object\n     properties:\n       IncludeInRenewals:\n         type: boolean\n         description: >-\n           Indicates if the field should be shown in renewal form.\n       AllowedToChangeInRenewal:\n         type: boolean\n         description: >-\n           Indicates whether field value can be changed during renual process.\n           Can be set to TRUE only if IncludeInRenewals is set to TRUE.\n     description: >-\n       Defines how system manages field during renewal process.\n       Used only by multichoice fields with an associated cost.\n\n   RulesAndTermsInfo:\n     type: object\n     description: >-\n       Additional info for fields with rules / terms conditions. Not present for other field types.\n     properties:\n       Text:\n         type: string\n         description: Terms of use label.\n       Link:\n         type: string\n         description: Url of the rules and terms document.\n\n   SavedSearchListItem:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique search identifier\n       Name:\n         type: string\n         description: Saved search name\n       Description:\n         type: string\n         description: Save search description\n   SavedSearch:\n     allOf:\n       - $ref: '#/components/schemas/SavedSearchListItem'\n       - type: object\n         properties:\n           ContactIds:\n             type: array\n             items:\n               type: integer\n               description: Contact IDs found by Saved Search.\n\n   UpdateContactFieldParams:\n     allOf:\n       - $ref: '#/components/schemas/EditContactFieldParams'\n       - type: object\n         properties:\n           Id:\n             type: integer\n             description: Unique identifier of existing field.\n\n   UpdateContactParams:\n     allOf:\n       - $ref: '#/components/schemas/CreateContactParams'\n       - type: object\n         properties:\n           Id:\n             type: integer\n             description: Unique contact identifier.\n\n   ClickedLink:\n     type: object\n     properties:\n       Url:\n         type: string\n         description: Link address.\n       Clicked:\n         type: boolean\n         description: the link is clicked at least once\n       ClicksCount:\n         type: integer\n         description: Total number of link clicks (by all recipients).\n\n   CloneEvent:\n     type: object\n     properties:\n       EventId:\n         type: integer\n         description: Identifier of existing event you want to clone.\n       TitlePrefix:\n         type: string\n         description: Prefix to be added to the event title to form the new title.\n           For example if you are cloning the event \"Annual meetup\" and the prefix is \"yet another \",\n           then the new event will have the title \"yet another Annual meetup\".\n\n   DeliveryStatus:\n     type: string\n     enum:\n       - Queued\n       - Delivered\n       - Failed\n     description: Email delivery status.\n\n   EmailDraft:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique email draft identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       CreatedDate:\n         type: string\n         format: datetime\n         description: Date and time when the draft was created.\n       Type:\n         $ref: '#/components/schemas/EmailDraftType'\n       Subject:\n         type: string\n         description: |\n           Value for email subject. It may contain macros, which will be replaced before delivery.\n       Body:\n         type: string\n         description: |\n           Value for email body. Usually it is HTML content with macros, which will be replaced before delivery.\n       ReplyToName:\n         type: string\n         description: Display name for reply to\n       ReplyToAddress:\n         type: string\n         description: Email address to use as reply to.\n       EventId:\n         type: integer\n         description: Event identifier for which the draft has been started (if any).\n       Creator:\n         $ref: '#/components/schemas/ShortContact'\n       IsLinkTrackingAllowed:\n         type: boolean\n         description: Indicates if email tracking is enabled for this email.\n       Recipients:\n         $ref: '#/components/schemas/EmailRecipients'\n       LastChangedDate:\n         type: string\n         format: datetime\n         description: Date and time when the draft was last modified.\n       Modifier:\n         $ref: '#/components/schemas/ShortContact'\n       IsScheduled:\n         type: boolean\n         description: Indicates if draft delivery is scheduled for a particular date. See ScheduledDate value.\n       ScheduledDate:\n         type: string\n         format: datetime\n         description: Date and time when the draft will be sent.\n\n   emailDraftId:\n     type: integer\n     title: emailDraftId\n     description: email draft identifier\n\n   EmailDraftListResult:\n     type: object\n     properties:\n       Emails:\n         type: array\n         items:\n           $ref: '#/components/schemas/EmailDraft'\n         description: Collection of email drafts.\n\n   EmailDraftPreview:\n     type: object\n     description: Describes how email will look like when all macros are applied.\n     properties:\n       Subject:\n         type: string\n         description: Email subject with macros applied.\n       Body:\n         type: string\n         description: Email body HTML with mosros applied.\n\n   EmailDraftType:\n     type: string\n     enum:\n       - Unknown\n       - ContactBlast\n       - EventAttendees\n       - EventWaitlistPersons\n\n   EmailLog:\n     allOf:\n       - $ref: '#/components/schemas/EmailLogRecords'\n       - $ref: '#/components/schemas/EmailLogIdentifiers'\n\n   EmailLogIdentifiers:\n     type: object\n     properties:\n       EmailsIdentifiers:\n         type: array\n         items:\n           type: integer\n           description: Unique email identifier.\n         description: A collection of email log record identifiers.\n\n   EmailLogRecord:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique email identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       SentDate:\n         type: string\n         description: Date when email sending was started.\n       Subject:\n         type: string\n         description: Email subject.\n       Body:\n         type: string\n         description: Email body.\n       ReplyToName:\n         type: string\n       ReplyToAddress:\n         type: string\n       Type:\n         $ref: '#/components/schemas/EmailType'\n       IsTrackingAllowed:\n         type: boolean\n       IsCopySentToAdmins:\n         type: boolean\n       SenderId:\n         type: integer\n       SenderName:\n         type: string\n       SendingType:\n         $ref: '#/components/schemas/InitializationSourceType'\n       Origin:\n         $ref: '#/components/schemas/EmailOrigin'\n       SubOriginId:\n         type: integer\n       RecipientCount:\n         type: integer\n       ReadCount:\n         type: integer\n       UniqueLinkClickCount:\n         type: integer\n       SuccessfullySentCount:\n         type: integer\n       RecipientsThatClickedAnyLinkCount:\n         type: integer\n       FailedCount:\n         type: integer\n       InProgress:\n         type: boolean\n       Recipient:\n         $ref: '#/components/schemas/EmailRecipient'\n         description: only if email has a single recipient\n\n   EmailLogRecords:\n     type: object\n     properties:\n       Emails:\n         schema:\n           type: array\n           items:\n             $ref: '#/components/schemas/EmailLogRecord'\n         description: |\n           Collection of email log records.\n\n   EmailOrigin:\n     type: object\n     properties:\n       OriginType:\n           $ref: '#/components/schemas/EmailOriginType'\n       Id:\n         type: integer\n         description: Unique origin identifier.\n       Name:\n         type: string\n\n   EmailOriginType:\n     type: string\n     enum:\n       - System\n       - Contact\n       - MembershipLevel\n       - Event\n       - Donation\n       - WebPage\n       - ForumTopicSubscription\n       - FinancialDocument\n       - NewPasswordEmail\n       - OnlineStoreOrder\n       - PollStartAnnouncement\n     description: Email origin type.\n\n   EmailRecipient:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: |\n           If email was sent to individual recipient, this field contains contact identifier.\n           If email was sent to all recipients from some saved search, this field contains saved search identifier.\n       Type:\n         type: integer\n         description: Recipient group type.\n         enum:\n           - IndividualContactRecipient\n           - IndividualEventRegistrationRecipient\n           - EventAttendees_CheckedIn\n           - EventAttendees_NotCheckedIn\n           - EventAttendees_Paid\n           - EventAttendees_NotPaid\n           - EventAttendees_All\n           - EventAttendees_Selected\n           - Contacts_All\n           - Contacts_Selected\n           - Contacts_SavedSearch\n           - Members_All\n           - Members_SavedSearch\n           - SentEmailRecipient\n           - EventWaitlist_All\n           - EventWaitlist_Selected\n       Name:\n         type: string\n         description: Display name of recipient or name of saved search.\n       Email:\n         type: string\n         description: recipient email. for IndividualRecipient and SentEmailRecipient types only\n\n   EmailRecipients:\n     description: Collection of recipients.\n     schema:\n       type: array\n       items:\n         $ref: '#/components/schemas/EmailRecipient'\n\n   EmailRecipientsParams:\n     type: object\n     title: EmailRecipientsParams\n     description: list of email recipient groups\n     properties:\n       Recipients:\n         type: array\n         items:\n           $ref: '#/components/schemas/EmailRecipient'\n       ContextEventId:\n         type: integer\n         description: context event identifier. not required. for Event related recipient types only\n\n   EmailScheduleParams:\n     type: object\n     properties:\n       DraftId:\n         type: integer\n         description: Unique email draft identifier.\n       ScheduleDate:\n         type: string\n         format: datetime\n         description: Date and time scheduled for sending.\n       IsScheduled:\n         type: boolean\n         description: Indicates if draft is scheduled for delivery. Set False to pause.\n\n   EmailType:\n     type: string\n     enum:\n       - Unknown\n       - MemberApplication_ActivationEmail\n       - MemberApplication_InitiationEmail\n       - MemberApplication_BundleMember_ActivationEmail\n       - MemberApplication_BundleAdmin_ActivationEmail\n       - MemberRenewal_FreeRenewal\n       - MemberRenewal_RenewalPending\n       - MemberRenewal_RenewalConfirmed\n       - MemberRenewal_RenewalCanceledByMember\n       - MemberRenewal_MemberRenewal_RecurringRenewalFailed\n       - MemberRenewal_Online_PaymentSuccessfull\n       - MemberRenewal_AdvanceRenewalReminder1\n       - MemberRenewal_AdvanceRenewalReminder2\n       - MemberRenewal_RenewalDateNotice\n       - MemberRenewal_GracePeriod\n       - MemberRenewal_Lapsed\n       - MemberLevelChange_InitiationEmail\n       - MemberLevelChange_ActivationEmail\n       - Donation_Confirmation\n       - EventRegistration_OfflinePayment_FreeLevelConfirmationEmail\n       - EventRegistration_OfflinePayment_PaidLevelConfirmationEmail\n       - EventRegistration_OfflinePayment_PaidLevelPendingEmail\n       - EventRegistration_NewWaitlistEntryEmail\n       - EventRegistration_CanceledEmail\n       - EventRegistration_OnlinePayment_PaidLevelConfirmationEmail\n       - EventRegistration_Reminder1\n       - EventRegistration_Reminder2\n       - EventRegistration_Reminder3\n       - EventRegistration_Announcement1\n       - EventRegistration_Announcement2\n       - EventRegistration_Announcement3\n       - EmailBlast_Members\n       - EmailBlast_Registrations\n       - EmailBlast_WaitlistPersons\n       - Finances_Invoice\n       - Finances_PaymentReceipt\n       - Finances_DonationReceipt\n       - Finances_RefundNote\n       - Contact_Password\n       - SubscriptionForm_Confirmation\n       - Public_MemberToMemberEmail\n       - Poll_Announcement_Notification\n       - ForgottenPasswordRequest\n       - ForumNotification\n       - ForumTopicNotification\n       - OnlineStore_Order\n     description: The reason why the email was sent.\n\n   InitializationSourceType:\n     type: string\n     enum:\n       - Automatic\n       - Manual\n     description: Email initialization source type.\n\n   SendDraftParams:\n     type: object\n     properties:\n       DraftId:\n         type: integer\n         description: Unique email draft identifier.\n\n   SendEmailParams:\n     type: object\n     properties:\n       Subject:\n         type: string\n         description: Subject of email message. May contain macros.\n       Body:\n         type: string\n         description: Email body in HTML format. May contain macros.\n       ReplyToAddress:\n         type: string\n         description: Email ReplyTo address.\n       ReplyToName:\n         type: string\n         description: Email ReplyTo display name.\n       Recipients:\n         $ref: '#/components/schemas/EmailRecipients'\n       EventId:\n         type: integer\n         description: |\n           Unique event identifier. Required if email should be sent to event-related recipients, e.g. all attendees.\n             See EmailRecipient description for details.\n\n   SentEmailRecipient:\n     type: object\n     properties:\n       ContactId:\n         type: integer\n         description: |\n           Contact identifier with used email address.\n       EventRegistrationId:\n         type: integer\n         description: |\n           Event regisration Id if the email was sent to an event attendee.\n       FirstName:\n         type: string\n         description: first name of recipient.\n       LastName:\n         type: string\n         description: last name of recipient.\n       Organization:\n         type: string\n         description: organization of recipient.\n       Email:\n         type: string\n         description: recipient email.\n       RecipientName:\n         type: string\n         description: display name of recipient (Last, First names (if set) or Organization).\n       IsDelivered:\n         type: boolean\n         description: email has been successfully sent.\n       IsOpened:\n         type: boolean\n         description: email has been opened/viewed.\n       ClickedLinks:\n         type: array\n         items:\n             $ref: '#/components/schemas/ClickedLink'\n\n   SentEmailRecipientsRecords:\n     type: object\n     properties:\n       Recipients:\n         type: array\n         items:\n           $ref: '#/components/schemas/SentEmailRecipient'\n         description: Collection of email recipients.\n\n   ShortContact:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique contact identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       FirstName:\n         type: string\n         description: Contact first name\n       LastName:\n         type: string\n         description: Contact last name\n\n   EventRegistration:\n     type: object\n     required:\n       - Id\n       - Url\n       - Event\n       - Contact\n       - RegistrationType\n       - RegistrationTypeId\n       - DisplayName\n       - Organization\n       - IsCheckedIn\n       - RegistrationFee\n       - PaidSum\n       - IsPaid\n       - ShowToPublic\n       - RegistrationDate\n       - IsGuestRegistration\n   \n     properties:\n       Id:\n         type: integer\n         description: Unique identifier of event registration\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Event:\n         $ref: '#/components/schemas/EventStub'\n       Contact:\n         $ref: '#/components/schemas/LinkedResourceWithName'\n       RegistrationType:\n         $ref: '#/components/schemas/LinkedResourceWithName'\n       RegistrationTypeId:\n         type: integer\n         description: Unique identifier of event registration type\n       GuestRegistrationsSummary:\n         $ref: '#/components/schemas/GuestRegistrationsSummary'\n       DisplayName:\n         type: string\n         description: Contact display name.\n       Organization:\n         type: string\n         description: Contact display name.\n       IsCheckedIn:\n         type: boolean\n         default: false\n         description: Indicates if registrant is already checked in for event.\n       RegistrationFee:\n         type: number\n         format: decimal\n         description: The fee for this registration including all extra charges and taxes.\n       PaidSum:\n         type: number\n         format: decimal\n         description: The sum that the registrant has already paid for the registration.\n       IsPaid:\n         type: boolean\n         default: false\n         description: Indicates if the registrant has already paid for the registration.\n       RegistrationFields:\n         type: array\n         description: A collection of registration fields values\n         items:\n           $ref: '#/components/schemas/FieldValue'\n       ShowToPublic:\n         type: boolean\n         default: false\n         description: Indicates whether this registration can be shown to other event registrants.\n       RegistrationDate:\n         type: string\n         format: datetime\n         description: Date and time when registration was created. (Account local time)\n       Memo:\n         type: string\n         description: Some additional notes about this registration.\n       IsGuestRegistration:\n         type: boolean\n         default: false\n         description: Boolean. True if this is a guest registration, otherwise false.\n       OnWaitlist:\n         type: boolean\n         default: false\n         description: Indicates if event registration is in waitlist.\n       RecreateInvoice:\n         type: boolean\n         default: false\n         description: Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.\n       ParentRegistration:\n         $ref: '#/components/schemas/LinkedResource'\n       Status:\n           $ref: '#/components/schemas/EventRegistrationStatus'\n   \n   EventRegistrationPost:\n     type: object\n     required:\n       - Event\n       - Contact\n       - RegistrationTypeId\n     properties:\n       Id:\n         type: integer\n         description: Unique identifier of event registration\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Event:\n         type: object\n         required:\n           - Id\n         properties:\n           Id:\n             type: integer\n       Contact:\n         type: object\n         required:\n           - Id\n         properties:\n           Id:\n             type: integer\n       RegistrationTypeId:\n         type: integer\n         description: Unique identifier of event registration type\n       GuestRegistrationsSummary:\n         $ref: '#/components/schemas/GuestRegistrationsSummary'\n       IsCheckedIn:\n         type: boolean\n         default: false\n         description: Indicates if registrant is already checked in on event.\n       RegistrationFields:\n         type: array\n         description: A collection of registration fields values\n         items:\n           $ref: '#/components/schemas/FieldValue'\n       ShowToPublic:\n         type: boolean\n         default: false\n         description: Indicates whether this registration can be shown to other event registrants.\n       OnWaitlist:\n         type: boolean\n         default: false\n         description: Indicates to create a wait lst entry instead of registration.\n       RegistrationDate:\n         type: string\n         format: datetime\n         description: Date and time when registration was created. (Account local time)\n       Memo:\n         type: string\n         description: Some additional notes about this registration.\n       RecreateInvoice:\n         type: boolean\n         default: false\n         description: Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.\n   \n   EventRegistrationPut:\n     type: object\n     required:\n       - Id\n     properties:\n       Id:\n         type: integer\n         description: Unique identifier of event registration\n       RegistrationTypeId:\n         type: integer\n         description: Unique identifier of event registration type\n       IsCheckedIn:\n         type: boolean\n         description: Indicates if registrant is already checked in on event.\n       RegistrationFields:\n         type: array\n         description: A collection of registration fields values\n         items:\n           $ref: '#/components/schemas/FieldValue'\n       ShowToPublic:\n         type: boolean\n         description: Indicates whether this registration can be shown to other event registrants.\n       Memo:\n         type: string\n         description: Some additional notes about this registration.\n       GuestRegistrationsSummary:\n         $ref: '#/components/schemas/GuestRegistrationsSummary'\n       RecreateInvoice:\n         type: boolean\n         description: Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.\n\n   EventRegistrationsResponse:\n     type: array\n     items:\n       $ref: '#/components/schemas/EventRegistration'\n     description: List of event registrations that matches request criteria.\n\n   EventRegistrationStatus:\n     type: string\n     description: |\n       Describes event registration status\n     enum:\n       - Undefined\n       - Paid\n       - Unpaid\n       - PartiallyPaid\n       - Canceled\n       - Free\n       - NoInvoice\n       - OnWaitlist\n\n   EventStub:\n     properties:\n       Id:\n         type: integer\n         description: Event identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n         description: Event Url to get event details from API.\n       Name:\n         type: string\n         description: Event title.\n       StartDate:\n         type: string\n         format: datetime\n         description: Date and time when the event is scheduled to start.\n       EndDate:\n         type: string\n         format: datetime\n         description: Date and time when the event is scheduled to end. Could be empty.\n       Location:\n         type: string\n         description: Location where the event will take place.\n\n   GuestRegistrationsSummary:\n     properties:\n       NumberOfGuests:\n         type: integer\n         description: Number of guests registered along with the registrant. If event registration type requires guests registration with details (contact information, etc.), this value is 0.\n       NumberOfGuestsCheckedIn:\n         type: integer\n         description: Number of guests who already checked in. If event registration type requires guests registration with details (contact information, etc.), this value is null.\n       GuestRegistrations:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: >\n           List of guest registrations links. If event registration type expects guest registration by number (without contact information), this value is null.\n           This value cannot be saved or updated using API.\n\n   EventEditParams:\n     type: object\n     required:\n       - Name\n       - EventType\n       - StartDate\n     properties:\n       Id:\n         type: integer\n         description: >-\n           Unique identifier of event.\n           This field should be provided only when updating existing event.\n       Name:\n         type: string\n         description: Event title\n       EventType:\n         type: string\n         enum:\n           - Reqular\n           - RSVP\n         description: Indicates if event is simple (RSVP) or regular.\n       StartDate:\n         type: string\n         format: datetime\n         description: Date and time when the event is scheduled to start. If no time offset is specified, counts as UTC and will be converted into event timezone.\n       StartTimeSpecified:\n         type: boolean\n         description: >-\n           Indicates if event start time is specified. False means that StartDate contains only date component.\n       EndDate:\n         type: string\n         format: datetime\n         description: Date and time when the event is scheduled to end. Could be empty. If no time offset is specified, counts as UTC and will be converted into event timezone.\n       EndTimeSpecified:\n         type: boolean\n         description: >-\n           Indicates if event end time is specified. False means that EndDate contains only date component.\n       Location:\n         type: string\n         description: Location where the event will take place.\n       RegistrationEnabled:\n         type: boolean\n         description: Indicates that registration to this event is enabled\n       Tags:\n         type: array\n         items:\n           type: string\n         description: A collection of tags associated with the event.\n       Details:\n         $ref: '#/components/schemas/EventDetailsEditParams'\n       Sessions:\n         type: array\n         items:\n           $ref: '#/components/schemas/EventSesssion'\n         description: Collection of event sessions. Exist in multisessions events only.\n       RegistrationsLimit:\n         type: integer\n         description: Maximum number of registrations for this event.\n   \n   EventDetailsEditParams:\n     type: object\n     properties:\n       DescriptionHtml:\n         type: string\n         description: Full event description in HTML format.\n       PaymentInstructions:\n         type: string\n         description: >-\n           A description how attendee can pay for attendance in this event. Payment instructions for this event only.\n       TimeZone:\n         $ref: '#/components/schemas/TimeZone'\n       AccessControl:\n         $ref: '#/components/schemas/EventAccessControl'\n       GuestRegistrationSettings:\n         $ref: '#/components/schemas/EventGuestRegistrationSettings'\n       Organizer:\n         properties:\n           Id:\n             type: integer\n         description: Link to contact, who is set as organizer for this event.\n       PaymentMethod:\n         $ref: '#/components/schemas/EventPaymentMethodType'\n       RegistrationConfirmationExtraInfo:\n         type: string\n         description: Additional event information to be inserted in registration confirmation email\n       RegistrationMessage:\n         type: string\n         description: This text will be shown above Register button on Event details\n       SendEmailCopy:\n         type: boolean\n         description: Indicates if email copy should be sent according to email routing setting.\n       IsWaitlistEnabled:\n         type: boolean\n         description: Indicates if waitlist feature is enabled to the event.\n       WaitlistSettings:\n         $ref: '#/components/schemas/EventWaitlistSettings'\n       MultipleRegistrationAllowed:\n         type: boolean\n         description: Indicates if it is allowed to have multiple registrations for the same contact.\n       AttendeesDisplaySettings:\n         $ref: '#/components/schemas/EventAttendeesDisplaySettings'\n\n   CheckInParams:\n     type: object\n     required:\n       - RegistrationId\n       - CheckedIn\n     properties:\n       RegistrationId:\n         type: integer\n         description: Event registration Id.\n       CheckedIn:\n         type: boolean\n         description: Check in (true) or check out (false).\n       CheckedInGuests:\n         type: integer\n         description: For event registrations with anonymous guests (guests as number), sets number of checked-in guests.\n\n   Event:\n     type: object\n     required:\n       - Id\n       - Url\n       - Name\n       - EventType\n       - StartDate\n     properties:\n       Id:\n         type: integer\n         description: Unique event identifier\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Name:\n         type: string\n         description: Event title\n       EventType:\n         type: string\n         enum:\n           - Reqular\n           - RSVP\n         description: Indicates if event is simple (RSVP) or regular.\n       StartDate:\n         type: string\n         format: datetime\n         description: Date and time when the event is scheduled to start.\n       StartTimeSpecified:\n         type: boolean\n         description: >-\n           Indicates if event start time is specified. False means that StartDate contains only date component.\n       EndDate:\n         type: string\n         format: datetime\n         description: Date and time when the event is scheduled to end. Could be empty.\n       EndTimeSpecified:\n         type: boolean\n         description: >-\n           Indicates if event end time is specified. False means that EndDate contains only date component.\n       Location:\n         type: string\n         description: Location where the event will take place.\n       RegistrationEnabled:\n         type: boolean\n         description: Indicates whether registration to this event is enabled\n       HasEnabledRegistrationTypes:\n         type: boolean\n         description: Indicates that at least one registration type is enabled for this event.\n       AccessLevel:\n         $ref: '#/components/schemas/EventAccessLevel'\n       Tags:\n         type: array\n         items:\n           type: string\n         description: A collection of tags associated with the event.\n       Details:\n         $ref: '#/components/schemas/EventDetails'\n       Sessions:\n         type: array\n         items:\n           $ref: '#/components/schemas/EventSesssion'\n         description: Collection of event sessions. Exist in multisessions events only.\n       RegistrationsLimit:\n         type: integer\n         description: Maximum number of registrations for this event.\n       InviteeStat:\n         $ref: '#/components/schemas/EventInviteeStatistics'\n       PendingRegistrationsCount:\n         type: integer\n         description: Number of participants already registered for this event but not confirmed yet.\n       ConfirmedRegistrationsCount:\n         type: integer\n         description: Number of participants already registered for this event and already confirmed.\n       CheckedInAttendeesNumber:\n         type: integer\n         description: Number of attendees already checked in on this event.\n\n   EventAccessControl:\n     type: object\n     description: Describes event availability.\n     required:\n       - AccessLevel\n     properties:\n       AccessLevel:\n         $ref: '#/components/schemas/EventAccessLevel'\n       AvailableForAnyLevel:\n         type: boolean\n         description: If AccessLevel is Restricted, then indicates if the event is available to any member on any level.\n       AvailableForLevels:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: >-\n           Event is available to members who are on these levels.\n   \n           This field appears only if AccessLevel is Restricted and AvailableForAnyLevel is false.\n       AvailableForAnyGroup:\n         type: boolean\n         description: >-\n           If AccessLevel is Restricted, then indicates if the event is available to any member in any membership group.\n       AvailableForGroups:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: >-\n           Event is available to members who are any of these groups.\n   \n           This field appears only if AccessLevel is Restricted and AvailableForAnyGroup is false.\n\n   EventAccessLevel:\n     type: string\n     enum:\n       - Public\n       - AdminOnly\n       - Restricted\n     description: >-\n   \n       Event accessability.\n         - Public means event accessible for everyone\n         - AdminOnly means event accessible for administrators only\n         - Restricted means event accessible for specific membership levels or groups.\n\n   EventAttendeesDisplaySettings:\n     type: object\n     description: Settings for section \"List of event registrants\" on UI.\n     properties:\n       VisibleTo:\n         allOf:\n           - $ref: '#/components/schemas/ContactFieldAccessLevel'\n           - description: Indicates who is allowed to see list of event registrants.\n       ShowPendingAttendees:\n         type: boolean\n         description: Indicates if pending registrants should be included in the list of registrants.\n\n   EventDetails:\n     type: object\n     properties:\n       DescriptionHtml:\n         type: string\n         description: Full event description in HTML format. Important - Links to images can be relative.\n       PaymentInstructions:\n         type: string\n         description: >-\n           A description how registrant can pay for attendance to this event. Payment instructions for this event only.\n       TimeZone:\n         $ref: '#/components/schemas/TimeZone'\n       RegistrationTypes:\n         type: array\n         items:\n           $ref: '#/components/schemas/EventRegistrationType'\n         description: Collection of configured registration types for the event.\n       EventRegistrationFields:\n         type: array\n         items:\n           $ref: '#/components/schemas/EventRegistrationFieldDescription'\n         description: Collection of fields registrant should fill during registration process.\n       TotalPaid:\n         type: number\n         description: >-\n           Total sum paid for all registrations to this event. This is a read-only property.\n       TotalDue:\n         type: number\n         description: >-\n           Total sum due, but not necessarily paid yet for all registrations related to this event.\n           This is a read-only property.\n       AccessControl:\n         $ref: '#/components/schemas/EventAccessControl'\n       GuestRegistrationSettings:\n         $ref: '#/components/schemas/EventGuestRegistrationSettings'\n       Organizer:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact who is designated as organizer for this event.\n       PaymentMethod:\n         $ref: '#/components/schemas/EventPaymentMethodType'\n       RegistrationConfirmationExtraInfo:\n         type: string\n         description: Additional event information to be inserted in registration confirmation email\n       RegistrationMessage:\n         type: string\n         description: This text will be shown above Register button on Event details\n       SendEmailCopy:\n         type: boolean\n         description: Indicates if email copy should be sent according to email routing settings.\n       IsWaitlistEnabled:\n         type: boolean\n         description: Indicates if waitlist feature is enabled for the event.\n       WaitlistSettings:\n         $ref: '#/components/schemas/EventWaitlistSettings'\n       MultipleRegistrationAllowed:\n         type: boolean\n         description: Indicates if multiple registrations are allowed for the same contact.\n       AttendeesDisplaySettings:\n         $ref: '#/components/schemas/EventAttendeesDisplaySettings'\n\n   EventGuestRegistrationPolicy:\n     type: string\n     enum:\n       - Disabled\n       - NumberOfGuests\n       - CollectContactDetails\n       - CollectFullInfo\n     description:\n       Describes how guests are registered. Allowed values are\n   \n         - Disabled - guest registration is not allowed\n         - NumberOfGuests - number of guests should be specified.\n         - CollectContactDetails - contact information should be collected for each guest.\n         - CollectFullInfo - full registration info should be collected for each guest.\n\n   EventGuestRegistrationSettings:\n     type: object\n     description: Control how system works with guest registrations for specific event.\n     properties:\n       Enabled:\n         type: boolean\n         description: Indicates if guest registrations are allowed.\n       CreateContactMode:\n         type: string\n         enum:\n           - NeverCreateContact\n           - CreateContactForAllGuests\n           - CreateContactForGuestsWithEmail\n         description: Indicates whether guests are automatically added to database after the main registrant confirms the registration\n\n   EventInviteeStatistics:\n     type: object\n     description: Statistics related to invitees to RSVP events.\n     properties:\n       NotResponded:\n         type: integer\n         description: Number of invitees who did not respond yet.\n       NotAttended:\n         type: integer\n         description: Number of invitees who answered NO to the invite.\n       Attended:\n         type: integer\n         description: Number of invitees who answered YES to the invite.\n       MaybeAttended:\n         type: integer\n         description: Number of invitees who answered MAY BE to the invite.\n\n   EventPaymentMethodType:\n     type: string\n     enum:\n       - Undefined\n       - OnlineAndOffline\n       - OfflineOnly\n       - OnlineOnly\n     description: >-\n       How attendees can pay for the ticket.\n   \n         - OnlineAndOffline\n         - OfflineOnly\n         - OnlineOnly\n\n   EventRegistrationCancellationBehavior:\n     type: string\n     enum:\n       - DoNotAllow\n       - AllowUpToPeriodBeforeEvent\n       - Allow\n     description: >-\n       Indicates if it is possible for attendee to self-cancel event registration.\n\n   EventRegistrationFieldDescription:\n     allOf:\n       - $ref: '#/components/schemas/EntityFieldDescriptionWithExtraCharge'\n       - properties:\n           Kind:\n             type: string\n             enum:\n               - Common\n               - Custom\n             description: >-\n               Indicated is the field is common for all contacts or custom for the event.\n\n   EventRegistrationType:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique event registration type identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       IsEnabled:\n         type: boolean\n         description: Indicates whether this registration type is enabled\n       EventId:\n         type: integer\n         description: Identifier of event related to the registration type.\n       Name:\n         type: string\n         description: Registraton type title.\n       Description:\n         type: string\n         description: Plain text description for the event registration type.\n       BasePrice:\n         type: number\n         description: Base price registrant pays for this registration type.\n       GuestPrice:\n         type: number\n         description: Price for each additional guest.\n       UseTaxScopeSettings:\n         type: boolean\n         description: Indicates whether account tax scope settings should be used to calculate final price.\n       Availability:\n         $ref: '#/components/schemas/EventRegistrationTypeAvailability'\n       RegistrationCode:\n         type: string\n         description: >-\n           Registration code required to apply for event with this registration type.\n           This property has value only if Availability is CodeRequired.\n       AvailableForMembershipLevels:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: >-\n           Which membership levels can apply for event. This property has value only if Availability is MembersOnly.\n       AvailableFrom:\n         type: string\n         format: datetime\n         description: This registration type is available starting from this date. Can be null.\n       AvailableThrough:\n         type: string\n         format: datetime\n         description: This registration type is available until this date. Can be null.\n       MaximumRegistrantsCount:\n         type: integer\n         description: Maximum number of registrants for this registration type.\n       CurrentRegistrantsCount:\n         type: integer\n         description: Current number of registrants for this registration type.\n       GuestRegistrationPolicy:\n         $ref: '#/components/schemas/EventGuestRegistrationPolicy'\n       UnavailabilityPolicy:\n         $ref: '#/components/schemas/EventRegistrationUnavailabilityPolicy'\n       CancellationBehaviour:\n         $ref: '#/components/schemas/EventRegistrationCancellationBehavior'\n       CancellationDaysBeforeEvent:\n         type: integer\n         description: >-\n           In case if CancellationBehaviour = AllowUpToPeriodBeforeEvent,\n           this field indicates the minimum number of days before the event that cancellations are allowed.\n       IsWaitlistEnabled:\n         type: boolean\n         description: >-\n           Indicated if registrant should be added to waitlist if registrations have reached their limit.\n\n   EventRegistrationTypeAvailability:\n     type: string\n     enum:\n       - Everyone\n       - MembersOnly\n       - CodeRequired\n     description: Indicates who the registration type is available to.\n\n   EventRegistrationTypeEditParams:\n     type: object\n     required:\n       - EventId\n     properties:\n       Id:\n         type: integer\n         description: >-\n           Unique event identifier.\n           This field should be provided only when updating existing event registration type\n       EventId:\n         type: integer\n         description: Identifier of event related to the registration type.\n       Name:\n         type: string\n         description: >\n           Registraton type title.\n           This field should be provided only when creating new registration type\n       IsEnabled:\n         type: boolean\n         description: Indicates whether this registration type is enabled\n       Description:\n         type: string\n         description: Plain text description for the event registration type.\n       BasePrice:\n         type: number\n         description: Base price registrant pays with this registration type.\n       GuestPrice:\n         type: number\n         description: Price for each additional guest.\n       UseTaxScopeSettings:\n         type: boolean\n         default: false\n         description: >\n           Indicates whether account tax scope settings should be used to calculate final price.\n           ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to default value\n       Availability:\n         $ref: '#/components/schemas/EventRegistrationTypeAvailability'\n       RegistrationCode:\n         type: string\n         description: >-\n           Registration code required to apply for event with this registration type.\n           This property has value only if Availability is CodeRequired.\n       AvailableForMembershipLevels:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: >-\n           Which membership levels can apply for event. This property has value only if Availability is MembersOnly.\n       AvailableFrom:\n         type: string\n         format: datetime\n         description: >\n           This registration type is available starting from this date. Can be null.\n           ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null\n       AvailableThrough:\n         type: string\n         format: datetime\n         description: >\n           This registration type is available until this date. Can be null.\n           ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null\n       MaximumRegistrantsCount:\n         type: integer\n         description: Maximum number of registrants for this registration type.\n       GuestRegistrationPolicy:\n         $ref: '#/components/schemas/EventGuestRegistrationPolicy'\n       UnavailabilityPolicy:\n         $ref: '#/components/schemas/EventRegistrationUnavailabilityPolicy'\n       CancellationBehaviour:\n         $ref: '#/components/schemas/EventRegistrationCancellationBehavior'\n       CancellationDaysBeforeEvent:\n         type: integer\n         description: >-\n           If CancellationBehaviour = AllowUpToPeriodBeforeEvent,\n           this field contains minimum number of days before the event that cancellations are allowed\n       IsWaitlistEnabled:\n         type: boolean\n         description: >-\n           Indicated whether registrant should be placed on waitlist if registrations have reached their limit.\n\n   EventRegistrationTypeResponse:\n     type: array\n     items:\n       $ref: '#/components/schemas/EventRegistrationType'\n     description: List of event registration types that match the request criteria.\n\n   EventRegistrationUnavailabilityPolicy:\n     type: string\n     enum:\n       - ShowDisabled\n       - Hide\n     description: Indicates what is displayed if the registration type is not available for a particular visitor. \n\n   EventSesssion:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique event session identifier.\n       Title:\n         type: string\n         description: Automatically generated session title.\n       StartDate:\n         type: string\n         format: datetime\n         description: Date and time when the event session is scheduled to start.\n       StartTimeSpecified:\n         type: boolean\n         description: >-\n           Indicates if session start time is specified. False means that StartDate contains only date component.\n       EndDate:\n         type: string\n         format: datetime\n         description: Date and time when the event session is scheduled to end. Could be empty.\n       EndTimeSpecified:\n         type: boolean\n         description: >-\n           Indicates if session end time is specified. False means that EndDate contains only date component.\n\n   EventsCountResponse:\n     type: object\n     properties:\n       Count:\n         type: integer\n         description: >-\n           Number of events that match request criteria.\n           This field appears only if $count parameter was passed in request.\n   EventsListResponse:\n     type: object\n     properties:\n       Events:\n         type: array\n         items:\n           $ref: '#/components/schemas/Event'\n         description: List of events that match request criteria.\n   EventIdsResponse:\n     type: object\n     properties:\n       EventsIdentifiers:\n         type: array\n         items:\n           type: integer\n         description: >-\n           List of event identifiers that match request criteria.\n           The field appears only if idsOnly parameter was passed in request.\n   \n   EventsResponse:\n     allOf:\n       - $ref: '#/components/schemas/EventIdsResponse'\n       - $ref: '#/components/schemas/EventsListResponse'\n       - $ref: '#/components/schemas/EventsCountResponse'\n\n   EventWaitlistSettings:\n     type: object\n     properties:\n       WaitlistType:\n         type: string\n         enum:\n           - None\n           - Manual\n           - Auto\n         description: >-\n           Indicates how the waitlist works for the event.\n   \n            - None - waitlist is not enabled\n            - Manual - people can be added to a waitlist and then automatically registered in the order they were added, as sufficient spaces open up\n            - Auto - people can be added to a waitlist and then manually registered by an administrator or by themselves once spaces become available\n       InformationToCollect:\n         type: string\n         enum:\n           - None\n           - NameAndEmail\n           - ContactInformation\n           - RegistrationInformation\n         description: Indicates what information should be collected for people being added to the waitlist.\n\n   RegisterFromWaitlistParams:\n     type: object\n     required:\n       - WaitlistRegistrationId\n       - EventId\n       - GenerateInvoice\n     properties:\n       WaitlistRegistrationId:\n         type: integer\n         description: Event registration Id.\n       EventId:\n         type: integer\n         description: Event Id.\n       GenerateInvoice:\n         type: boolean\n         default: true\n         description: Defines if invoice should be generated in case if registration is considered paid (registration fee > 0 or any extra costs selected)\n\n   AllocateInvoiceParams:\n     type: object\n     properties:\n       InvoiceId:\n         type: integer\n         description: Unique invoice identifier.\n       Amount:\n         type: number\n         description: Allocating amount.\n\n   AuditItemsListResult:\n     type: object\n     properties:\n       Items:\n         type: array\n         items:\n           $ref: '#/components/schemas/AuditLogItem'\n         description: List of audit log items that match request criteria.\n\n   AuditLogItem:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n   \n       Timestamp:\n         type: string\n         format: date\n         description: Item creation date.\n       Contact:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to related contact.\n       FirstName:\n         type: string\n         description: Contact first name\n       LastName:\n         type: string\n         description: Contact last name\n       Organization:\n         type: string\n         description: Contact organization\n       Email:\n         type: string\n         description: Contact primary email.\n       Message:\n         type: string\n         description: Log item text.\n       Severity:\n         type: string\n         description: Log item severity level.\n         enum:\n           - Verbose\n           - Information\n           - AttentionRequired\n           - Warning\n           - Error\n           - Critical\n       OrderType:\n         type: string\n         description: The origin of the audit log entry.\n         enum:\n           - MembershipApplication\n           - MembershipRenewal\n           - MembershipLevelChange\n           - EventRegistration\n           - Donation\n           - ChangeBillingPlan\n           - ChangeBillingInfo\n           - LockInPlan\n           - AssociationRenewal\n       Properties:\n         type: object\n         description: Collection of audit log item properties that contains all technical information about transaction and other linked documents.\n   \n       Document:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to related document.\n   \n       DocumentType:\n         type: string\n         description: Related document type.\n         enum:\n           - Invoice\n           - Payment\n           - CreditMemo\n           - Refund\n           - Adjustment\n           - DonationPayment\n           - InvoicePayment\n   \n       DocumentAction:\n         type: string\n         description: Action performed on related document type.\n         enum:\n           - Created\n           - Changed\n           - Deleted\n           - Voided\n           - Custom\n\n   CreateFinanceDocument:\n     type: object\n     properties:\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Value:\n         type: number\n         format: float\n   \n       DocumentDate:\n         type: string\n         format: date\n         description: Document date.\n   \n       Contact:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact assigned to the financial document.\n   \n       CreatedDate:\n         type: string\n         format: date\n         description: Date and time when the document was created.\n   \n       CreatedBy:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact who created the document. Could be null.\n\n   CreateInvoiceParams:\n     allOf:\n       - $ref: '#/components/schemas/EditInvoiceParams'\n\n   CreatePaymentModel:\n     type: object\n     properties:\n       Value:\n         type: number\n         format: float\n         description: Payment amount.\n       DocumentDate:\n         type: string\n         format: date\n         description: Document date.\n     \n       Invoices:\n         type: array\n         items:\n           $ref: '#/components/schemas/LinkedResource'\n         description: If not null or empty then invoices with these IDs will be settled to new payment.\n       Contact:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact who made the payment.\n       Tender:\n         $ref: '#/components/schemas/LinkedResource'\n       Comment:\n         type: string\n         description: Internal note on payment. Visible to administrators only.\n       PublicComment:\n         type: string\n         description: Comment to payor. Visible to both administrators and payor.\n       PaymentType:\n         $ref: '#/components/schemas/PaymentType'\n\n   CreateRefundParams:\n     allOf:\n       - $ref: '#/components/schemas/CreateFinanceDocument'\n       - type: object\n         properties:\n           Tender:\n             $ref: '#/components/schemas/LinkedResourceWithName'\n           Comment:\n             type: string\n             description: Internal note on refund. Visible to administrators only.\n           PublicComment:\n             type: string\n             description: Comment on refund. Visible to both administrators and the person being refunded.\n           SettledValue:\n             type: number\n             format: float\n             description: The previously settled amount of the payment.\n\n   DocumentParam:\n     type: object\n     properties:\n       DocumentId:\n         type: integer\n         description: Unique finance document identifier.\n\n   \n   Donation:\n     type: object\n     properties:\n       Contact:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact who is assigned to the donation.\n       Payment:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to payment assigned to the donation.\n       DonationDate:\n         type: string\n         format: date\n         description: Donation date.\t  \n       FirstName:\n         type: string\n         description: First name of the donor.\n       LastName:\n         type: string\n         description: Last name of the donor.\n       Email:\n         type: string\n         description: Email of the donor.\n       Organization:\n         type: string\n         description: Organization of the donor.\n       Phone:\n         type: string\n         description: Phone of the donor.\n       Comment:\n         type: string\n         description: Internal note on donation. Visible to administrators only.\n       PublicComment:\n         type: string\n         description: Comment on donation. Visible to both administrators and donors.\n       Value:\n         type: number\n         format: float\n         description: Donation amount.\n       Type:\n         $ref: '#/components/schemas/DonationType'\n       FieldValues:\n         type: array\n         description: For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this donation are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. \n         items:\n           $ref: '#/components/schemas/FieldValue'\n\n   DonationListResponse:\n     type: object\n     properties:\n       Payments:\n         type: array\n         items:\n           $ref: '#/components/schemas/Donation'\n         description: List of donations that match request criteria.\n\n   DonationType:\n     type: string\n     enum:\n       - Online\n       - Manual\n     description: Donation type.\n\n   EditInvoiceParams:\n     type: object\n     properties:\n       Value:\n         type: number\n         format: float\n       DocumentDate:\n         type: string\n         format: date\n         description: Document date.\n       Contact:\n         type: object\n         properties:\n           Id:\n             type: integer\n             description: ID of contact to whom the invoice is assigned.\n       CreatedBy:\n         type: object\n         properties:\n           Id:\n             type: integer\n             description: ID of contact who created the document. Could be null.\n       UpdatedDate:\n         type: string\n         format: date\n         description: Date and time when the document was last modified.  Could be null.\n       UpdatedBy:\n         type: object\n         properties:\n           Id:\n             type: integer\n             description: ID of contact who modified the document. Could be null.\n       DocumentNumber:\n         type: string\n         description: Invoice number.\n       OrderType:\n         $ref: '#/components/schemas/InvoiceOrderType'\n       OrderDetails:\n         type: array\n         items:\n           $ref: '#/components/schemas/OrderDetailRecord'\n       Memo:\n         type: string\n         description: Internal note on invoice. Visible to administrators only.\n       PublicMemo:\n         type: string\n         description: Comment on invoice. Visible to both administrators and the person being invoicec.\n\n   FinanceDocument:\n     type: object\n     properties:\n       Id:\n         type: integer\n         description: Unique document identifier.\n       Url:\n         $ref: '#/components/schemas/ResourceUrl'\n       Value:\n         type: number\n         format: float\n   \n       DocumentDate:\n         type: string\n         format: date\n         description: Document date.\n   \n       Contact:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResourceWithName'\n           - description: Link to contact who is assigned to the financial document.\n   \n       CreatedDate:\n         type: string\n         format: date\n         description: Date and time when the document was created.\n   \n       CreatedBy:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact who created the document. Could be null.\n       UpdatedDate:\n         type: string\n         format: date\n         description: Date and time when the document was last modified.  Could be null.\n   \n       UpdatedBy:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to contact who modified the document. Could be null.\n\n   Invoice:\n     allOf:\n       - $ref: '#/components/schemas/FinanceDocument'\n       - type: object\n         properties:\n           DocumentNumber:\n             type: string\n             description: Invoice number.\n           IsPaid:\n             type: boolean\n             description: Indicates if the invoice is fully paid.\n           PaidAmount:\n             type: number\n             description: Sum already paid for this invoice.\n           OrderType:\n             $ref: '#/components/schemas/InvoiceOrderType'\n           EventRegistration:\n             allOf:\n               - $ref: '#/components/schemas/LinkedResource'\n               - description: Link to related event registration or null.\n           OrderDetails:\n             type: array\n             items:\n               $ref: '#/components/schemas/OrderDetailRecord'\n           Memo:\n             type: string\n             description: Internal note on invoice. Visible to administrators only.\n           PublicMemo:\n             type: string\n             description: Comment on invoice. Visible to both administrators and the person being invoiced.\n           VoidedDate:\n             type: string\n             format: date\n             description: When invoice is voided this field indicates date of void. Voided invoice does not affect balance. For regular invoices this field is null.\n\n   InvoiceIdsResponse:\n     type: object\n     properties:\n       InvoiceIdentifiers:\n         type: array\n         items:\n           type: integer\n         description: List of invoices identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.\n\n   InvoiceListResponse:\n     type: object\n     properties:\n       Invoices:\n         type: array\n         items:\n           $ref: '#/components/schemas/Invoice'\n         description: List of invoices that match request criteria.\n\n   InvoiceOrderType:\n     type: string\n     description: Type of invoice.\n     enum:\n       - Undefined\n       - MembershipApplication\n       - MembershipRenewal\n       - MembershipLevelChange\n       - EventRegistration\n       - Donation\n       - OnlineStore\n\n   InvoicesResponse:\n     allOf:\n       - $ref: '#/components/schemas/InvoiceIdsResponse'\n       - $ref: '#/components/schemas/InvoiceListResponse'\n\n   OrderDetailRecord:\n     type: object\n     properties:\n       Value:\n         type: number\n         format: float\n         description: Sum to pay for this item. Can be negative (discounts).\n       OrderDetailType:\n         $ref: '#/components/schemas/OrderDetailType'\n       Notes:\n         type: string\n         description: Comment to order detail\n       Taxes:\n         $ref: '#/components/schemas/SalesTaxInfo'\n\n   OrderDetailType:\n     type: string\n     description: Type of invoice detail item.\n     enum:\n       - Unspecified\n       - EventRegistration\n       - GuestsNumber\n       - GuestCard\n       - ExtraCost\n       - MemberLevel\n       - Prorate\n       - Discount\n       - Donation\n       - OnlineStoreProduct\n       - OnlineStoreShipping\n\n   \n   Payment:\n     allOf:\n       - $ref: '#/components/schemas/FinanceDocument'\n       - type: object\n         properties:\n           Tender:\n             $ref: '#/components/schemas/LinkedResourceWithName'\n           Comment:\n             type: string\n             description: Internal note on payment. Visible to administrators only.\n           PublicComment:\n             type: string\n             description: Comment on payment. Visible to both administrators and payors.\n           AllocatedValue:\n             type: number\n             format: float\n             description: Total amount allocated to another finance documents (invoices or refunds).\n           RefundedAmount:  \n             type: number\n             format: decimal\n             description: Amount of a refund assigned to the payment.\n           Type:\n             $ref: '#/components/schemas/PaymentType'\n           DonationId:\n             type: integer\n             description: Identifyer of Donation for payment of type DonationPayment.\n           FieldValues:\n             type: array\n             description: For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this donation are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. \n             items:\n               $ref: '#/components/schemas/FieldValue'\n\n   PaymentAllocation:\n     type: object\n     description: Thhis object describes how payment is allocated among invoices.\n     properties:\n       Id:\n         type: integer\n         description: Unique identifier.\n       Value:\n         type: number\n         description: allocated amount.\n       Invoice:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to related invoice.\n       InvoiceDate:\n         type: string\n         format: date\n         description: Invoice date\n       InvoiceNumber:\n         type: string\n         description: Invoice number.\n       Payment:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to related payment.\n       PaymentDate:\n         type: string\n         format: date\n         description: Payment date\n       PaymentType:\n         $ref: '#/components/schemas/PaymentType'\n       Refund:\n         allOf:\n           - $ref: '#/components/schemas/LinkedResource'\n           - description: Link to related refund.\n       RefundDate:\n         type: string\n         format: date\n         description: Refund date\n   \n\n   PaymentIdsResponse:\n     type: object\n     properties:\n       PaymentIdentifiers:\n         type: array\n         items:\n           type: integer\n         description: List of payment identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.\n\n   PaymentListResponse:\n     type: object\n     properties:\n       Payments:\n         type: array\n         items:\n           $ref: '#/components/schemas/Payment'\n         description: List of payments that match request criteria.\n\n   PaymentsResponse:\n     allOf:\n       - $ref: '#/components/schemas/PaymentIdsResponse'\n       - $ref: '#/components/schemas/PaymentListResponse'\n\n   PaymentType:\n     type: string\n     enum:\n       - Unknown\n       - InvoicePayment\n       - DonationPayment\n     description: Payment type.\n\n   Refund:\n     allOf:\n       - $ref: '#/components/schemas/FinanceDocument'\n       - type: object\n         properties:\n           Tender:\n             $ref: '#/components/schemas/LinkedResourceWithName'\n           Comment:\n             type: string\n             description: Internal note on refund. Visible to administrators only.\n           PublicComment:\n             type: string\n             description: Comment on refund. Visible to both administrators and person being refunded.\n           SettledValue:\n             type: number\n             format: float\n             description: Total amount allocated to another finance documents (payments or donations).\n\n   RefundIdsResponse:\n     type: object\n     properties:\n       RefundIdentifiers:\n         type: array\n         items:\n           type: integer\n         description: List of refund identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.\n\n   RefundListResponse:\n     type: object\n     properties:\n       Refunds:\n         type: array\n         items:\n           $ref: '#/components/schemas/Refund'\n         description: List of refunds that match request criteria.\n\n   RefundParam:\n     type: object\n     properties:\n       RefundId:\n         type: integer\n         description: Unique refund identifier.\n\n   RefundsResponse:\n     allOf:\n       - $ref: '#/components/schemas/RefundIdsResponse'\n       - $ref: '#/components/schemas/RefundListResponse'\n\n   SalesTax:\n     description: Taxes applied to the invoice according to account Tax Rules settings.\n     type: object\n     properties:\n       Name:\n         type: string\n         description: Internal account tax name.\n       PublicId:\n         type: string\n         description: Public tax ID (displayed on invoices).\n       Rate:\n         type: number\n         description: Tax rate value.\n\n   SalesTaxInfo:\n     type: object\n     description: Describe taxes applied to this invoice item\n     properties:\n       Amount:\n         type: number\n         description: total gross amount including all taxes\n       CalculatedTax1:\n         type: number\n         description: tax 1 amount\n       CalculatedTax2:\n         type: number\n         description:  tax 2 amount\n       NetAmount:\n         type: number\n         description: net amount from invoice items\n       RoundedAmount:\n         type: number\n         description: rounded total amount including all taxes\n       Tax1:\n         allOf:\n           - $ref: '#/components/schemas/SalesTax'\n           - description: applied Tax 1 description\n       Tax2:\n         allOf:\n           - $ref: '#/components/schemas/SalesTax'\n           - description: applied Tax 2 description\n\n   Tender:\n     allOf:\n       -  $ref: '#/components/schemas/LinkedResourceWithName'\n       - type: object\n         properties:\n           DisplayPosition:\n             type: integer\n             description: Display position in UI.\n           IsCustom:\n             type: boolean\n             description: Indicates that this tender is created by account admin, otherwise the tender is built-in.\n\n   TendersResponse:\n       type: array\n       items:\n         $ref: '#/components/schemas/Tender'\n       description: Collection of tenders.\n\n   UpdateInvoiceParams:\n     allOf:\n       - $ref: '#/components/schemas/EditInvoiceParams'\n       - properties:\n           Id:\n             type: integer\n             description: Identifier of the invoice to update\n\n   \n   UpdatePaymentParams:\n     allOf:\n       - $ref: '#/components/schemas/FinanceDocument'\n       - type: object\n         properties:\n           Tender:\n             $ref: '#/components/schemas/LinkedResourceWithName'\n           Comment:\n             type: string\n             description: Internal note on payment. Visible to administrators only.\n           PublicComment:\n             type: string\n             description: Comment on payment. Visible to both administrators and payors.\n           AllocatedValue:\n             type: number\n             format: float\n             description: Total amount allocated to another finance documents (invoices or refunds).\n           Type:\n             $ref: '#/components/schemas/PaymentType'\n\n   UpdateRefundParams:\n     allOf:\n       - $ref: '#/components/schemas/FinanceDocument'\n       - type: object\n         properties:\n           Tender:\n             $ref: '#/components/schemas/LinkedResourceWithName'\n           Comment:\n             type: string\n             description: Internal note on refund. Visible to administrators only.\n           PublicComment:\n             type: string\n             description: Comment on refund. Visible to both administrators and person being refunded.\n           SettledValue:\n             type: number\n             format: float\n             description: The previously settled amount of the payment.\n\n   Order:\n     type: object\n     required:\n       - contactId\n       - total\n       - subTotal\n       - isTaxesApplied\n       - isTaxesIncludedTotal\n       - status\n       - paymentStatus\n     properties:\n       url:\n         type: string\n       contactId:\n         type: integer\n         format: int32\n       number:\n         type: string\n       total:\n         type: number\n         format: decimal\n       subTotal:\n         type: number\n         format: decimal\n       isTaxesApplied:\n         type: boolean\n       isTaxesIncludedTotal:\n         type: boolean\n       invoiceId:\n         type: integer\n         format: int32\n       invoiceNumber:\n         type: integer\n         format: int32\n       status:\n         $ref: '#/components/schemas/OrderStatus'\n       paymentStatus:\n         $ref: '#/components/schemas/PaymentStatus'\n       internalNote:\n         $ref: '#/components/schemas/OrderInternalNote'\n       products:\n         type: array\n         items:\n           $ref: '#/components/schemas/OrderProduct'\n       shippingAddress:\n         $ref: '#/components/schemas/ShippingAddress'\n       billingPerson:\n         $ref: '#/components/schemas/BillingPerson'\n       comment:\n         type: string\n       externalNote:\n         $ref: '#/components/schemas/OrderExternalNote'\n       currency:\n         $ref: '#/components/schemas/Currency'\n       created:\n         type: string\n         format: date-time\n       deliveryOption:\n         $ref: '#/components/schemas/OrderDeliveryOption'\n   OrderStatus:\n     type: string\n     description: ''\n     x-enumNames:\n       - Unfulfilled\n       - Fulfilled\n       - Cancelled\n     enum:\n       - UNFULFILLED\n       - FULFILLED\n       - CANCELLED\n   PaymentStatus:\n     type: string\n     description: ''\n     x-enumNames:\n       - Unpaid\n       - Paid\n       - PartiallyPaid\n       - NoInvoice\n       - Free\n     enum:\n       - UNPAID\n       - PAID\n       - PARTIALLYPAID\n       - NOINVOICE\n       - FREE\n   OrderInternalNote:\n     type: object\n     properties:\n       text:\n         type: string\n   OrderProduct:\n     type: object\n     required:\n       - price\n       - amount\n       - productId\n       - quantity\n       - productType\n     properties:\n       title:\n         type: string\n       price:\n         type: number\n         format: decimal\n       amount:\n         type: number\n         format: decimal\n       productId:\n         type: integer\n         format: int32\n       variantId:\n         type: integer\n         format: int32\n       quantity:\n         type: integer\n         format: int32\n       productType:\n         $ref: '#/components/schemas/OrderProductType'\n       digitalProduct:\n         $ref: '#/components/schemas/OrderDigitalProduct'\n   OrderProductType:\n     type: string\n     description: ''\n     x-enumNames:\n       - Physical\n       - Digital\n     enum:\n       - PHYSICAL\n       - DIGITAL\n   OrderDigitalProduct:\n     type: object\n     properties:\n       url:\n         type: string\n       code:\n         type: string\n       emailNote:\n         type: string\n   ShippingAddress:\n     type: object\n     properties:\n       addressLine1:\n         type: string\n       addressLine2:\n         type: string\n       country:\n         $ref: '#/components/schemas/Country'\n       province:\n         type: string\n       city:\n         type: string\n       zip:\n         type: string\n   Country:\n     type: object\n     required:\n       - allowedPaymentMethods\n     properties:\n       name:\n         type: string\n       codeAlpha2:\n         type: string\n       codeAlpha3:\n         type: string\n       codeNumeric:\n         type: integer\n         format: int32\n       allowedPaymentMethods:\n         type: integer\n         format: int32\n   BillingPerson:\n     type: object\n     required:\n       - contactId\n     properties:\n       contactId:\n         type: integer\n         format: int32\n       email:\n         type: string\n       firstName:\n         type: string\n       lastName:\n         type: string\n       displayName:\n         type: string\n       phone:\n         type: string\n   OrderExternalNote:\n     type: object\n     properties:\n       text:\n         type: string\n   OrderDeliveryOption:\n     type: object\n     required:\n       - type\n     properties:\n       type:\n         $ref: '#/components/schemas/DeliveryType'\n       title:\n         type: string\n       description:\n         type: string\n       price:\n         type: number\n         format: decimal\n   DeliveryType:\n     type: string\n     description: ''\n     x-enumNames:\n       - Shipping\n       - Pickup\n     enum:\n       - SHIPPING\n       - PICKUP\n   OrderSetStatusResult:\n     type: object\n     properties:\n       isCustomerNotified:\n         type: boolean\n   OrderFulfilment:\n     type: object\n     required:\n       - status\n     properties:\n       status:\n         $ref: '#/components/schemas/OrderStatus'\n   Product:\n     type: object\n     required:\n       - id\n       - status\n       - type\n       - trackInventory\n       - stock\n       - outOfStock\n       - totalStock\n     properties:\n       url:\n         type: string\n       id:\n         type: integer\n         format: int32\n       title:\n         type: string\n       description:\n         type: string\n       price:\n         $ref: '#/components/schemas/Price'\n       status:\n         $ref: '#/components/schemas/ProductStatus'\n       type:\n         $ref: '#/components/schemas/ProductType'\n       pictures:\n         type: array\n         items:\n           type: string\n       tags:\n         type: array\n         items:\n           type: string\n       trackInventory:\n         type: boolean\n       stock:\n         type: integer\n         format: int32\n       productOptions:\n         type: array\n         items:\n           $ref: '#/components/schemas/ProductOption'\n       productVariants:\n         type: array\n         items:\n           $ref: '#/components/schemas/ProductVariant'\n       outOfStock:\n         type: boolean\n       totalStock:\n         type: integer\n         format: int32\n       digitalProduct:\n         $ref: '#/components/schemas/DigitalProduct'\n       created:\n         type: string\n         format: date-time\n   Price:\n     type: object\n     required:\n       - regular\n     properties:\n       regular:\n         type: number\n         format: decimal\n       members:\n         type: number\n         format: decimal\n   ProductStatus:\n     type: string\n     description: ''\n     x-enumNames:\n       - AdminOnly\n       - Public\n     enum:\n       - ADMINONLY\n       - PUBLIC\n   ProductType:\n     type: string\n     description: ''\n     x-enumNames:\n       - Physical\n       - Digital\n     enum:\n       - PHYSICAL\n       - DIGITAL\n   ProductOption:\n     type: object\n     properties:\n       title:\n         type: string\n       values:\n         type: array\n         items:\n           type: string\n   ProductVariant:\n     type: object\n     required:\n       - id\n       - stock\n       - outOfStock\n       - trackInventory\n     properties:\n       id:\n         type: integer\n         format: int32\n       productVariantOptionValues:\n         type: array\n         items:\n           $ref: '#/components/schemas/ProductVariantOptionValue'\n       stock:\n         type: integer\n         format: int32\n       outOfStock:\n         type: boolean\n       trackInventory:\n         type: boolean\n   ProductVariantOptionValue:\n     type: object\n     properties:\n       title:\n         type: string\n       value:\n         type: string\n   DigitalProduct:\n     type: object\n     required:\n       - type\n     properties:\n       type:\n         $ref: '#/components/schemas/DigitalProductType'\n       productFile:\n         $ref: '#/components/schemas/ProductFile'\n       productLink:\n         $ref: '#/components/schemas/ProductLink'\n       emailNote:\n         type: string\n   DigitalProductType:\n     type: string\n     description: ''\n     x-enumNames:\n       - File\n       - Link\n     enum:\n       - FILE\n       - LINK\n   ProductFile:\n     type: object\n     properties:\n       name:\n         type: string\n   ProductLink:\n     type: object\n     properties:\n       url:\n         type: string\n       code:\n         type: string\n   PagingSettings:\n     type: object\n     properties:\n       skip:\n         type: integer\n         format: int32\n       top:\n         type: integer\n         format: int32\n  parameters:\n\n   accountId:\n     name: accountId\n     in: path\n     description: Your account identifier\n     required: true\n     schema:\n       type: number\n       format: integer\n\n   AllocateInvoiceParams:\n     name: AllocateInvoiceParams\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/AllocateInvoiceParams'\n     in: body\n     required: true\n\n   AttachmentDataParams:\n     name: model\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/AttachmentDataList'\n     in: body\n     required: true\n\n   CloneEvent:\n     name: CloneEvent\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/CloneEvent'\n     in: body\n     required: true\n\n   DocumentParam:\n     name: DocumentParam\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/DocumentParam'\n     in: body\n     required: true\n\n   emailDraftId:\n     name: emailDraftId\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/emailDraftId'\n     in: body\n     required: true\n\n   EmailRecipientsParams:\n     name: EmailRecipientsParams\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/EmailRecipientsParams'\n     in: body\n     required: true\n\n   pagingCount:\n     name: $count\n     in: query\n     description: |2\n   \n       Specifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.\n     schema:\n       type: boolean\n   \n\n   pagingSkip:\n     name: $skip\n     in: query\n     required: false\n     schema:\n       type: integer\n     description: >\n   \n       'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n   \n       - ...&$top=100 - will return records from 0 to 99\n       - ...?$skip=100&top=100' - will return records from 100 to 199\n       - ...?$skip=200' - will return records from 199 to the end\n\n   pagingTop:\n     name: $top\n     in: query\n     description: this parameter specifies the maximum number of entries to be returned. If omitted or set more than 100 then maximum 100 items returned.\n     required: false\n     schema:\n       type: integer\n\n   RefundParam:\n     name: RefundParam\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/RefundParam'\n     in: body\n     required: true\n\n   EmailScheduleParams:\n     name: EmailScheduleParams\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/EmailScheduleParams'\n     in: body\n     required: true\n\n   SendDraftParams:\n     name: SendDraft\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/EmailScheduleParams'\n     in: body\n     required: true\n\n   SendEmailParams:\n     name: sendEmailParams\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/SendEmailParams'\n     in: body\n     required: true\n\n   ThumbnailSize:\n     name: size\n     in: query\n     schema:\n       type: string\n       enum:\n       - Original \n       - Small\n       - Medium\n       - Medium1\n       - Large\n\n   TwoFactorAuthMethod:\n     name: method\n     in: query\n     description: Type of invoice.\n     schema:\n       type: string\n       enum:\n       - Email\n       - Sms\n  responses:\n\n   badRequest:\n     description: On invalid parameters. See error details in response body.\n     content:\n       '*/*':\n         schema:\n           $ref: '#/components/schemas/Error'\n\n   notFound:\n     description: Requested item not found.\n\n   termsOfUseRequired:\n     description: >-\n       Current user should accept terms of use before using API. It can be done\n       in web interface, or by making a POST request to\n       /rpc/{accountId}/acceptTermsOfUse\n\n   tooManyRequests:\n     description: Too many requests from same account. Wait for a minute and try again.\n\n   unauthorized:\n     description: >-\n       oAuth token was not provided, invalid or does not provide access to\n       requested URL.\n  securitySchemes:\n    OAuth2_autorizationCode:\n      type: oauth2\n      description: |2\n\n        Use this flow to get token by authorization through your organization website login form.\n\n         - Replace YOUR_ORGANIZATION with valid domain name.\n         - Allow SSO for your authorized application.\n         - Add your web application redirect url to list of trusted domains for that application.\n\n         See also `http://gethelp.wildapricot.com/en/articles/200`\n      flows:\n        authorizationCode:\n          authorizationUrl: https://YOUR_ORGANIZATION.wildapricot.com/sys/login/OAuthLogin\n          tokenUrl: https://oauth.wildapricot.org/auth/token\n          scopes:\n            auto: autodetect allowed scopes based on current user permissions\n    OAuth2_password:\n      type: oauth2\n      description: |\n        Use this authentication flow to get oauth token by providing user credentials.\n        clientId and clientSecret should be taken from Authorized applications page in admin backend.\n\n        For example if your email is admin@yourdomain.com and password is 123456.\n        you should pass\n        `username=admin@yourdomain.com&password=12345&&scope=auto`\n      flows:\n        password:\n          tokenUrl: https://oauth.wildapricot.org/auth/token\n          scopes:\n            auto: autodetect allowed scopes based on current user permissions\n    OAuth2_clientCredentials:\n      type: oauth2\n      description: |\n        Use this authentication flow to get token by providing API key.\n        For example is your ApiKey is o9q834ywiefyywo34yt you should pass values:\n        clientId=APIKEY&clientSecret=o9q834ywiefyywo34yt\n      flows:\n        clientCredentials:\n          tokenUrl: https://oauth.wildapricot.org/auth/token\n          scopes:\n            auto: autodetect allowed scopes based on current user permissions",
      "url": "",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": null,
      "configurationClass": null,
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "clientBaseInterface": null,
      "injectHttpClient": true,
      "disposeHttpClient": true,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "WildApricotException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "{controller}WildApricotClient",
      "operationGenerationMode": "SingleClientFromOperationId",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": true,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "WildApricot",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": null,
      "newLineBehavior": "Auto"
    }
  }
}